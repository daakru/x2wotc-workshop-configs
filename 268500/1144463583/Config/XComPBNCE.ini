[WOTC_PointBasedNCE.X2DownloadableContentInfo_WOTC_PointBasedNCE]

; Debug Logs: Enable for detailed logging of stat rolls for troubleshooting - leave false unless needed, it will print a LOT of lines to the log file
bDEBUG_LOG = false



; Exclude any character templates that should NOT have their stats randomized
+EXCLUDED_TEMPLATES = "TutorialCentral"
+EXCLUDED_TEMPLATES = "NestCentral"
+EXCLUDED_TEMPLATES = "LostTowersShen"


; Character Stats:

; Each affected stat will have a type, range, shift, and a cost defined, as well as an optional PlusOne bool to support odd numbered
; variance ranges. The range value will be applied +/- from a character's current stat, so the actual variance range will be 2x this
; value (and the upper limit will be +1 if PlusOne is true). For example, a range of 10 and a starting Aim of 65 will produce a variance
; range from 55 to 75 Aim. This range is applied to the character's current stat on their creation and bonus stats from gained ranks
; happen BEFORE the randomized rolls, so if a reward soldier is created and has gained 5 Aim from his rank, his range will be 60 to 80.

; The range is also the limit that a stat can be increased in a single distribution round; this helps to normalize the values a
; little bit (to min roll a stat, you actually have to min roll at least twice - to max roll, you have to max roll twice or roll low
; enough on other stats to have points available for a 3rd distribution round, etc.). Mid values should be a bit more likely than extremes.

; The range shift is used to shift the variance range from the midpoint. This is primarily for stats that have a minimum or where
; we want the stat gains available to only be bonuses. An example is Hacking, which has a minimum value we want to maintain for all
; soldiers - the standard starting value is 5 and we want to maintain at least 1 for each soldier, so in order to use a bigger variance
; range than 1 to 9, a range shift is required. A range shift = to the range will make all gains bonuses. A range shift of 0 is ignored.

; The PlusOne bool, if true, adds one to the upper range to allow odd numbered ranges, like 0 to 1 or 5 to 10. For example, if a stat's
; base value is 5 (hacking) and you want a total variance range of 5 to 10, you would need to use the PlusOne bool. Setting the range to 2
; and the shift to 2 would result in a total variance range of 5 to 9. Setting the PlusOne bool to true will up that to 5 to 10.

; Cost determines how many points from the point pool are used to gain 1 of that stat. Before distributing points to increase stats,
; all stats will start at the minimum of their variance range. Points will be randomly assigned to increase stats (in the order they
; appear below) in rounds until all points are spent or a distribution round limit is reached. The total number of points available to
; distribute can be increased or decreased, but for best results, keep the points around half the cost to max all stats (~ range * cost).
; You may want to use a slightly lower total number of points if you have several stat ranges setup to be strictly bonuses, like the default
; values below, where Defense, Dodge, and Hacking are all limited to opportunities to increase above the base value, never decrease below it.

; An optional chance value can also be defined to force a stat change to pass a chance roll each round to be eligible for spending points
; on that stat for that round. Use this to limit the frequency of stat changes where you want them to be more rare. Default chance is 100%.

; Points are distributed out to stats in the order established below, so changing the order the stats are added to the array will influence
; which stats are more likely to get access to the points before they run out (though they still have to actually roll to get them). Stats
; can be added, removed, or rearranged for the NCE rolls below in any order desired. As an example, I've already added the Psi Offense stat
; to the end of the array and commented it out. Uncommenting it will make that stat randomize just like the rest. Any ECharStatType could be
; added in this manner, but note that some really, really shouldn't be randomized, so be careful and/or know what you are doing. Some of the
; other eStats that can be randomized if you choose will be listed below, however, many of these do not have any UI indicators to show their
; new/different values. I do NOT recommend randomizing any of these, but you can if you really want to experiment... you've been warned.

; eStat_ArmorMitigation			eStat_Strength				eStat_ShieldHP
; eStat_ArmorPiercing			eStat_CritChance			eStat_SightRadius
; eStat_DetectionRadius			eStat_FlankingCritChance	eStat_HearingRadius
; eStat_DetectionModifier		eStat_FlankingAimBonus		eStat_PsiOffense

; If you add/remove stats or change ranges, don't forget to adjust the total points as needed. Don't add the same stat twice - the last one in
; the array will just over-write any changes from duplicates, but they will all eat up points. Changes to the config will not apply retroactively
; and will only take effect when new units are created (including recruits already in the recruit pool - they've already rolled their stats).
; If you are making any major changes, I recommend testing them in a new campaign before proceeding with the changes in an on-going save that you
; care about. If you make a mistake, the new units that spawn will be stuck that way forever unless you fix them with the console. Good luck and enjoy!


; Hitpoints:		[default values result in HP values of 3 - 6]
+CHANGE_STATS = (STAT = eStat_HP,				RANGE = 1,	SHIFT = 0,	COST  = 10,	PLUSONE = true)

; Mobility:			[default values result in Mobility values of 10 - 14]
+CHANGE_STATS = (STAT = eStat_Mobility,			RANGE = 2,	SHIFT = 0,	COST = 10)

; Offense / Aim:	[default values result in Offense values of 55 - 75]
+CHANGE_STATS = (STAT = eStat_Offense,			RANGE = 10,	SHIFT = 0,	COST = 3)

; Will:				[default values result in Will values of 35 - 55]
+CHANGE_STATS = (STAT = eStat_Will,				RANGE = 10,	SHIFT = 5,	COST = 1)

; Defense:			[default values result in Defense values of 0 - 10 (with a 50% chance to change this stat each round)]]
+CHANGE_STATS = (STAT = eStat_Defense,			RANGE = 5,	SHIFT = 5,	COST = 2,						CHANCE = 50)

; Dodge:			[default values result in Dodge values of 0 - 10 (with a 40% chance to change this stat each round)]]
+CHANGE_STATS = (STAT = eStat_Dodge,			RANGE = 5,	SHIFT = 5,	COST = 1,						CHANCE = 40)

; Hack:				[default values result in Hacking values of 5 - 15 (with a 30% chance to change this stat each round)]
+CHANGE_STATS = (STAT = eStat_Hacking,			RANGE = 5,	SHIFT = 5,	COST = 1,						CHANCE = 30)

; Psi Offense:		[default values result in Psi Offense values of 0 - 10 (with a 40% chance to change this stat each round)]
;+CHANGE_STATSE = (STAT = eStat_PsiOffense,		RANGE = 5,	SHIFT = 5,	COST = 1,						CHANCE = 40)

; (This illustrates how to use the PLUSONE arguement to setup an odd range - say you want a 0-1 range on armor...)
; Armor:			[default values result in Armor values of 0 - 1 (with a 40% chance to change this stat each round)]
;+CHANGE_STATS = (STAT = eStat_ArmorMitigation,	RANGE = 0,	SHIFT = 0,	COST = 10,	PLUSONE = true,		CHANCE = 40)


; The number of points that are spent increasing stat values:
INITIAL_POINTS_AVAILABLE = 85

; The maximum number of loops that will be performed to spend points:
; Used to stop the Stat Randomization function if an invalid configuration is entered (ex: 1 point remaining, but you set all the costs to 
; 2 or more points, set points higher than all max stats, etc.). Can be reduced to make it more likely low rolls will result in unspent points.
MAX_DISTRIBUTION_PASSES = 6
[XComGame.XComGameState_AIPlayerData]
-MaxEngagedEnemies[0] = 4   ; Rookie
-MaxEngagedEnemies[1] = 6   ; Veteran
-MaxEngagedEnemies[2] = 6   ; Commander
-MaxEngagedEnemies[3] = 99  ; Legend

-MaxEngagedEnemies[0] = 99
-MaxEngagedEnemies[1] = 99
-MaxEngagedEnemies[2] = 99
-MaxEngagedEnemies[3] = 99

+MaxEngagedEnemies[0] = 99
+MaxEngagedEnemies[1] = 99
+MaxEngagedEnemies[2] = 99
+MaxEngagedEnemies[3] = 99

[XComGame.XComGameState_AIGroup]
+FallbackExclusionList="Gatekeeper"
+FallbackExclusionList="AndromedonRobot"

[XComGame.XGAIPlayer]
; This is essential to Chryssalids, but also to general AI.
-LastResortTargetEffects=(EffectName="Panicked")
-LastResortTargetEffects=(EffectName="Berserk")
-LastResortTargetEffects=(EffectName="Obsessed")
-LastResortTargetEffects=(EffectName="Shattered")
-LastResortTargetEffects=(EffectName="Stunned")
-LastResortTargetEffects=(EffectName="Dazed")

[XComGame.XGAIBehavior]
; **************************************************************************************************************************************************************************************************
; SHADOWBOUND UNIT
; **************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=ShadowboundGrenadeManyProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=2, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=False, bRequireLoS=1)
+AoEProfiles=( Profile=ShadowboundGrenadeSingleProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=False, bRequireLoS=1)

; **************************************************************************************************************************************************************************************************
; VIPER
; **************************************************************************************************************************************************************************************************
-AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1)
+AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=2, bRequireLoS=True)
+AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1, bRequireLoS=True)

; **************************************************************************************************************************************************************************************************
; MUTON
; **************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=MutonGrenadeSingleProfile, Ability=ThrowGrenade, bTargetEnemy=1, bIgnoreSelfDamage=False, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, MinTargets=1)
+AoEProfiles=( Profile=MutonGrenadeManyProfile, Ability=ThrowGrenade, bTargetEnemy=1, bIgnoreSelfDamage=False, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, MinTargets=2)
-m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.2f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
+m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.6f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)

; **************************************************************************************************************************************************************************************************
; CODEX
; **************************************************************************************************************************************************************************************************
-AoEProfiles=( Profile=PsiBombProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, MinTargets=1)
+AoEProfiles=( Profile=PsiBombProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1)
+AoEProfiles=( Profile=PsiBombManyProfile, Ability=PsiBombStage1, bIgnoreSelfDamage=False, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=2)

; **************************************************************************************************************************************************************************************************
; ANDROMEDON
; **************************************************************************************************************************************************************************************************

-AoEProfiles=( Profile=AcidBlobProfile, Ability=AcidBlob, bFailOnFriendlyFire=1, bIgnoreSelfDamage=1)
+AoEProfiles=( Profile=AcidBlobManyProfile, Ability=AcidBlob, MinTargets=3, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=1)
+AoEProfiles=( Profile=AcidBlobFewProfile, Ability=AcidBlob, MinTargets=2, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=1)

; **************************************************************************************************************************************************************************************************
; GATEKEEPER
; **************************************************************************************************************************************************************************************************
-AoEProfiles=( Profile=AnimaInversionCorpseProfile, Ability=AnimaInversion, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0)
-AoEProfiles=( Profile=AnimaInversionMixedProfile, Ability=AnimaInversion, bTargetEnemy=1, bTargetCivilians=1, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=3)
+AoEProfiles=( Profile=AnimaInversionAnyEnemyProfile, Ability=AnimaInversion, bTargetEnemy=1, bTargetCivilians=0, bTargetCorpses=0, bIgnoreSelfDamage=False, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, MinTargets=3)
+AoEProfiles=( Profile=AnimaInversionFewProfile, Ability=AnimaInversion, bTargetEnemy=1, bTargetCivilians=1, bTargetCorpses=1, bIgnoreSelfDamage=False, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, MinTargets=3)
+AoEProfiles=( Profile=AnimaInversionManyProfile, Ability=AnimaInversion, bTargetEnemy=1, bTargetCivilians=1, bTargetCorpses=1, bIgnoreSelfDamage=False, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, MinTargets=4)

; **************************************************************************************************************************************************************************************************
; FACELESS
; **************************************************************************************************************************************************************************************************
-AoEProfiles=( Profile=ScythingClawsPrefTargetProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, MinTargets=1, bRequirePotentialTarget=True)
-AoEProfiles=( Profile=ScythingClawsProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, MinTargets=1)

+AoEProfiles=( Profile=ScythingClawsBestProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, bIgnoreRepeatAttackList=1, MinTargets=3)
+AoEProfiles=( Profile=ScythingClawsGoodProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, bIgnoreRepeatAttackList=1, MinTargets=2)
+AoEProfiles=( Profile=ScythingClawsOKProfile,   Ability=ScythingClaws, bIgnoreSelfDamage=True, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, bIgnoreRepeatAttackList=1, MinTargets=1)

+AoEProfiles=( Profile=ScythingClawsBadProfile,     Ability=ScythingClaws, bIgnoreSelfDamage=True, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, bIgnoreRepeatAttackList=1, MinTargets=3)
+AoEProfiles=( Profile=ScythingClawsVeryBadProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, bIgnoreRepeatAttackList=1, MinTargets=2)
+AoEProfiles=( Profile=ScythingClawsAbysmalProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, bIgnoreRepeatAttackList=1, MinTargets=1)

+AoEProfiles=( Profile=ScythingClawsCivilianProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bTargetCivilians=1, bTargetEnemy=0, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, bIgnoreRepeatAttackList=1, MinTargets=1)
+AoEProfiles=( Profile=ScythingClawsTheLostProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bTargetTheLost=1, bTargetEnemy=0, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, bIgnoreRepeatAttackList=1, MinTargets=1)
+AoEProfiles=( Profile=ScythingClawsCivilianFFProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bTargetCivilians=1, bTargetEnemy=0, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, bIgnoreRepeatAttackList=1, MinTargets=1)
+AoEProfiles=( Profile=ScythingClawsTheLostFFProfile, Ability=ScythingClaws, bIgnoreSelfDamage=True, bTargetTheLost=1, bTargetEnemy=0, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, bIgnoreRepeatAttackList=1, MinTargets=1)

; **************************************************************************************************************************************************************************************************
; AVATAR
; **************************************************************************************************************************************************************************************************
-AoEProfiles=( Profile=PsiRiftProfile, Ability=PsiDimensionalRiftStage1, MinTargets=3, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False)
+AoEProfiles=( Profile=PsiRiftManyProfile, Ability=PsiDimensionalRiftStage1, MinTargets=3, bFailOnFriendlyFire=1, bRequireLoS=1, bFailOnObjectiveFire=False)
+AoEProfiles=( Profile=PsiRiftFewProfile, Ability=PsiDimensionalRiftStage1, MinTargets=2, bFailOnFriendlyFire=1, bRequireLoS=1, bFailOnObjectiveFire=False)

[XComGame.X2AIBTBehaviorTree]
; FLANK PUNISHMENT CODE - Not implemented in BOTE unlike ADVENT Future. ShootIdeal handles this for the moment.
+Behaviors=(BehaviorName=ALIENPunishFlankedEnemyFirstAction, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-StandardShot, Child[2]=BOTE_SelectFlankedEnemyTarget, Child[3]=ShootTargetChance50)
+Behaviors=(BehaviorName=ALIENPunishFlankedEnemyLastAction, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-StandardShot, Child[2]=BOTE_SelectFlankedEnemyTarget, Child[3]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=BOTE_SelectFlankedEnemyTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=BOTE_EvaluateFlankedEnemyTargets, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=BOTE_EvaluateFlankedEnemyTargets, NodeType=RepeatUntilFail, Child[0]=BOTE_EvaluateFlankedEnemies)
+Behaviors=(BehaviorName=BOTE_EvaluateFlankedEnemies, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=BOTE_SSScoreFlankedEnemy, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=BOTE_SSScoreFlankedEnemy, NodeType=Successor, Child[0]=BOTE_ScoreFlankedEnemy)
+Behaviors=(BehaviorName=BOTE_ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=GenericTargetEvaluations)

+Behaviors=(BehaviorName=HuntEnemyWithCoverSeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=HuntEnemySeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=HuntEnemy)
-Behaviors=(BehaviorName=FlankedMoveSelector, NodeType=Selector, Child[0]=MoveAdvanceToCoverLoSUnsafe, Child[1]=MoveAdvanceToCoverUnsafe, Child[2]=FallBack)
-Behaviors=(BehaviorName=FlankedMoveSelector, NodeType=Selector, Child[0]=FallBackWithLOS, Child[1]=FallBack, Child[2]=SelectMove_JobOrDefensive)
+Behaviors=(BehaviorName=FlankedMoveSelector, NodeType=Selector, Child[0]=FallBackWithLOS, Child[1]=FallBack, Child[2]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryToCleanseBurning, NodeType=Selector, Child[0]=BOTETryHunkerToCleanseBurnSafe, Child[1]=BOTEEmergencyBurnRemoval)
+Behaviors=(BehaviorName=BOTEAmIBurning, NodeType=Selector, Child[0]=AffectedByEffect-Burning)
+Behaviors=(BehaviorName=BOTETryHunkerToCleanseBurnSafe, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=BOTEAmIBurning, Child[2]=BOTEBurningLowEnemyCount, Child[3]=DoCower)
+Behaviors=(BehaviorName=BOTEBurningLowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<=", Param[2]=3)
+Behaviors=(BehaviorName=BOTEEmergencyBurnRemoval, NodeType=Sequence, Child[0]=BOTEAmIBurning, Child[1]=HasLowHP, Child[2]=DoCower)

+Behaviors=(BehaviorName=IsAbilityAvailable-HunkerDownNoAnim, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-HunkerDownNoAnim, NodeType=Action)
-Behaviors=(BehaviorName=DoCower, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDown, Child[1]=SelectAbility-HunkerDown)

+Behaviors=(BehaviorName=DoCower, NodeType=Selector, Child[0]=DoCowerNoAnim, Child[1]=DoCowerRegular)
+Behaviors=(BehaviorName=DoCowerNoAnim, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDownNoAnim, Child[1]=SelectAbility-HunkerDownNoAnim)
+Behaviors=(BehaviorName=DoCowerRegular, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDown, Child[1]=SelectAbility-HunkerDown)

; NO COWERING IF LAST UNIT UNLESS YOU ARE ON FIRE
+Behaviors=(BehaviorName=BOTEIsNotLastAIUnit, NodeType=Inverter, Child[0]=IsLastAIUnit)
+Behaviors=(BehaviorName=BOTEDoCower, NodeType=Sequence, Child[0]=BOTEHunkerDownConditions, Child[1]=DoCower)
+Behaviors=(BehaviorName=BOTEHunkerDownConditions, NodeType=Selector, Child[0]=BOTEAmIBurning, Child[1]=BOTEIsNotLastAIUnit)

; FORBID CHARGER FROM BEING A VALID JOB WITH VISIBLE ENEMIES
-Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=JobRoot_ChargerUnsafe)
-Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=NoVisibleEnemies, Child[2]=JobRoot_ChargerUnsafe)
+Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=NoVisibleEnemies, Child[2]=JobRoot_ChargerUnsafe)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; SECTOID
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="Sectoid::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidRedAlert, Child[3]=SectoidNoEnemySightedMove)

;-Behaviors=(BehaviorName=TryShootFlanked50, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectAnyFlankedTarget, Child[2]=ShootTargetChance50)
;-Behaviors=(BehaviorName=SelectAnyFlankedTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedTargets, Child[2]=HasValidTarget-StandardShot)
;-Behaviors=(BehaviorName=EvaluateFlankedTargets, NodeType=RepeatUntilFail, Child[0]=EvaluateAnyFlankedEnemies)
;-Behaviors=(BehaviorName=EvaluateAnyFlankedEnemies, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlanked, Child[2]=UpdateBestTarget)
;-Behaviors=(BehaviorName=SSScoreFlanked, NodeType=Successor, Child[0]=ScoreFlanked)
;-Behaviors=(BehaviorName=ScoreFlanked, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=GenericTargetEvaluations)

-Behaviors=(BehaviorName=SectoidRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=DoIfFlankedMove, \\
    Child[1]=SelectMove_JobOrDefensive, \\
    Child[2]=TryShootFlanked50, \\
    Child[3]=TryPsiReanimationOrMindSpinOption, \\
    Child[4]=TryShootOrReloadOrOverwatch, \\
    Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=SectoidRedLastActionSelector, NodeType=Selector, \\
    Child[0]=DoIfFlankedMove, \\
    Child[1]=TryShootFlanked50, \\
    Child[2]=TryPsiReanimationOrMindSpinOption, \\
    Child[3]=TryShootOrReloadOrOverwatch, \\
    Child[4]=HuntEnemyWithCover, \\
    Child[5]=SelectMove_JobOrDefensive)

-Behaviors=(BehaviorName=SectoidRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectoidRedFirstAction, Child[2]=SectoidRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=SectoidRedAbilitySelector, NodeType=Selector, Child[0]=SectoidMimicBeaconBehavior, Child[1]=SectoidRedFirstAction, Child[2]=SectoidRedLastAction)
+Behaviors=(BehaviorName=SectoidMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=60)

+Behaviors=(BehaviorName="Sectoid::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidRedAlert, Child[3]=SectoidYellowAlertActionOrMove)
+Behaviors=(BehaviorName=SectoidRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=DoIfFlankedMove, \\
    Child[1]=TrySectoidPsiReanimation67, \\
    Child[2]=ShootIfIdeal, \\
    Child[3]=NeedsReload, \\
    Child[4]=TrySectoidMindSpin50, \\
    Child[5]=TrySectoidMovement50, \\
    Child[6]=TryShootOrReloadOrOverwatch, \\
    Child[7]=SelectMove_JobOrDefensive, \\
    Child[8]=HuntEnemyWithCoverSeeNoOne)

+Behaviors=(BehaviorName=SectoidRedLastActionSelector, NodeType=Selector, \\
    Child[0]=BOTEEmergencyBurnRemoval, \\
    Child[1]=RaiseUndeadIfNoEnemiesVisible, \\
    Child[2]=TryToCleanseBurning, \\
    Child[3]=ShootIfIdeal, \\
    Child[4]=TryPsiReanimationRandom, \\
    Child[5]=TryMindSpinRandom, \\
    Child[6]=CounterSuppressionWithPsionics, \\
    Child[7]=TryTwoTurnAttackSupportIfSafe, \\
    Child[8]=TryShootOrReloadOrOverwatch, \\
    Child[9]=HuntEnemyWithCoverSeeNoOne, \\
    Child[10]=TrySectoidPsionicPower, \\
    Child[11]=TryOverwatch, \\
    Child[12]=BOTEDoCower)

; Psi Zombies in yellow alert, LW style.
+Behaviors=(BehaviorName=SectoidYellowAlertActionOrMove, NodeType=Selector, Child[0]=TryPsiReanimation, Child[1]=GenericAlertHandler)
+Behaviors=(BehaviorName=TryPsiReanimationRandom, NodeType=RandFilter, Child[0]=TryPsiReanimation, Param[0]=50)
+Behaviors=(BehaviorName=TryMindSpin, NodeType=Sequence, Child[0]=IsAbilityAvailable-MindSpin, Child[1]=SelectTargetForMindSpin, Child[2]=SelectAbility-MindSpin)
+Behaviors=(BehaviorName=TryMindSpinRandom, NodeType=RandFilter, Child[0]=TryMindSpin, Param[0]=50)
; Reanimation has a long cooldown, give it higher priority. Both are executed anyway.
+Behaviors=(BehaviorName=TrySectoidPsionicPower, NodeType=RandSelector, Child[0]=TryPsiReanimation, Param[0]=60, Child[1]=TryMindSpin, Param[1]=40)
; If Psi Reanimation is on cooldown, this becomes a 50/50 chance. If not, Reanimation gets slightly higher priority. If MindSpin is not available, this just becomes a movement.
+Behaviors=(BehaviorName=TrySectoidPsiReanimation67, NodeType=RandFilter, Child[0]=TryPsiReanimation, Param[0]=67)
+Behaviors=(BehaviorName=TrySectoidMindSpin50, NodeType=RandFilter, Child[0]=TryMindSpin, Param[0]=33)
+Behaviors=(BehaviorName=TrySectoidMovement50, NodeType=RandFilter, Child[0]=SelectMove_JobOrDefensive, Param[0]=50)

+Behaviors=(BehaviorName=CounterSuppressionWithPsionics, NodeType=Sequence, Child[0]=SectoidVisibleSuppressors, Child[1]=TrySectoidPsionicPower)
+Behaviors=(BehaviorName=SectoidVisibleSuppressors, NodeType=Inverter, Child[0]=NoVisibleSuppressors)
+Behaviors=(BehaviorName=RaiseUndeadIfNoEnemiesVisible, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=TryPsiReanimation)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; VIPER
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=ViperRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=ConsiderTonguePullPriorityOrMelee, \\
    Child[1]=TryGetOverHere, \\
    Child[2]=TryMoveThenPoisonSpit, \\
    Child[3]=TryMoveThenPoisonSpitSingle, \\
    Child[4]=SelectMoveStandard, \\
    Child[5]=TryShootOrReloadOrOverwatch, \\
    Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=ViperRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMelee, \\
    Child[1]=TryPoisonSpit, \\
    Child[2]=TryGetOverHere, \\
    Child[3]=TryPoisonSpitSingle, \\
    Child[4]=TryShootOrReloadOrOverwatch, \\
    Child[5]=DoIfFlankedMove, \\
    Child[6]=HuntEnemyWithCover, \\
    Child[7]=SelectMoveStandard)
    
-Behaviors=(BehaviorName=ViperRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperRedFirstAction, Child[2]=ViperRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=ViperRedAbilitySelector, NodeType=Selector, Child[0]=ViperMimicBeaconBehavior, Child[1]=ViperRedFirstAction, Child[2]=ViperRedLastAction)
+Behaviors=(BehaviorName=ViperMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=80)

+Behaviors=(BehaviorName=ViperRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryBindPriorityLoneTarget, \\
    Child[1]=TryBindSometimes, \\
    Child[2]=DoIfFlankedMove, \\
    Child[3]=ViperPunishFlanked75, \\
    Child[4]=TryPoisonSpit, \\
    Child[5]=TryGetOverHere, \\
    Child[6]=NeedsReload, \\
    Child[7]=TryTwoTurnAttackSupportIfSafe, \\
    Child[8]=SelectMove_JobOrFlanking, \\
    Child[9]=TryShootOrReloadOrOverwatch, \\
    Child[10]=TryPoisonSpitSingleIfDamaged, \\
    Child[11]=HuntEnemyWithCoverSeeNoOne)

+Behaviors=(BehaviorName=ViperRedLastActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
    Child[1]=BOTEEmergencyBurnRemoval, \\
    Child[2]=MoveOutOfFlankIfNotMoved, \\
    Child[3]=ViperPunishFlanked, \\
    Child[4]=TryToCleanseBurning, \\
    Child[5]=TryPoisonSpit, \\
    Child[6]=TryViperSuppression, \\
    Child[7]=TryTwoTurnAttackSupportIfSafe, \\
    Child[8]=TryPoisonSpitSingleIfDamaged, \\
    Child[9]=TryShootOrReloadOrOverwatch, \\
    Child[10]=TryPoisonSpitSingle, \\
    Child[11]=HuntEnemyWithCoverSeeNoOne, \\
    Child[12]=TryOverwatch, \\
    Child[13]=BOTEDoCower)

; Randomly attempt to bind opponents at range 33% of the time, or adjacent targets.
+Behaviors=(BehaviorName=TryBindSometimes, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=33)
+Behaviors=(BehaviorName=TryBindPriorityLoneTarget, NodeType=Sequence, Child[0]=ViperOneEnemyVisible, Child[1]=TryStandardMelee)
; Poison spit single is valid only if the Viper is damaged.
+Behaviors=(BehaviorName=TryPoisonSpitSingleIfDamaged, NodeType=Sequence, Child[0]=HasWounds, Child[1]=TryPoisonSpitSingle)
+Behaviors=(BehaviorName=ViperOneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
+Behaviors=(BehaviorName=MoveOutOfFlankIfNotMoved, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=DoIfFlankedMove)
; Viper flank punishment
+Behaviors=(BehaviorName=ViperPunishFlanked, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=ViperPunishFlanked75, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget, Child[2]=ViperTryFlankShot75)
+Behaviors=(BehaviorName=ViperTryFlankShot75, NodeType=RandFilter, Child[0]=SelectAbility-StandardShot, Param[0]=75)

+Behaviors=(BehaviorName=TryViperSuppression, NodeType=Selector, Child[0]=TryViperSuppressionSupported, Child[1]=TryViperSuppressClosest)
+Behaviors=(BehaviorName=TryViperSuppressClosest, NodeType=Sequence, Child[0]=ViperSuppressionCondition, Child[1]=ViperDoSuppression)
+Behaviors=(BehaviorName=ViperDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=ViperSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=ViperOneOrMoreOverwatchingTeammates)
+Behaviors=(BehaviorName=ViperOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryViperSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=ViperRandomSuppression)
+Behaviors=(BehaviorName=ViperRandomSuppression, NodeType=RandFilter, Child[0]=ViperDoSuppression, Param[0]=15)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; NEONATES DLC2 USES VIPER
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="ViperNeonate::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperNeonateRedAlert, Child[3]=GenericAlertHandler)

-Behaviors=(BehaviorName=ViperNeonateRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ViperNeonateRedAbilitySelector)
-Behaviors=(BehaviorName=ViperNeonateRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperNeonateRedFirstAction, Child[2]=ViperNeonateRedLastAction)

-Behaviors=(BehaviorName=ViperNeonateRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ViperNeonateRedFirstActionSelector)
-Behaviors=(BehaviorName=ViperNeonateRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMelee, \\
    Child[1]=SelectMoveStandard, \\
    Child[2]=TryShootOrReloadOrOverwatch, \\
    Child[3]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=ViperNeonateRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ViperNeonateRedLastActionSelector)
-Behaviors=(BehaviorName=ViperNeonateRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMelee, \\
    Child[1]=TryShootOrReloadOrOverwatch, \\
    Child[2]=DoIfFlankedMove, \\
    Child[3]=HuntEnemyWithCover, \\
    Child[4]=SelectMoveStandard)

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName="ViperNeonate::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperRedAlert, Child[3]=GenericAlertHandler)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; MUTON
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

; Updated Suppression for mutons to have a chance of 10% per visible ally.
-Behaviors=(BehaviorName=TryBayonet, NodeType=Sequence, Child[0]=IsAbilityReady-Bayonet, Child[1]=BayonetStepSelector)
;-Behaviors=(BehaviorName=BayonetStepSelector, NodeType=Selector, Child[0]=BayonetAttack, Child[1]=MoveMeleeDefensiveIfFirstAbility)
;-Behaviors=(BehaviorName=TrySuppressClosest, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=CheckShouldSuppressVar, Child[2]=SelectTargetForSuppression, Child[3]=SelectAbility-Suppression)
;-Behaviors=(BehaviorName=TryMoveToSuppressClosest, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-Suppression, Child[2]=CheckShouldSuppressVar, Child[3]=SelectClosestPotentialSuppressionTarget, Child[4]=MoveStandardIfFirstAbility-Suppression)
;-Behaviors=(BehaviorName=CheckShouldSuppressVar, NodeType=Sequence, Child[0]=InitSetSuppressVar, Child[1]=ShouldSuppress)
;-Behaviors=(BehaviorName=ShouldSuppress, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="ShouldSuppress")
;-Behaviors=(BehaviorName=InitSetSuppressVar, NodeType=Selector, Child[0]=HasBTVar-ShouldSuppress, Child[1]=UpdateShouldSuppressVar)
;-Behaviors=(BehaviorName=HasBTVar-ShouldSuppress, NodeType=Condition)
;-Behaviors=(BehaviorName=UpdateShouldSuppressVar, NodeType=Selector, Child[0]=TrySetShouldSuppressTrue, Child[1]=SetShouldSuppressFalse)
;-Behaviors=(BehaviorName=TrySetShouldSuppressTrue, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=RollForSuppressionPerVisibleAlly, Child[2]=SetShouldSuppressTrue)
;-Behaviors=(BehaviorName=SetShouldSuppressTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="ShouldSuppress", Param[2]="1")
;-Behaviors=(BehaviorName=SetShouldSuppressFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="ShouldSuppress", Param[2]="0")
;-Behaviors=(BehaviorName=RollForSuppressionPerVisibleAlly, NodeType=Condition, Param[0]=10); Param[0]=Percent chance per visible ally to succeed.

-Behaviors=(BehaviorName=MutonRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryBayonet, \\
    Child[1]=TryMoveThenGrenade, \\
    Child[2]=TryMoveToSuppressClosest, \\
    Child[3]=TryTwoTurnAttackSupportIfSafe, \\
    Child[4]=SelectMoveProfileByJob, \\
    Child[5]=TryShootOrReloadOrOverwatch, \\
    Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=MutonRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryBayonet, \\
    Child[1]=TryGrenade, \\
    Child[2]=TrySuppressClosest, \\
    Child[3]=TryShootOrReloadOrOverwatch, \\
    Child[4]=HuntEnemyWithCover, \\
    Child[5]=SelectMove_JobOrAggressive) 

-Behaviors=(BehaviorName=MutonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonRedFirstAction, Child[2]=MutonRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=MutonRedAbilitySelector, NodeType=Selector, Child[0]=MutonMimicBeaconBehavior, Child[1]=MutonRedFirstAction, Child[2]=MutonRedLastAction)
+Behaviors=(BehaviorName=MutonMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=60)

+Behaviors=(BehaviorName=FindPotentialAoETargets-MutonGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MutonGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MutonGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MutonGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=OneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
+Behaviors=(BehaviorName=ManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=1)
+Behaviors=(BehaviorName=LowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<=", Param[2]=2)

+Behaviors=(BehaviorName=MutonRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryBayonet, \\
    Child[1]=DoIfFlankedMove, \\
    Child[2]=TryMutonGrenadeMany, \\
    Child[3]=ShootIfIdeal, \\
    Child[4]=TryMutonSuppression, \\
    Child[5]=TryTwoTurnAttackSupportIfSafe, \\
    Child[6]=TryMutonGrenadeSingle, \\
    Child[7]=TryMoveForBayonetStrike, \\
    Child[8]=TryBayonetMasterMoveAfterBayonet, \\
    Child[9]=NeedsReload, \\
    Child[10]=SelectMove_JobOrAggressive, \\
    Child[11]=HuntEnemyWithCoverSeeNoOne, \\
    Child[12]=TryShootOrReloadOrOverwatch)

+Behaviors=(BehaviorName=MutonRedLastActionSelector, NodeType=Selector, \\
    Child[0]=BayonetAttack, \\
    Child[1]=BOTEEmergencyBurnRemoval, \\
    Child[2]=TryBayonetMasterMoveAfterBayonet, \\
    Child[3]=TryMutonGrenadeMany, \\
    Child[4]=TryToCleanseBurning, \\
    Child[5]=ShootIfIdeal, \\
    Child[6]=TryMutonSuppression, \\
    Child[7]=TryTwoTurnAttackSupportIfSafe, \\
    Child[8]=TryMutonGrenadeSingle, \\
    Child[9]=TryShootOrReloadOrOverwatch, \\
    Child[10]=HuntEnemyWithCoverSeeNoOne, \\
    Child[11]=TryOverwatch, \\
    Child[12]=SelectMove_JobOrAggressive, \\
    Child[13]=BOTEDoCower)

; Special provision, if only one enemy is visible, bayonet the shit out of it. Or if you have a lot of friends, or if theres not a lot of enemies. If you have a good diagonal from cover, bayonet that shit.
+Behaviors=(BehaviorName=TryBayonet, NodeType=Selector, Child[0]=TryBayonetPriorityOneEnemy, Child[1]=TryBayonetFromSafety, Child[2]=TryBayonetIfSupported)
+Behaviors=(BehaviorName=TryBayonetPriorityOneEnemy, NodeType=Sequence, Child[0]=OneEnemyVisible, Child[1]=OneEnemyBayonetFilter)
+Behaviors=(BehaviorName=TryBayonetFromSafety, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=BayonetAttack)
+Behaviors=(BehaviorName=TryBayonetIfSupported, NodeType=Sequence, Child[0]=TryMoveForBayonetStrike)
+Behaviors=(BehaviorName=BayonetOrMoveForBayonet, NodeType=Selector, Child[0]=BayonetAttack, Child[1]=MoveToMeleeIfBayonetAvailableIfFirstAbility)
+Behaviors=(BehaviorName=MoveToMeleeIfBayonetAvailableIfFirstAbility, NodeType=Sequence, Child[0]=IsAbilityAvailable-Bayonet, Child[1]=MoveMeleeDefensiveIfFirstAbility)
+Behaviors=(BehaviorName=OneEnemyBayonetFilter, NodeType=RandFilter, Child[0]=BayonetOrMoveForBayonet, Param[0]=75)
+Behaviors=(BehaviorName=LowEnemyCountOrHighAllyCount, NodeType=Selector, Child[0]=ManyAlliesVisible, Child[1]=LowEnemyCount)
; Move in for Bayonet, but only with high health, and not always.
+Behaviors=(BehaviorName=TryMoveForBayonetStrike, NodeType=Sequence, Child[0]=LowEnemyCountOrHighAllyCount, Child[1]=MutonBayonetHPThreshold, Child[2]=MutonMeleeFilter)
+Behaviors=(BehaviorName=MutonBayonetHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="50%")
+Behaviors=(BehaviorName=MutonMeleeFilter, NodeType=RandFilter, Child[0]=BayonetOrMoveForBayonet, Param[0]=33)
; Muton Suppression
+Behaviors=(BehaviorName=TryMutonSuppression, NodeType=Selector, Child[0]=TryMutonSuppressionSupported, Child[1]=TryMutonSuppressClosest)
+Behaviors=(BehaviorName=TryMutonSuppressClosest, NodeType=Sequence, Child[0]=MutonSuppressionCondition, Child[1]=MutonDoSuppression)
+Behaviors=(BehaviorName=MutonDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=MutonSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=MutonOneOrMoreOverwatchingTeammates)
+Behaviors=(BehaviorName=MutonOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryMutonSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=MutonRandomSuppression)
+Behaviors=(BehaviorName=MutonRandomSuppression, NodeType=RandFilter, Child[0]=MutonDoSuppression, Param[0]=15)
; Grenading
+Behaviors=(BehaviorName=TryMutonGrenadeMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-MutonGrenadeManyProfile, Child[2]=SelectAoETarget-MutonGrenadeManyProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryMutonGrenadeSingle, NodeType=Sequence, Child[0]=MutonSingleGrenadeFilter, Child[1]=FindPotentialAoETargets-MutonGrenadeSingleProfile, Child[2]=SelectAoETarget-MutonGrenadeSingleProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=MutonSingleGrenadeFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=20)
; Bayonet Master free move
+Behaviors=(BehaviorName=TryBayonetMasterMoveAfterBayonet, NodeType=Sequence, Child[0]=WasLastAbility-Bayonet, Child[1]=BayonetMasterMove)
+Behaviors=(BehaviorName=BayonetMasterMove, NodeType=Selector, Child[0]=TryAgileMove, Child[1]=FallBackWithLoSUnsafe, Child[2]=SkipMove)
+Behaviors=(BehaviorName=WasLastAbility-Bayonet, NodeType=Condition)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; CODEX
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=TryTriggerSuperposition, NodeType=Sequence, Child[0]=IsAbilityAvailable-TriggerSuperposition, Child[1]=SelectAbility-TriggerSuperposition)

-Behaviors=(BehaviorName=CodexRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryMoveThenPsiBomb, \\
    Child[1]=DoIfFlankedMove_Teleport, \\
    Child[2]=TryTeleportDefensive, \\
    Child[3]=SelectMove_JobOrFlanking, \\
    Child[4]=TryShootOrReloadOrOverwatch, \\
    Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=CodexRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryPsiBomb, \\
    Child[1]=TryShootOrReloadOrOverwatch, \\
    Child[2]=HuntEnemyWithCover, \\
    Child[3]=SelectMove_JobOrFlanking)

-Behaviors=(BehaviorName=TryPsiBomb, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiBombStage1, Child[1]=FindPotentialAoETargets-PsiBombProfile, Child[2]=SelectAoETarget-PsiBombProfile, Child[3]=SelectAbility-PsiBombStage1)
-Behaviors=(BehaviorName=TryMoveThenPsiBomb, NodeType=Selector, Child[0]=TryTeleportForPsiBomb, Child[1]=TryMoveForPsiBomb, Child[2]=TryPsiBomb)
-Behaviors=(BehaviorName=CodexSometimesPsiBomb, NodeType=RandFilter, Child[0]=TryPsiBomb, Param[0]=33)

-Behaviors=(BehaviorName=CodexRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior,  Child[1]=CodexRedFirstAction, Child[2]=CodexRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=CodexRedAbilitySelector, NodeType=Selector, Child[0]=CodexMimicBeaconBehavior,  Child[1]=CodexRedFirstAction, Child[2]=CodexRedLastAction)
+Behaviors=(BehaviorName=CodexMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=30)

+Behaviors=(BehaviorName=FindPotentialAoETargets-PsiBombManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-PsiBombManyProfile, NodeType=Action)

+Behaviors=(BehaviorName=CodexRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=DoIfFlankedMove_Teleport, \\
    Child[1]=DoIfFlankedMove, \\
    Child[2]=ShootFlankedPriority, \\
    Child[3]=TryTeleportOutOfSuppression, \\
    Child[4]=TryPsiBombSometimesManyTargets, \\
    Child[5]=TryTeleportOffensiveSometimes, \\
    Child[6]=SelectMove_JobOrFlanking, \\
    Child[7]=TryShootOrReloadOrOverwatch, \\
    Child[8]=HuntEnemyWithCoverSeeNoOne)

+Behaviors=(BehaviorName=CodexRedLastActionSelector, NodeType=Selector, \\
    Child[0]=ShootFlankedPriority, \\
    Child[1]=TryPsiBombSometimesManyTargets, \\
    Child[2]=TryPsiBombRarelyOneTarget, \\
    Child[3]=TryShootOrReloadOrOverwatch, \\
    Child[4]=TryCodexSuppression, \\
    Child[5]=PsiBombManyTargets, \\
    Child[6]=PsiBombOneTarget, \\
    Child[7]=HuntEnemyWithCoverSeeNoOne, \\
    Child[8]=TryOverwatch, \\
    Child[9]=BOTEDoCower)

+Behaviors=(BehaviorName=TryCodexSuppression, NodeType=Selector, Child[0]=TryCodexSuppressionSupported, Child[1]=TryCodexSuppressClosest)
+Behaviors=(BehaviorName=TryCodexSuppressClosest, NodeType=Sequence, Child[0]=CodexSuppressionCondition, Child[1]=CodexDoSuppression)
+Behaviors=(BehaviorName=CodexDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=CodexSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=CodexOneOrMoreOverwatchingTeammates)
+Behaviors=(BehaviorName=CodexOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryCodexSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=CodexRandomSuppression)
+Behaviors=(BehaviorName=CodexRandomSuppression, NodeType=RandFilter, Child[0]=CodexDoSuppression, Param[0]=10)

; Copy of the Beaglerush code. Will never be executed if the Codex is being flanked, safety above all.
+Behaviors=(BehaviorName=ShootFlankedPriority, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=NotFlanked, Child[2]=SelectFlankedEnemyTarget, Child[3]=ShootTargetChance75)
+Behaviors=(BehaviorName=ShootTargetChance75, NodeType=RandFilter, Child[0]=SelectAbility-StandardShot, Param[0]=75)

; Psi Bomb selection
+Behaviors=(BehaviorName=TryPsiBombRarelyOneTarget, NodeType=RandFilter, Child[0]=PsiBombOneTarget, Param[0]=20)
+Behaviors=(BehaviorName=TryPsiBombSometimesManyTargets, NodeType=RandFilter, Child[0]=PsiBombManyTargets, Param[0]=40)

+Behaviors=(BehaviorName=PsiBombOneTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiBombStage1, Child[1]=FindPotentialAoETargets-PsiBombProfile, Child[2]=SelectAoETarget-PsiBombProfile, Child[3]=SelectAbility-PsiBombStage1)
+Behaviors=(BehaviorName=PsiBombManyTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiBombStage1, Child[1]=FindPotentialAoETargets-PsiBombManyProfile, Child[2]=SelectAoETarget-PsiBombManyProfile, Child[3]=SelectAbility-PsiBombStage1)

+Behaviors=(BehaviorName=TryTeleportOffensiveSometimes, NodeType=RandFilter, Child[0]=TryTeleportOffensive, Param[0]=66)
+Behaviors=(BehaviorName=TryTriggerSuperposition, NodeType=Sequence, Child[0]=IsAbilityAvailable-TriggerSuperposition, Child[1]=SuperpositionMinimumHP, Child[2]=SelectAbility-TriggerSuperposition)
+Behaviors=(BehaviorName=SuperpositionMinimumHP, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">", Param[2]="10%")

+Behaviors=(BehaviorName=TryTeleportOutOfSuppression, NodeType=Sequence, Child[0]=BeingSuppressedCodexCheck, Child[1]=TryTeleportOffensive)
+Behaviors=(BehaviorName=BeingSuppressedCodexCheck, NodeType=Inverter, Child[0]=NoVisibleSuppressors)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; BERSERKER
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=BerserkerRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryBerserkerMelee, \\
    Child[1]=MoveMeleeDashFANATICUnsafe, \\
    Child[2]=HuntEnemyUnsafe)

-Behaviors=(BehaviorName=BerserkerRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryBerserkerMelee, \\
    Child[1]=MoveMeleeDashFANATICUnsafe, \\
    Child[2]=HuntEnemyUnsafe)

-Behaviors=(BehaviorName=Berserker_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=BerserkerRedFirstAction, Child[2]=BerserkerRedLastAction);
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=Berserker_RedAbilitySelector, NodeType=Selector, Child[0]=BerserkerMimicBeaconBehavior, Child[1]=BerserkerRedFirstAction, Child[2]=BerserkerRedLastAction);
+Behaviors=(BehaviorName=BerserkerMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=90)

+Behaviors=(BehaviorName=BerserkerRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMeleeDashFANATICUnsafe, \\
    Child[1]=TriggerRageIfCannotAttack, \\
    Child[2]=HuntEnemySeeNoOne)

+Behaviors=(BehaviorName=BerserkerRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMeleeDashFANATICUnsafe, \\
    Child[1]=TriggerRageIfCannotAttack, \\
    Child[2]=HuntEnemySeeNoOne)

+Behaviors=(BehaviorName=TriggerRageIfCannotAttack, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=BerserkerNotEnraged, Child[2]=HasWounds, Child[3]=TryTriggerRage)
+Behaviors=(BehaviorName=BerserkerNotEnraged, NodeType=Inverter, Child[0]=AffectedByEffect-RageTriggered)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; ARCHON
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=BigDamnPunch, EquivalentAbilityName[1]=DevastatingPunch, EquivalentAbilityName[2]=ChryssalidSlash, EquivalentAbilityName[3]=Bayonet, EquivalentAbilityName[4]=SwordSlice, EquivalentAbilityName[5]=Reaper, EquivalentAbilityName[6]=StunLance, EquivalentAbilityName[7]=AnimaConsume, EquivalentAbilityName[8]=ScythingClaws, EquivalentAbilityName[9]=Bind, EquivalentAbilityName[10]=ChryssalidSlashMP)
-EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=BigDamnPunch, EquivalentAbilityName[1]=DevastatingPunch, EquivalentAbilityName[2]=ChryssalidSlash, EquivalentAbilityName[3]=Bayonet, EquivalentAbilityName[4]=SwordSlice, EquivalentAbilityName[5]=Reaper, EquivalentAbilityName[6]=StunLance, EquivalentAbilityName[7]=AnimaConsume, EquivalentAbilityName[8]=ScythingClaws, EquivalentAbilityName[9]=Bind, EquivalentAbilityName[10]=ChryssalidSlashMP, EquivalentAbilityName[11]=ViperNeonateBindAbility, EquivalentAbilityName[12]=QueenDevastatingPunch, EquivalentAbilityName[13]=StandardMelee_NoEnd)
-EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=BigDamnPunch, EquivalentAbilityName[1]=DevastatingPunch, EquivalentAbilityName[2]=ChryssalidSlash, EquivalentAbilityName[3]=Bayonet, EquivalentAbilityName[4]=SwordSlice, EquivalentAbilityName[5]=Reaper, EquivalentAbilityName[6]=StunLance, EquivalentAbilityName[7]=AnimaConsume, EquivalentAbilityName[8]=ScythingClaws, EquivalentAbilityName[9]=Bind, EquivalentAbilityName[10]=ChryssalidSlashMP, EquivalentAbilityName[11]=SkirmisherMelee)

-Behaviors=(BehaviorName=ArchonFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryFrenziedMoveAndAttack, \\
    Child[1]=TryMoveThenBlazingPinions, \\
    Child[2]=TryStandardMelee, \\
    Child[3]=DoIfFlankedMove, \\
    Child[4]=SelectMoveStandard, \\
    Child[5]=TryShootOrReloadOrOverwatch, \\
    Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=ArchonRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryFrenziedAttack, \\
    Child[1]=TryBlazingPinions, \\
    Child[2]=TryStandardMelee, \\
    Child[3]=TryShootOrReloadOrOverwatch, \\
    Child[4]=HuntEnemy, \\
    Child[5]=SelectMoveStandard)

-Behaviors=(BehaviorName=TryFrenziedAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryStandardMelee)
-Behaviors=(BehaviorName=TryAttackOrDashAndAttack, NodeType=Selector, Child[0]=TryStandardMelee, Child[1]=TryStandardMeleeDashFANATICUnsafe)

-Behaviors=(BehaviorName=ArchonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ArchonRedFirstAction, Child[2]=ArchonRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=ArchonRedAbilitySelector, NodeType=Selector, Child[0]=ArchonMimicBeaconBehavior, Child[1]=ArchonRedFirstAction, Child[2]=ArchonRedLastAction)
+Behaviors=(BehaviorName=ArchonMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=50)

+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=BigDamnPunch, EquivalentAbilityName[1]=DevastatingPunch, EquivalentAbilityName[2]=ChryssalidSlash, EquivalentAbilityName[3]=Bayonet, EquivalentAbilityName[4]=SwordSlice, EquivalentAbilityName[5]=Reaper, EquivalentAbilityName[6]=StunLance, EquivalentAbilityName[7]=AnimaConsume, EquivalentAbilityName[8]=ScythingClaws, EquivalentAbilityName[9]=Bind, EquivalentAbilityName[10]=ChryssalidSlashMP, EquivalentAbilityName[11]=ViperNeonateBindAbility, EquivalentAbilityName[12]=QueenDevastatingPunch, EquivalentAbilityName[13]=StandardMelee_NoEnd, EquivalentAbilityName[14]=StandardMovingMelee, EquivalentAbilityName[15]=SkirmisherMelee)

+Behaviors=(BehaviorName=ArchonFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryFrenziedMoveAndAttack, \\
    Child[1]=TryMoveThenBlazingPinionsWithConditions, \\
    Child[2]=TryStandardMeleeSometimes, \\
    Child[3]=TryShootOrReloadOrOverwatch, \\
    Child[4]=MoveStandardHeightNC, \\
    Child[5]=HuntEnemySeeNoOne)

+Behaviors=(BehaviorName=TryStandardMeleeSometimes, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=25)
+Behaviors=(BehaviorName=TryStandardMeleeMoreOften, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=33)

+Behaviors=(BehaviorName=ArchonRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryFrenziedAttack, \\
    Child[1]=TryBlazingPinionsWithConditions, \\
    Child[2]=TryStandardMeleeMoreOften, \\
    Child[3]=TryShootOrReloadOrOverwatch, \\
    Child[4]=MoveStandardHeightNC, \\
    Child[5]=HuntEnemySeeNoOne, \\
    Child[6]=TryStandardMelee, \\
    Child[7]=TryOverwatch)

+Behaviors=(BehaviorName=TryMoveThenBlazingPinionsWithConditions, NodeType=Selector, Child[0]=TryMoveForBlazingPinionsWithConditions, Child[1]=TryBlazingPinionsWithConditions)
+Behaviors=(BehaviorName=TryMoveForBlazingPinionsWithConditions, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=HasHighHP, Child[2]=AnyAlliesVisible, Child[3]=IsAbilityReady-BlazingPinionsStage1, Child[4]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[5]=MoveStandardIfFirstAbility-BlazingPinions)

; Archon height preference without cover movement.
+Behaviors=(BehaviorName=MoveStandardHeightNC, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveStandardHeightNCUnsafe)
+Behaviors=(BehaviorName=MoveStandardHeightNCUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=FindDestination-MWP_StandardHeight, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=TryBlazingPinionsWithConditions, NodeType=Sequence, Child[0]=IsAbilityAvailable-BlazingPinionsStage1, Child[1]=HasHighHP, Child[2]=AnyAlliesVisible, Child[3]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[4]=SelectAoETarget-BlazingPinionsBasicProfile, Child[5]=SelectAbility-BlazingPinionsStage1)
+Behaviors=(BehaviorName=TryFrenziedAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryStandardMeleeDashFANATICUnsafe)
+Behaviors=(BehaviorName=TryAttackOrDashAndAttack, NodeType=Selector, Child[0]=StandardMeleeAttack, Child[1]=TryStandardMeleeDashFANATICUnsafe)

; FRENZY FIX. EXTRA REMOVALS IS IF YOU HAVE MY OTHER MOD THAT FIXES IT ALSO.
-Behaviors=(BehaviorName=TryFrenzyTrigger, NodeType=Sequence, Child[0]=IsAbilityAvailable-FrenzyTrigger, Child[1]=SelectAbility-FrenzyTrigger)
-Behaviors=(BehaviorName=TryFrenzyTrigger, NodeType=Sequence, Child[0]=IsAbilityAvailable-FrenzyTrigger, Child[1]=RollForFrenzyChance)
-Behaviors=(BehaviorName=RollForFrenzyChance, NodeType=RandFilter, Child[0]=SelectAbility-FrenzyTrigger, Param[0]=20)
+Behaviors=(BehaviorName=TryFrenzyTrigger, NodeType=Sequence, Child[0]=IsAbilityAvailable-FrenzyTrigger, Child[1]=RollForFrenzyChance)
+Behaviors=(BehaviorName=RollForFrenzyChance, NodeType=RandFilter, Child[0]=SelectAbility-FrenzyTrigger, Param[0]=20)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; SPECTRE
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=FindStealthDestination_AvoidEnemy, NodeType=Selector, Child[0]=StealthFindAdvanceDestinationIfNoEnemiesVisible, Child[1]=FindLimitedEnemyStealthDestination, Child[2]=FindAnyStealthDestination, Child[3]=FindAnyFallbackDest)
-Behaviors=(BehaviorName=SelectSpectreAbility, NodeType=Selector, Child[0]=SelectPreselectedAbility, Child[1]=MimicBeaconBehavior, Child[2]=SpectreVanishedBranch, Child[3]=VisibleSpectreBranch, Child[4]=SkipMove )
-Behaviors=(BehaviorName=TryHorrorPriority, NodeType=Sequence, Child[0]=HasAlliesOfType-Shadowbind, Child[1]=TryHorror)
-Behaviors=(BehaviorName=SpectreVisibleSelector, NodeType=Selector, \\
            Child[0]=PostShadowbindMove, \\
            Child[1]=TryShadowbindIfNotActive, \\
            Child[2]=TryVanish, \\
            Child[3]=TryMoveThenHorror, \\
            Child[4]=DoIfFlankedMove, \\
            Child[5]=TryShootOrReloadOrOverwatch, \\
            Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=SpectreStealthSelector, NodeType=Selector, \\
    Child[0]=AdvanceCoverIfNoEnemiesVisible, \\
    Child[1]=PostVanishMovement, \\
    Child[2]=TryShadowbindIfNotActive, \\
    Child[3]=TryMoveThenHorror, \\
    Child[4]=AdvanceCoverMove, \\
    Child[5]=TryShootOrReloadOrOverwatch, \\
    Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=TryVanish, NodeType=Sequence, Child[0]=IsAbilityAvailable-Vanish, Child[1]=NotLastActionPoint, Child[2]=VanishByDesignOrChance)

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName=SpectreVisibleSelector, NodeType=Selector, \\
    Child[0]=PostShadowbindMove, \\
    Child[1]=TryShadowbindRandom, \\
    Child[2]=TryPostShadowbindVanish, \\
    Child[3]=TrySpectreVanish, \\
    Child[4]=AdvanceCoverIfNoEnemiesVisible, \\
    Child[5]=SpectreHuntEnemyWithCoverSeeNoOne, \\
    Child[6]=DoIfFlankedMoveFirstAction, \\
    Child[7]=TryHorrorPriority, \\
    Child[8]=NeedsReload, \\
    Child[9]=TryToCleanseBurning, \\
    Child[10]=SpectreMoveFirstAction, \\
    Child[11]=TryHorrorRandom, \\
    Child[12]=ShootIfIdeal, \\
    Child[13]=TryTwoTurnAttackSupportIfSafe, \\
    Child[14]=TryShootOrReloadOrOverwatch, \\
    Child[15]=TryOverwatch, \\
    Child[16]=BOTEDoCower)

+Behaviors=(BehaviorName=SpectreStealthSelector, NodeType=Selector, \\
    Child[0]=SpectreFallbackPostVanish, \\
    Child[1]=AdvanceCoverIfNoEnemiesVisible, \\
    Child[2]=SpectreHuntEnemyWithCoverSeeNoOne, \\
    Child[3]=NeedsReload, \\
    Child[4]=TryShadowbindRandom, \\
    Child[5]=SpectreMoveFirstAction, \\
    Child[6]=TryHorrorPriority, \\
    Child[7]=ShootIfIdeal, \\
    Child[8]=TryTwoTurnAttackSupportIfSafe, \\
    Child[9]=TryShootOrReloadOrOverwatch, \\
    Child[10]=TryOverwatchLastActionSpectre, \\
    Child[11]=AdvanceCoverMove, \\
    Child[12]=HuntEnemyWithCover, \\
    Child[13]=TryOverwatch, \\
    Child[14]=BOTEDoCower)

+Behaviors=(BehaviorName=TryPostShadowbindVanish, NodeType=Sequence, Child[0]=WasLastAbility-Shadowbind, Child[1]=DoSpectreVanish)
+Behaviors=(BehaviorName=TrySpectreVanish, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SpectreVanishChance)
+Behaviors=(BehaviorName=SpectreVanishChance, NodeType=Selector, Child[0]=SpectreVanishSeeNoOne, Child[1]=SpectreVanishRoll)
; If you dont see anyone, just vanish to surprise as you come back into the fight...
+Behaviors=(BehaviorName=SpectreVanishSeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=DoSpectreVanish)
; Or just do it randomly.
+Behaviors=(BehaviorName=SpectreVanishRoll, NodeType=RandFilter, Child[0]=DoSpectreVanish, Param[0]=67)
+Behaviors=(BehaviorName=DoSpectreVanish, NodeType=Sequence, Child[0]=IsAbilityAvailable-Vanish, Child[1]=SelectAbility-Vanish)
+Behaviors=(BehaviorName=SpectreFallbackPostVanish, NodeType=Sequence, Child[0]=WasLastAbility-Vanish, Child[1]=HighCoverFallback)
+Behaviors=(BehaviorName=SpectreHuntEnemyWithCoverSeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=SetAlertDataStack, Child[2]=GenericSelectBestAlert, Child[3]=HasValidAlertDataLocation, Child[4]=AlertDataMovementUseCover, Child[5]=MoveStandardWithDestination)
+Behaviors=(BehaviorName=SpectreMoveFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=DidntJustMove, Child[2]=SpectreMoveOptionsList)
; All of the Spectre's moves are Unsafe, because it doesnt care about Overwatch or Suppression.
+Behaviors=(BehaviorName=SpectreMoveOptionsList, NodeType=Selector, Child[0]=MoveDefensiveUnsafe, Child[1]=FallbackHeightUnsafe, Child[2]=AdvanceCoverMove, Child[3]=MoveRandomCover)

+Behaviors=(BehaviorName=TryVanish, NodeType=Sequence, Child[0]=IsAbilityAvailable-Vanish, Child[1]=NotLastActionPoint, Child[2]=NotFlanked, Child[3]=VanishByDesignOrChance)
+Behaviors=(BehaviorName=DoIfFlankedMoveFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=DoIfFlankedMove)
+Behaviors=(BehaviorName=SpectreMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=30)
+Behaviors=(BehaviorName=TryOverwatchLastActionSpectre, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AnyLivingEnemyVisible, Child[2]=TryOverwatch)

+Behaviors=(BehaviorName=TryShadowbindRandom, NodeType=RandFilter, Child[0]=TryShadowbindIfNotActive, Param[0]=33)
+Behaviors=(BehaviorName=TryHorrorRandom, NodeType=RandFilter, Child[0]=TryHorror, Param[0]=25)
+Behaviors=(BehaviorName=FindStealthDestination_AvoidEnemy, NodeType=Selector, Child[0]=FindAnyFallbackDest, Child[1]=FindAnyStealthDestination)
+Behaviors=(BehaviorName=SelectSpectreAbility, NodeType=Selector, Child[0]=SpectreMimicBeaconBehavior, Child[1]=SpectreVanishedBranch, Child[2]=VisibleSpectreBranch, Child[3]=TryOverwatch, Child[4]=SkipMove )
+Behaviors=(BehaviorName=TryHorrorPriority, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=TryHorror)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; ANDROMEDON
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=FindPotentialAoETargets-AcidBlobProfile, NodeType=Action)
-Behaviors=(BehaviorName=SelectAoETarget-AcidBlobProfile, NodeType=Action)

+Behaviors=(BehaviorName=FindPotentialAoETargets-AcidBlobFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-AcidBlobManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-AcidBlobFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-AcidBlobManyProfile, NodeType=Action)

-Behaviors=(BehaviorName=TryMoveThenAcidBlob, NodeType=Selector, Child[0]=TryMoveForAcidBlob, Child[1]=TryAcidBlob)
-Behaviors=(BehaviorName=TryMoveForAcidBlob, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-AcidBlob, Child[2]=FindPotentialAoETargets-AcidBlobProfile, Child[3]=MoveStandardIfFirstAbility-AcidBlob)
-Behaviors=(BehaviorName=TryAcidBlob, NodeType=Sequence, Child[0]=IsAbilityAvailable-AcidBlob, Child[1]=FindPotentialAoETargets-AcidBlobProfile, Child[2]=SelectAoETarget-AcidBlobProfile, Child[3]=SelectAbility-AcidBlob)

-Behaviors=(BehaviorName=AndromedonRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMelee, \\
    Child[1]=TryMoveThenAcidBlob, \\
    Child[2]=DoIfFlankedMove, \\
    Child[3]=SelectMoveStandard, \\
    Child[4]=TryShootOrReloadOrOverwatch, \\
    Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=AndromedonRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryStandardMelee, \\
    Child[1]=TryAcidBlob, \\
    Child[2]=TryShootOrReloadOrOverwatch, \\
    Child[3]=HuntEnemyWithCover, \\
    Child[4]=SelectMoveStandard)

-Behaviors=(BehaviorName=AndromedonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AndromedonRedFirstAction, Child[2]=AndromedonRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=AndromedonRedAbilitySelector, NodeType=Selector, Child[0]=AndromedonMimicBeaconBehavior, Child[1]=AndromedonRedFirstAction, Child[2]=AndromedonRedLastAction)
+Behaviors=(BehaviorName=AndromedonMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=30)

+Behaviors=(BehaviorName=AndromedonRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryPunchingTarget, \\
    Child[1]=DoIfFlankedMove, \\
    Child[2]=TryAcidBlobMany, \\
    Child[3]=ShootIfIdeal, \\
    Child[4]=TryTwoTurnAttackSupportIfSafe, \\
    Child[5]=TryAndromedonSuppression, \\
    Child[6]=NeedsReload, \\
    Child[7]=TryMoveInForPunch, \\
    Child[8]=TryShootOrReloadOrOverwatch, \\
    Child[9]=TryAcidBlobFew, \\
    Child[10]=SelectMove_JobOrDefensive, \\
    Child[11]=HuntEnemyWithCoverSeeNoOne)

+Behaviors=(BehaviorName=AndromedonRedLastActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
    Child[1]=TryRelocationMoveAfterPunch, \\
    Child[2]=TryAcidBlobMany, \\
    Child[3]=TryToCleanseBurning, \\
    Child[4]=ShootIfIdeal, \\
    Child[5]=TryTwoTurnAttackSupportIfSafe, \\
    Child[6]=TryAndromedonSuppression, \\
    Child[7]=TryShootOrReloadOrOverwatch, \\
    Child[8]=TryAcidBlobFew, \\
    Child[9]=HuntEnemyWithCoverSeeNoOne, \\
    Child[10]=TryOverwatch, \\
    Child[11]=BOTEDoCower, \\
    Child[12]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryAcidBlobMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-AcidBlob, Child[1]=FindPotentialAoETargets-AcidBlobManyProfile, Child[2]=SelectAoETarget-AcidBlobManyProfile, Child[3]=SelectAbility-AcidBlob)
+Behaviors=(BehaviorName=TryAcidBlobFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-AcidBlob, Child[1]=FindPotentialAoETargets-AcidBlobFewProfile, Child[2]=SelectAoETarget-AcidBlobFewProfile, Child[3]=SelectAbility-AcidBlob)

+Behaviors=(BehaviorName=TryPunchingTarget, NodeType=Selector, Child[0]=TryPunchingPriorityOneEnemy, Child[1]=TryPunchFromSafety, Child[2]=TryPunchIfSupported)
; Move in for punch if > 50% HP. And not always.
+Behaviors=(BehaviorName=TryMoveInForPunch, NodeType=Sequence, Child[0]=AndroLowEnemyCountOrHighAllyCount, Child[1]=AndroPunchHPThreshold, Child[2]=AndroMeleeFilter)
+Behaviors=(BehaviorName=AndroPunchHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="50%")
+Behaviors=(BehaviorName=AndroMeleeFilter, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=20)
+Behaviors=(BehaviorName=PunchOrMoveForPunch, NodeType=Selector, Child[0]=StandardMeleeAttack, Child[1]=TryStandardMelee)

+Behaviors=(BehaviorName=AndroOneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
+Behaviors=(BehaviorName=AndroManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=1)
+Behaviors=(BehaviorName=AndroLowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<=", Param[2]=2)
+Behaviors=(BehaviorName=AndroLowEnemyCountOrHighAllyCount, NodeType=Selector, Child[0]=AndroManyAlliesVisible, Child[1]=AndroLowEnemyCount)

; Andromedon suppression if the ability was given.
+Behaviors=(BehaviorName=TryAndromedonSuppression, NodeType=Selector, Child[0]=TryAndromedonSuppressionSupported, Child[1]=TryAndromedonSuppressClosest)
+Behaviors=(BehaviorName=TryAndromedonSuppressClosest, NodeType=Sequence, Child[0]=AndromedonSuppressionCondition, Child[1]=AndromedonDoSuppression)
+Behaviors=(BehaviorName=AndromedonDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=AndromedonSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=AndromedonOneOrMoreOverwatchingTeammates)
+Behaviors=(BehaviorName=AndromedonOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryAndromedonSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=AndromedonRandomSuppression)
+Behaviors=(BehaviorName=AndromedonRandomSuppression, NodeType=RandFilter, Child[0]=AndromedonDoSuppression, Param[0]=15)

+Behaviors=(BehaviorName=TryPunchingPriorityOneEnemy, NodeType=Sequence, Child[0]=AndroOneEnemyVisible, Child[1]=AndroOneEnemyPunchFilter)
+Behaviors=(BehaviorName=AndroOneEnemyPunchFilter, NodeType=RandFilter, Child[0]=PunchOrMoveForPunch, Param[0]=75)
+Behaviors=(BehaviorName=TryPunchFromSafety, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=StandardMeleeAttack)
+Behaviors=(BehaviorName=TryPunchIfSupported, NodeType=Sequence, Child[0]=TryMoveInForPunch)

; Relocation only triggers if flanked which means you just meleed something.
+Behaviors=(BehaviorName=WasLastAbility-Relocation, NodeType=Condition)
+Behaviors=(BehaviorName=TryRelocationMoveAfterPunch, NodeType=Sequence, Child[0]=WasLastAbility-Relocation, Child[1]=AndromedonRelocationMove)
+Behaviors=(BehaviorName=AndromedonRelocationMove, NodeType=Selector, Child[0]=TryAgileMove, Child[1]=FallBackWithLoSUnsafe, Child[2]=SkipMove)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; CHRYSSALID
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

;; Behaviors=(BehaviorName=AlertAndUnburrowOrHeatSeek, NodeType=Selector, Child[0]=TryAlert, Child[1]=TryUnburrow, Child[2]=MimicBeaconBehavior, Child[3]=SelectHeatSeekMove, Child[4]=GenericAlertHandler)
;; Behaviors=(BehaviorName=AreAllRemainingAlliesUnderEffect-Burrowed, NodeType=Condition)
;; Behaviors=(BehaviorName=BurrowIfOutOfView, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=TryBurrow)
;; Behaviors=(BehaviorName=BurrowOptionNotAvailable, NodeType=Selector, Child[0]=IsAtEndOfAxisOfPlay, Child[1]=HasXComUnitsCloserToObjective)
;; Behaviors=(BehaviorName=BurrowedAndEncounterBandPassed, NodeType=Sequence, Child[0]=AffectedByEffect-Burrowed, Child[1]=HasEncounterBandBeenPassed)
;; Behaviors=(BehaviorName=BurrowedandLastGroupRemaining, NodeType=Sequence, Child[0]=AffectedByEffect-Burrowed, Child[1]=AreAllRemainingAlliesUnderEffect-Burrowed)
;; -Behaviors=(BehaviorName=ChryssalidBurrowedAttack, NodeType=Selector, Child[0]=TryUnBurrow, Child[1]=TryMeleeAttackPriorityTarget)
;; -Behaviors=(BehaviorName=ChryssalidGreenAbilitySelector, NodeType=Selector, Child[0]=ChryssalidUnburrowedProtocol, Child[1]=TryJobUnsafe, Child[2]=GenericGreenMovement)
;; -Behaviors=(BehaviorName=ChryssalidGreenAlert, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=ChryssalidGreenAbilitySelector)
;; -Behaviors=(BehaviorName=ChryssalidHeatSeekProtocol, NodeType=Sequence, Child[0]=ChryssalidShouldTriggerHeatSeek, Child[1]=AlertAndUnburrowOrHeatSeek)
;; -Behaviors=(BehaviorName=ChryssalidMeleeSelector, NodeType=Selector, Child[0]=TryMeleeOnCivilian, Child[1]=TryStandardMeleeDashFANATICUnsafe, Child[2]=HuntEnemyUnsafe)
;; -Behaviors=(BehaviorName=ChryssalidMoveOrBurrow, NodeType=Selector, Child[0]=MoveForBurrowIfFirstAction, Child[1]=TryBurrowIfNotOnJob, Child[2]=TryDashMoveForBurrow)
;; -Behaviors=(BehaviorName=ChryssalidRedAbilitySelector, NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=MimicBeaconBehavior, Child[2]=ChryssalidRedActionSelector)
;; -Behaviors=(BehaviorName=ChryssalidRedActionSelector, NodeType=Selector,      Child[0]=TryMelee66,      Child[1]=TryRunAndBurrow33)
;; -Behaviors=(BehaviorName=ChryssalidRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ChryssalidRedAbilitySelector)
;; -Behaviors=(BehaviorName=ChryssalidRoot, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=SkipIfBurrowed, Child[2]=TryJobTerrorist, Child[3]=TryJobChargerUnsafe, Child[4]=ChryssalidGreenAlert, Child[5]=ChryssalidRedAlert, Child[6]=ChryssalidYellowAlert)
;; -Behaviors=(BehaviorName=ChryssalidRunAndBurrowSelector, NodeType=Selector, Child[0]=BurrowIfOutOfView, Child[1]=TryDashMoveForBurrow)
;; -Behaviors=(BehaviorName=ChryssalidScamperRoot, NodeType=Selector, Child[0]=SkipIfBurrowed, Child[1]=MoveMeleeFANATICUnsafe, Child[2]=SelectHeatSeekMove)
;; -Behaviors=(BehaviorName=ChryssalidShouldTriggerHeatSeek, NodeType=Selector, Child[0]=BurrowedAndEncounterBandPassed, Child[1]=BurrowedandLastGroupRemaining, Child[2]=IsUnitTypeVisible-MimicBeacon)
;; -Behaviors=(BehaviorName=ChryssalidUnburrowedProtocol, NodeType=Sequence, Child[0]=IsUnburrowed, Child[1]=GroupSize1, Child[2]=ChryssalidMoveOrBurrow)
;; -Behaviors=(BehaviorName=ChryssalidYellowAbilitySelector, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=ChryssalidUnburrowedProtocol, Child[2]=TryJobUnsafe, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
;; -Behaviors=(BehaviorName=ChryssalidYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=ChryssalidYellowAbilitySelector)
;; -Behaviors=(BehaviorName=DisableBurrowChanceIfIneligible, NodeType=Sequence, Child[0]=BurrowOptionNotAvailable, Child[1]=SetUnitValue-MeleeChance)
;; -Behaviors=(BehaviorName=EvaluateMeleeTargetForClosestCivilian, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestCivilianIfInRange, Child[2]=UpdateBestTarget)
;; -Behaviors=(BehaviorName=FindBurrowDestination, NodeType=Selector, Child[0]=FindLocalBurrowDestination, Child[1]=FindClosestPointToAxisGround)
;; -Behaviors=(BehaviorName=FindLocalBurrowDestination, NodeType=Sequence, Child[0]=SSRestrictToAxisLoSIfInRange, Child[1]=RestrictFromAlliesWithEffect-Burrowed, Child[2]=SSRestrictFromKnownEnemyLoS, Child[3]=SetNoCoverMovement, Child[4]=RestrictToGroundTiles, Child[5]=FindRestrictedDestination-MWP_Burrow)
;; -Behaviors=(BehaviorName=GroupSize1, NodeType=StatCondition, Param[0]=GroupSize, Param[1]="<=", Param[2]=1)
;; -Behaviors=(BehaviorName=IsAtEndOfAxisOfPlay, NodeType=StatCondition, Param[0]=ObjectiveDistance, Param[1]="<=", Param[2]=27) ;Check if within sight range of objective.  If so, do not bother with burrowing.
;; -Behaviors=(BehaviorName=MeleeAttackNearestCivilian, NodeType=Sequence, Child[0]=SelectClosestCivilianInRange, Child[1]=SelectAbility-StandardMelee)
;; -Behaviors=(BehaviorName=MeleeValueUnset, NodeType=Inverter, Child[0]=HasUnitValue-MeleeChance)
;; -Behaviors=(BehaviorName=MoveForBurrowIfFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=TryBurrowMovement)
;; -Behaviors=(BehaviorName=Rand50AttackCivilian, NodeType=RandFilter, Child[0]=MeleeAttackNearestCivilian, Param[0]=50)
;; -Behaviors=(BehaviorName=RestrictToAxisLoSIfInRange, NodeType=Sequence, Child[0]=IsInMovementRangeOfAxisOfPlay, Child[1]=RestrictToAxisLoS)
;;; -Behaviors=(BehaviorName=SSRestrictFromKnownEnemyLoS, NodeType=Successor, Child[0]=RestrictFromKnownEnemyLoS)
;; -Behaviors=(BehaviorName=SSRestrictToAxisLoSIfInRange, NodeType=Successor, Child[0]=RestrictToAxisLoSIfInRange)
;; -Behaviors=(BehaviorName=SSSetMeleeValueIfUnset, NodeType=Successor, Child[0]=SetMeleeValueIfUnset)
;; -Behaviors=(BehaviorName=ScoreClosestCivilianIfInRange, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=TargetIsNotAlien, Child[2]=IsTargetInMovementRange-StandardMelee, Child[3]=TargetScoreByScaledDistance-1, Child[4]=AddToTargetScore_100)
;; -Behaviors=(BehaviorName=SelectClosestCivilianForStandardMelee, NodeType=RepeatUntilFail, Child[0]=EvaluateMeleeTargetForClosestCivilian)
;; -Behaviors=(BehaviorName=SelectClosestCivilianInRange, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectClosestCivilianForStandardMelee, Child[2]=HasValidTarget-StandardMelee)
;; -Behaviors=(BehaviorName=SetMeleeValue, NodeType=Selector, Child[0]=DisableBurrowChanceIfIneligible, Child[1]=SetRandUnitValue-MeleeChance)
;; -Behaviors=(BehaviorName=SetMeleeValueIfUnset, NodeType=Sequence, Child[0]=MeleeValueUnset, Child[1]=SetMeleeValue)
;; -Behaviors=(BehaviorName=SkipIfBurrowed, NodeType=Sequence, Child[0]=AffectedByEffect-Burrowed, Child[1]=SkipMove)
;; -Behaviors=(BehaviorName=TargetScoreClosestCivilianIfInRange, NodeType=Successor, Child[0]=ScoreClosestCivilianIfInRange)
;; -Behaviors=(BehaviorName=TryBurrow, NodeType=Sequence, Child[0]=IsAbilityAvailable-ChryssalidBurrow, Child[1]=SelectAbility-ChryssalidBurrow, Child[2]=SetUnitValue-MeleeChance)
;; -Behaviors=(BehaviorName=TryBurrowIfNotOnJob, NodeType=Sequence, Child[0]=DoNotHaveAlwaysOnJob, Child[1]=BurrowIfOutOfView)
;; -Behaviors=(BehaviorName=TryBurrowMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=FindBurrowDestination, Child[2]=DisableGroupMove, Child[3]=SelectAbility-StandardMove)
;; -Behaviors=(BehaviorName=TryDashMoveForBurrow, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=UseDashMovement, Child[2]=TryBurrowMovement)
;; -Behaviors=(BehaviorName=TryMelee66, NodeType=Sequence, Child[0]=SSSetMeleeValueIfUnset, Child[1]=CheckMeleeUnder67, Child[2]=ChryssalidMeleeSelector)
;; -Behaviors=(BehaviorName=TryMeleeOnCivilian, NodeType=Sequence, Child[0]=NumKilledCiviliansIsLessThanTurnCount, Child[1]=HasVisibleCivilianInMoveRange, Child[2]=Rand50AttackCivilian)
;; -Behaviors=(BehaviorName=TryRunAndBurrow33, NodeType=Sequence, Child[0]=CheckMeleeOver67, Child[1]=ChryssalidRunAndBurrowSelector)

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;; +Behaviors=(BehaviorName="Chryssalid::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=ChryssalidRoot)
;; +Behaviors=(BehaviorName=ChryssalidCocoonBranch, NodeType=Sequence, Child[0]=IsChryssalidCocoon, Child[1]=CocoonRoot)
;; +Behaviors=(BehaviorName=IsChryssalidCocoon, NodeType=Selector, Child[0]=TemplateNameIs-ChryssalidCocoon, Child[1]=TemplateNameIs-ChryssalidCocoonHuman)
;; +Behaviors=(BehaviorName=ChryssalidScamperRoot, NodeType=Selector, Child[0]=MoveMeleeFANATICUnsafe, Child[1]=MoveNoCoverUnsafe, Child[2]=MoveRandomNoCoverUnsafe)
;; +Behaviors=(BehaviorName=ChryssalidRoot, NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=ChryssalidRedAlert, Child[2]=GenericGreenMovement, Child[3]=ChryssalidHeatSeekProtocol, Child[4]=SelectUnsafeMove_JobOrMelee)
;; +Behaviors=(BehaviorName=ChryssalidRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ChryssalidRedAbilitySelector)
;; +Behaviors=(BehaviorName=ChryssalidRedAbilitySelector, NodeType=Selector, Child[0]=ChryssalidMimicBeaconBehavior, Child[1]=TryUnBurrow, Child[2]=ChryssalidRedFirstAction, Child[3]=ChryssalidRedLastAction)
;; +Behaviors=(BehaviorName=ChryssalidMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=70)
;; +Behaviors=(BehaviorName=ChryssalidRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChryssalidFirstActionSelector);
;; +Behaviors=(BehaviorName=ChryssalidFirstActionSelector, NodeType=Selector,    Child[0]=TryMeleeDashOnCivilian,    Child[1]=TryStandardMeleeDashFANATICUnsafe,   Child[2]=HuntEnemySeeNoOne)
;; +Behaviors=(BehaviorName=ChryssalidRedLastAction, NodeType=Selector,    Child[0]=TryStandardMeleeFANATICUnsafe,   Child[1]=MoveMeleeFANATICUnsafe,   Child[2]=HuntEnemySeeNoOne)
;; +Behaviors=(BehaviorName=TryMeleeDashOnCivilian, NodeType=Sequence, Child[0]=HasRevealed, Child[1]=CivilianTargetChanceCheck, Child[2]=TryStandardMeleeDashFANATICUnsafe)
;; +Behaviors=(BehaviorName=CivilianTargetChanceCheck, NodeType=Selector, Child[0]=ChryssalidPercentageMissionTerror, Child[1]=ChryssalidPercentageMissionOther)
;; +Behaviors=(BehaviorName=ChryssalidPercentageMissionTerror, NodeType=Sequence, Child[0]=IsMissionOfType-Terror, Child[1]=Rand15AttackCivilian)
;; +Behaviors=(BehaviorName=Rand15AttackCivilian, NodeType=RandFilter, Child[0]=MeleeAttackRandomCivilian, Param[0]=15)
;; +Behaviors=(BehaviorName=ChryssalidPercentageMissionOther, NodeType=Sequence, Child[0]=NotTerrorMission, Child[1]=Rand30AttackCivilian)
;; +Behaviors=(BehaviorName=Rand30AttackCivilian, NodeType=RandFilter, Child[0]=MeleeAttackRandomCivilian, Param[0]=30)
;; +Behaviors=(BehaviorName=MeleeAttackRandomCivilian, NodeType=Sequence, Child[0]=SetCiviliansAsEnemiesInMoveCalculation, Child[1]=SelectRandomCivilianInRange, Child[2]=SelectAbility-StandardMelee)
;; +Behaviors=(BehaviorName=SelectRandomCivilianInRange, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectRandomCivilianForStandardMelee, Child[2]=HasValidTarget-StandardMelee)
;; +Behaviors=(BehaviorName=SelectRandomCivilianForStandardMelee, NodeType=RepeatUntilFail, Child[0]=EvaluateMeleeTargetForTargetCivilian)
;; +Behaviors=(BehaviorName=EvaluateMeleeTargetForTargetCivilian, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreChryssalidCivilianIfInRange, Child[2]=UpdateBestTarget)
;; +Behaviors=(BehaviorName=TargetScoreChryssalidCivilianIfInRange, NodeType=Successor, Child[0]=ScoreChryssalidCivilianIfInRange)
;; +Behaviors=(BehaviorName=ScoreChryssalidCivilianIfInRange, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=TargetIsNotAlien, Child[2]=GenericScoreTargetRandomlySequence, Child[3]=AddToTargetScore_1000)
;; +Behaviors=(BehaviorName=ChryssalidHeatSeekProtocol, NodeType=Sequence, Child[0]=ChryssalidShouldTriggerHeatSeek, Child[1]=SelectHeatSeekMove)
;; +Behaviors=(BehaviorName=ChryssalidShouldTriggerHeatSeek, NodeType=Selector, Child[0]=NoVisibleEnemies, Child[1]=NotGreenAlert)
;; +Behaviors=(BehaviorName=NotGreenAlert, NodeType=StatCondition, Param[0]=eStat_AlertLevel, Param[1]=">", Param[2]="0")
;; +Behaviors=(BehaviorName=NotTerrorMission, NodeType=Inverter, Child[0]=IsMissionOfType-Terror)
;; +Behaviors=(BehaviorName=ChryssalidGreenAbilitySelector, NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; GATEKEEPER
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=FindPotentialAoETargets-AnimaInversionCorpseProfile, NodeType=Action)
-Behaviors=(BehaviorName=FindPotentialAoETargets-AnimaInversionMixedProfile, NodeType=Action)

-Behaviors=(BehaviorName=SelectAoETarget-AnimaInversionCorpseProfile, NodeType=Action)
-Behaviors=(BehaviorName=SelectAoETarget-AnimaInversionMixedProfile, NodeType=Action)

-Behaviors=(BehaviorName=TryMoveThenAnimaInversionCorpse, NodeType=Selector, Child[0]=TryMoveForAnimaInversionCorpse, Child[1]=TryAnimaInversionCorpses)
-Behaviors=(BehaviorName=TryMoveForAnimaInversionCorpse, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-AnimaInversion, Child[2]=FindPotentialAoETargets-AnimaInversionCorpseProfile, Child[3]=MoveStandardIfFirstAbility-AnimaInversion)
-Behaviors=(BehaviorName=TryAnimaInversionCorpses, NodeType=Selector, Child[0]=TryAnimaInversionCorpseActivate, Child[1]=TryGatekeeperOpenIfAnimaInversionCorpseReady) 
-Behaviors=(BehaviorName=TryAnimaInversionCorpseActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionCorpseProfile, Child[2]=SelectAoETarget-AnimaInversionCorpseProfile,  Child[3]=SelectAbility-AnimaInversion)
-Behaviors=(BehaviorName=TryGatekeeperOpenIfAnimaInversionCorpseReady, NodeType=Sequence, Child[0]=IsAbilityReady-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionCorpseProfile, Child[2]=SelectAoETarget-AnimaInversionCorpseProfile, Child[3]=TryGatekeeperOpen)

-Behaviors=(BehaviorName=TryMoveThenAnimaInversionMixed, NodeType=Selector, Child[0]=TryMoveForAnimaInversionMixed, Child[1]=TryAnimaInversionMixed)
-Behaviors=(BehaviorName=TryMoveForAnimaInversionMixed, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-AnimaInversion, Child[2]=FindPotentialAoETargets-AnimaInversionMixedProfile, Child[3]=MoveStandardIfFirstAbility-AnimaInversion)
-Behaviors=(BehaviorName=TryAnimaInversionMixed, NodeType=Selector, Child[0]=TryAnimaInversionMixedActivate, Child[1]=TryGatekeeperOpenIfAnimaInversionMixedReady) 
-Behaviors=(BehaviorName=TryAnimaInversionMixedActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionMixedProfile, Child[2]=SelectAoETarget-AnimaInversionMixedProfile,  Child[3]=SelectAbility-AnimaInversion)
-Behaviors=(BehaviorName=TryGatekeeperOpenIfAnimaInversionMixedReady, NodeType=Sequence, Child[0]=IsAbilityReady-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionMixedProfile, Child[2]=SelectAoETarget-AnimaInversionMixedProfile, Child[3]=TryGatekeeperOpen)

-Behaviors=(BehaviorName=TryAnimaConsumeOnEnemy, NodeType=Sequence, Child[0]=HasWounds, Child[1]=IsAbilityReady-AnimaConsume, Child[2]=AnimaConsumeStepSelectorEnemy)
-Behaviors=(BehaviorName=AnimaConsumeStepSelectorEnemy, NodeType=Selector, Child[0]=AnimaConsumeAttackEnemy, Child[1]=AnimaConsumeAttackEnemyUnopened, Child[2]=MoveMeleeIfFirstAbilityFANATIC)

-Behaviors=(BehaviorName=GateKeeperShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaGate, Child[1]=SetTargetStack-AnimaGate, Child[2]=SelectTargetForStandardShot, Child[3]=GatekeeperTryShootOrOpen)
-Behaviors=(BehaviorName=GatekeeperTryShootOrOpen, NodeType=Selector, Child[0]=GatekeeperShootIfTarget, Child[1]=TryGatekeeperOpen)
-Behaviors=(BehaviorName=GatekeeperShootIfTarget, NodeType=Sequence, Child[0]=HasValidTarget-AnimaGate, Child[1]=SelectAbility-AnimaGate)

-Behaviors=(BehaviorName=GateKeeperNoEnemySightedMove, NodeType=Selector, Child[0]=TryAnimaInversionCorpses, Child[1]=TryAnimaInversionMixed, Child[2]=TryGatekeeperClose, Child[3]=GenericAlertHandler, Child[4]=GenericGreenMovement)

-Behaviors=(BehaviorName=GateKeeperOpenOrClose, NodeType=Selector, Child[0]=CloseIfInObviousDanger, Child[1]=DoIfFlankedMove, Child[2]=GateKeeperCheckOpen)
-Behaviors=(BehaviorName=CloseIfInObviousDanger, NodeType=Sequence, Child[0]=IsAbilityAvailable-GatekeeperClose, Child[1]=CheckIfInDanger, Child[2]=TryGatekeeperClose)
-Behaviors=(BehaviorName=GateKeeperCheckOpen, NodeType=Sequence, Child[0]=IsAbilityAvailable-GatekeeperOpen, Child[1]=NoTargetsAvailable, Child[2]=TryGatekeeperOpen)

-Behaviors=(BehaviorName=IsOrCanOpen, NodeType=Selector, Child[0]=IsAbilityAvailable-GatekeeperOpen, Child[1]=AffectedByEffect-GatekeeperClosedEffect)
-Behaviors=(BehaviorName="Gatekeeper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=GateKeeperRedAlert, Child[3]=GateKeeperNoEnemySightedMove)

-Behaviors=(BehaviorName=GateKeeperRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryMoveThenAnimaInversionCorpse, \\
    Child[1]=TryMoveThenAnimaInversionMixed, \\
    Child[2]=TryAnimaConsumeOnEnemy, \\
    Child[3]=TryAnimaConsumeOnAlly, \\
    Child[4]=MoveNoCover, \\
    Child[5]=ShootIfAvailable, \\
    Child[6]=HuntEnemy)

-Behaviors=(BehaviorName=GateKeeperRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryAnimaInversionCorpses, \\
    Child[1]=TryAnimaInversionMixed, \\
    Child[2]=TryAnimaConsumeOnEnemy, \\
    Child[3]=TryAnimaConsumeOnAlly, \\
    Child[4]=GateKeeperOpenOrClose, \\
    Child[5]=TryShootOrReloadOrOverwatch, \\
    Child[6]=MoveNoCover, \\
    Child[7]=HuntEnemy)

-Behaviors=(BehaviorName=GateKeeperRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=GateKeeperRedFirstAction, Child[2]=GateKeeperRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=GateKeeperRedAbilitySelector, NodeType=Selector, Child[0]=GateKeeperRedFirstAction, Child[1]=GateKeeperRedSecondAction, Child[2]=GateKeeperRedLastAction); Immune to Mimics

+Behaviors=(BehaviorName="Gatekeeper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GateKeeperRedAlert, Child[2]=GenericAlertHandler, Child[3]=GenericGreenMovement, Child[4]=TryOverwatch)

+Behaviors=(BehaviorName=GatekeeperIsClosed, NodeType=Selector, Child[0]=IsAbilityAvailable-GatekeeperOpen, Child[1]=AffectedByEffect-GatekeeperClosedEffect)
+Behaviors=(BehaviorName=GatekeeperIsOpened, NodeType=Inverter, Child[0]=GatekeeperIsClosed)

+Behaviors=(BehaviorName=FindPotentialAoETargets-AnimaInversionFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-AnimaInversionManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-AnimaInversionAnyEnemyProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-AnimaInversionFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-AnimaInversionManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-AnimaInversionAnyEnemyProfile, NodeType=Action)

; This will fail if not opened.
+Behaviors=(BehaviorName=TryAnimaInversionFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionFewProfile, Child[2]=SelectAoETarget-AnimaInversionFewProfile,  Child[3]=SelectAbility-AnimaInversion)
+Behaviors=(BehaviorName=TryAnimaInversionMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionManyProfile, Child[2]=SelectAoETarget-AnimaInversionManyProfile,  Child[3]=SelectAbility-AnimaInversion)
+Behaviors=(BehaviorName=TryAnimaSingleAnyEnemy, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaInversion, Child[1]=FindPotentialAoETargets-AnimaInversionAnyEnemyProfile, Child[2]=SelectAoETarget-AnimaInversionAnyEnemyProfile,  Child[3]=SelectAbility-AnimaInversion)

; New Anima Consume only for enemies. Will fail if not opened.
+Behaviors=(BehaviorName=TryAnimaConsumeDamaged, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=IsAbilityReady-AnimaConsume, Child[2]=AnimaConsumeAttackOrMoveIn)
+Behaviors=(BehaviorName=AnimaConsumeAttackOrMoveIn, NodeType=Selector, Child[0]=StandardMeleeAttack, Child[1]=MoveMeleeIfFirstAbilityFANATIC)
; Anima Consume even if Gatekeeper is full. Will fail if not opened.
+Behaviors=(BehaviorName=TryAnimaConsumeFullHP, NodeType=Sequence, Child[0]=IsAbilityReady-AnimaConsume, Child[1]=AnimaConsumeFullFilter)
+Behaviors=(BehaviorName=AnimaConsumeFullFilter, NodeType=RandFilter, Child[0]=AnimaConsumeAttackOrMoveIn, Param[0]=33)
+Behaviors=(BehaviorName=TryAnimaConsumeAnyEnemy, NodeType=Sequence, Child[0]=IsAbilityReady-AnimaConsume, Child[1]=AnimaConsumeAttackOrMoveIn)

; Will fail unless closed. Uses the reconstructed weapon i made for range fixes.
+Behaviors=(BehaviorName=TryGatekeeperShootOrReloadOrOverwatch, NodeType=Sequence, Child[0]=GatekeeperIsClosed, Child[1]=GatekeeperShootOrReloadOrOverwatch)
+Behaviors=(BehaviorName=GatekeeperShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=TryShootOrReloadOrOverwatch, Child[1]=GatekeeperTryShoot)
+Behaviors=(BehaviorName=GatekeeperTryShoot, NodeType=Sequence, Child[0]=IsAbilityAvailable-AnimaGate, Child[1]=SetTargetStack-AnimaGate, Child[2]=SelectTargetForStandardShot, Child[3]=HasValidTarget-AnimaGate, Child[4]=SelectAbility-AnimaGate)

; Close or open at random. Dont check for HP, otherwise you will never be able to Anima Consume back to high HP. 50% to open or close, 50% to stay the same.
+Behaviors=(BehaviorName=TryGatekeeperOpenOrClose, NodeType=Selector, Child[0]=TryToCloseIfOpened, Child[1]=TryToOpenIfClosed)

+Behaviors=(BehaviorName=TryToCloseIfOpened, NodeType=Sequence, Child[0]=DontOpenCloseIfAlreadyDoneThisTurn, Child[1]=GatekeeperIsOpened, Child[2]=AnyLivingEnemyVisible, Child[3]=RandGatekeeperClose)
+Behaviors=(BehaviorName=RandGatekeeperClose, NodeType=RandFilter, Child[0]=TryGatekeeperClose, Param[0]=50)

+Behaviors=(BehaviorName=TryToOpenIfClosed, NodeType=Sequence, Child[0]=TryToOpenIfAnyPsiPowerAvailable, Child[1]=GatekeeperIsClosed, Child[2]=AnyLivingEnemyVisible, Child[3]=RandGatekeeperOpen)
+Behaviors=(BehaviorName=RandGatekeeperOpen, NodeType=RandFilter, Child[0]=TryGatekeeperOpen, Param[0]=50)

+Behaviors=(BehaviorName=TryGatekeeperShootingSometimes, NodeType=RandFilter, Child[0]=GatekeeperShootOrReloadOrOverwatch, Param[0]=15)

-Behaviors=(BehaviorName=GateKeeperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=GateKeeperRedFirstActionSelector)
+Behaviors=(BehaviorName=GateKeeperRedFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=GateKeeperRedFirstActionSelector)

+Behaviors=(BehaviorName=GateKeeperRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryGatekeeperOpenIfEnemiesSeen, \\
    Child[1]=StandardMeleeAttack, \\
    Child[2]=TryAnimaConsumeDamaged, \\
    Child[3]=TryAnimaInversionMany, \\
    Child[4]=TryAnimaInversionFew, \\
    Child[5]=HuntEnemySeeNoOne, \\
    Child[6]=MoveNoCoverUnsafe, \\
    Child[7]=MoveRandomUnsafe)

+Behaviors=(BehaviorName=GateKeeperRedSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=GateKeeperRedSecondActionSelector)
+Behaviors=(BehaviorName=GateKeeperRedSecondActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
    Child[1]=TryAnimaConsumeDamaged, \\
    Child[2]=TryAnimaInversionMany, \\
    Child[3]=TryAnimaInversionFew, \\
    Child[4]=TryGatekeeperClose, \\
    Child[5]=NeedsReload, \\
    Child[6]=TryGatekeeperRandMoveNoCoverUnsafe, \\
    Child[7]=TryGatekeeperShootOrReloadOrOverwatch, \\
    Child[8]=HuntEnemySeeNoOne, \\
    Child[9]=MoveNoCoverUnsafe, \\
    Child[10]=MoveRandomUnsafe)

+Behaviors=(BehaviorName=GateKeeperRedLastActionSelector, NodeType=Selector, \\
    Child[0]=StandardMeleeAttack, \\
    Child[1]=TryAnimaConsumeDamaged, \\
    Child[2]=TryAnimaInversionMany, \\
    Child[3]=TryAnimaInversionFew, \\
    Child[4]=TryGatekeeperClose, \\
    Child[5]=TryGatekeeperShootOrReloadOrOverwatch, \\
    Child[6]=HuntEnemySeeNoOne, \\
    Child[7]=MoveNoCoverUnsafe, \\
    Child[8]=MoveRandomUnsafe)

+Behaviors=(BehaviorName=TryGatekeeperRandMoveNoCoverUnsafe, NodeType=RandFilter, Child[0]=MoveNoCoverUnsafe, Param[0]=50)
+Behaviors=(BehaviorName=TryGatekeeperOpenIfEnemiesSeen, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=HasRevealed, Child[2]=TryGatekeeperOpen)
+Behaviors=(BehaviorName=MoveRandomNoCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=FindRestrictedDestination-MWP_RandomNoCover, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DontOpenCloseIfAlreadyDoneThisTurn, NodeType=Inverter, Child[0]=SkipOpenCloseCondition)
+Behaviors=(BehaviorName=SkipOpenCloseCondition, NodeType=Selector, Child[0]=WasLastAbility-GatekeeperOpen, Child[1]=WasLastAbility-GatekeeperClose)
+Behaviors=(BehaviorName=WasLastAbility-GatekeeperOpen, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-GatekeeperClose, NodeType=Condition)
+Behaviors=(BehaviorName=MoveNoCoverIfClosed, NodeType=Sequence, Child[0]=GatekeeperIsClosed, Child[1]=MoveNoCover)

+Behaviors=(BehaviorName=TryToOpenIfAnyPsiPowerAvailable, NodeType=Selector, Child[0]=IsAbilityReady-AnimaConsume, Child[1]=IsAbilityAvailable-AnimaInversion)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; FACELESS
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsProfile, NodeType=Action)
-Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsPrefTargetProfile, NodeType=Action)

-Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsProfile, NodeType=Action)
-Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsPrefTargetProfile, NodeType=Action)

-Behaviors=(BehaviorName=TryScythingClaws, NodeType=Sequence, Child[0]=IsAbilityAvailable-ScythingClaws, Child[1]=SelectTargetForScythingClaws, Child[2]=SelectAbility-ScythingClaws)
-Behaviors=(BehaviorName=SelectTargetForScythingClaws, NodeType=Selector, Child[0]=ScythingClaws_HitIdealTarget, Child[1]=ScythingClaws_AnyTargetWillDo)

-Behaviors=(BehaviorName=ScythingClaws_HitIdealTarget, NodeType=Sequence, Child[0]=SelectPotentialMeleeTarget, Child[1]=FindPotentialAoETargets-ScythingClawsPrefTargetProfile, Child[2]=SelectAoETarget-ScythingClawsPrefTargetProfile)
-Behaviors=(BehaviorName=ScythingClaws_AnyTargetWillDo, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsProfile, Child[1]=SelectAoETarget-ScythingClawsProfile)

; Faceless will no longer move in Civilian mode. This is realistic, and also provides a way to detect them if you are smart.
-Behaviors=(BehaviorName=FacelessCivRoot, NodeType=Selector, Child[0]=FacelessCivCheckTerror)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=FacelessCivRoot, NodeType=Selector, Child[0]=SkipMove)

+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsBestProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsGoodProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsOKProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsBadProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsVeryBadProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsAbysmalProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsCivilianProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsCivilianFFProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsTheLostProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ScythingClawsTheLostFFProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsBestProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsGoodProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsOKProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsBadProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsVeryBadProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsAbysmalProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsCivilianProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsCivilianFFProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsTheLostProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ScythingClawsTheLostFFProfile, NodeType=Action)

+Behaviors=(BehaviorName=TryScythingClaws, NodeType=Sequence, Child[0]=IsAbilityAvailable-ScythingClaws, Child[1]=ScythingClawsProfileSelector, Child[2]=SelectAbility-ScythingClaws)
+Behaviors=(BehaviorName=ScythingClawsProfileSelector, NodeType=Selector, Child[0]=ScythingClawsBestProfile, Child[1]=ScythingClawsGoodProfile, Child[2]=ScythingClawsOKProfile, Child[3]=ScythingClawsBadProfile, Child[4]=ScythingClawsVeryBadProfile, Child[5]=ScythingClawsAbysmalProfile, Child[6]=ScythingClawsTheLostProfile, Child[7]=ScythingClawsCivilianProfile, Child[8]=ScythingClawsTheLostFFProfile, Child[9]=ScythingClawsCivilianFFProfile)
+Behaviors=(BehaviorName=ScythingClawsBestProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsBestProfile, Child[1]=SelectAoETarget-ScythingClawsBestProfile)
+Behaviors=(BehaviorName=ScythingClawsGoodProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsGoodProfile, Child[1]=SelectAoETarget-ScythingClawsGoodProfile)
+Behaviors=(BehaviorName=ScythingClawsOKProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsOKProfile, Child[1]=SelectAoETarget-ScythingClawsOKProfile)
+Behaviors=(BehaviorName=ScythingClawsBadProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsBadProfile, Child[1]=SelectAoETarget-ScythingClawsBadProfile)
+Behaviors=(BehaviorName=ScythingClawsVeryBadProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsVeryBadProfile, Child[1]=SelectAoETarget-ScythingClawsVeryBadProfile)
+Behaviors=(BehaviorName=ScythingClawsAbysmalProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsAbysmalProfile, Child[1]=SelectAoETarget-ScythingClawsAbysmalProfile)
+Behaviors=(BehaviorName=ScythingClawsCivilianProfile, NodeType=Sequence, Child[0]=FacelessEitherRevealedOrDamaged, Child[1]=FindPotentialAoETargets-ScythingClawsCivilianProfile, Child[2]=SelectAoETarget-ScythingClawsCivilianProfile)
+Behaviors=(BehaviorName=ScythingClawsCivilianFFProfile, NodeType=Sequence, Child[0]=FacelessEitherRevealedOrDamaged, Child[1]=FindPotentialAoETargets-ScythingClawsCivilianFFProfile, Child[2]=SelectAoETarget-ScythingClawsCivilianFFProfile)
+Behaviors=(BehaviorName=ScythingClawsTheLostProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsTheLostProfile, Child[1]=SelectAoETarget-ScythingClawsTheLostProfile)
+Behaviors=(BehaviorName=ScythingClawsTheLostFFProfile, NodeType=Sequence, Child[0]=FindPotentialAoETargets-ScythingClawsTheLostFFProfile, Child[1]=SelectAoETarget-ScythingClawsTheLostFFProfile)
+Behaviors=(BehaviorName=FacelessEitherRevealedOrDamaged, NodeType=Selector, Child[0]=HasWounds, Child[1]=HasRevealed)

; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; AVATAR
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; **************************************************************************************************************************************************************************************************
; Garbage out.
-Behaviors=(BehaviorName=TryDimensionalRift, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiDimensionalRiftStage1, Child[1]=FindPotentialAoETargets-PsiRiftProfile, Child[2]=SelectAoETarget-PsiRiftProfile, Child[3]=SelectAbility-PsiDimensionalRiftStage1)
-Behaviors=(BehaviorName=TryMoveThenDimensionalRift, NodeType=Selector, Child[0]=TryMoveForDimensionalRift, Child[1]=TryDimensionalRift)
-Behaviors=(BehaviorName=TryMoveForDimensionalRift, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-PsiDimensionalRiftStage1, Child[2]=FindPotentialAoETargets-PsiRiftProfile, Child[3]=MoveStandardIfFirstAbility-PsiDimensionalRiftStage1)

-Behaviors=(BehaviorName=FindPotentialAoETargets-PsiRiftProfile, NodeType=Action)

-Behaviors=(BehaviorName=SelectAoETarget-PsiRiftProfile, NodeType=Action)

-Behaviors=(BehaviorName=PsiWitchAttackSequencer, NodeType=Selector, \\
    Child[0]=TryPsiMindControl, \\
    Child[1]=TryDimensionalRift, \\
    Child[2]=TryNullLance, \\
    Child[3]=TryShootOrReloadOrOverwatch)
   
-Behaviors=(BehaviorName=PsiWitchRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryMoveThenPsiMindControl, \\
    Child[1]=TryMoveThenDimensionalRift, \\
    Child[2]=TryMoveThenNullLance, \\
    Child[3]=DoIfFlankedMove, \\
    Child[4]=SelectMoveStandard, \\
    Child[5]=PsiWitchAttackSequencer, \\
    Child[6]=HuntEnemyWithCover, \\
    Child[7]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=PsiWitchRedLastActionSelector, NodeType=Selector, \\
    Child[0]=PsiWitchAttackSequencer, \\
    Child[1]=SelectMoveStandard, \\
    Child[2]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=PsiWitchRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PsiWitchRedFirstAction, Child[2]=PsiWitchRedLastAction)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=PsiWitchRedAbilitySelector, NodeType=Selector, Child[0]=AvatarMimicBeaconBehavior, Child[1]=PsiWitchRedFirstAction, Child[2]=PsiWitchRedLastAction)
+Behaviors=(BehaviorName=AvatarMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=10)

; New smart targeting.
+Behaviors=(BehaviorName=FindPotentialAoETargets-PsiRiftManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-PsiRiftFewProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-PsiRiftManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-PsiRiftFewProfile, NodeType=Action)
   
+Behaviors=(BehaviorName=TryDimensionalRiftMany,   NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiDimensionalRiftStage1, Child[1]=FindPotentialAoETargets-PsiRiftManyProfile, Child[2]=SelectAoETarget-PsiRiftManyProfile, Child[3]=SelectAbility-PsiDimensionalRiftStage1)
+Behaviors=(BehaviorName=TryDimensionalRiftFew,    NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiDimensionalRiftStage1, Child[1]=FindPotentialAoETargets-PsiRiftFewProfile, Child[2]=SelectAoETarget-PsiRiftFewProfile, Child[3]=SelectAbility-PsiDimensionalRiftStage1)

; New action selectors.
+Behaviors=(BehaviorName=PsiWitchRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=DoIfFlankedMove, \\
   Child[1]=TryPsiMindControlLoneTarget, \\
   Child[2]=TryDimensionalRiftMany, \\
   Child[3]=TryNullLance33, \\
   Child[4]=TryPsiMindControlSupported, \\
   Child[5]=FallBackWithLoS, \\
   Child[6]=FallBack, \\
   Child[7]=TryGrenade, \\
   Child[8]=TryDimensionalRiftFew, \\
   Child[9]=TryPsiMindControl, \\
   Child[10]=TryShootOrReload, \\
   Child[11]=ConsiderSuppression, \\
   Child[12]=TryTriggerSuperposition, \\
   Child[13]=HuntEnemyWithCoverSeeNoOne)

+Behaviors=(BehaviorName=PsiWitchRedLastActionSelector, NodeType=Selector, \\
   Child[0]=BOTEEmergencyBurnRemoval, \\
   Child[1]=TryPsiMindControlLoneTarget, \\
   Child[2]=TryDimensionalRiftMany, \\
   Child[3]=TryNullLance33, \\
   Child[4]=TryPsiMindControlSupported, \\
   Child[5]=TryGrenade, \\
   Child[6]=TryDimensionalRiftFew, \\
   Child[7]=TryPsiMindControl, \\
   Child[8]=TryShootOrReload, \\
   Child[9]=BOTETryHunkerToCleanseBurnSafe, \\
   Child[10]=TryTwoTurnAttackSupportIfSafe, \\
   Child[11]=HuntAloneFallbackSupported, \\
   Child[12]=TryOverwatch, \\
   Child[13]=TryTriggerSuperposition, \\
   Child[14]=HuntEnemyWithCoverSeeNoOne, \\
   Child[15]=BOTEDoCower)
   
+Behaviors=(BehaviorName=TryNullLance33, NodeType=RandFilter, Child[0]=TryNullLance, Param[0]=33)
+Behaviors=(BehaviorName=TryPsiMindControlSupported,   NodeType=Sequence, Child[0]=AvatarTwoOrMoveAlliesVisible, Child[1]=TryPsiMindControl)
+Behaviors=(BehaviorName=TryPsiMindControlLoneTarget,   NodeType=Sequence, Child[0]=AvatarOneEnemyVisible, Child[1]=TryPsiMindControl)
+Behaviors=(BehaviorName=HuntAloneFallbackSupported,   NodeType=Selector, Child[0]=AvatarHuntEnemyIfAlone, Child[1]=AvatarFallbackIfSupported)
+Behaviors=(BehaviorName=AvatarHuntEnemyIfAlone,   NodeType=Sequence, Child[0]=NoAlliesVisible, Child[1]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AvatarFallbackIfSupported,   NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=FallBackWithLoS)
+Behaviors=(BehaviorName=AvatarOneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
+Behaviors=(BehaviorName=AvatarTwoOrMoveAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=1)

;*****************************************************************************************************************************************************************************************************
; SHADOWBIND UNIT
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="Shadowbind::CharacterRoot", NodeType=Selector,    \\
    Child[0]=MimicBeaconBehavior, \\
    Child[1]=GenericAbilityRoot, \\
    Child[2]=TryMoveThenGrenade, \\
    Child[3]=DoIfFlankedMove, \\
    Child[4]=SnipeIfAvailable, \\
    Child[5]=ShootIfIdeal, \\
    Child[6]=NeedsReload, \\
    Child[7]=MoveTowardsNearestEnemy, \\
    Child[8]=TryShootOrReloadOrOverwatch, \\
    Child[9]=TryOverwatch, \\
    Child[10]=HuntEnemyWithCover, \\
    Child[11]=HuntEnemy )

+Behaviors=(BehaviorName="Shadowbind::CharacterRoot", NodeType=Selector, \\
    Child[0]=MimicBeaconBehavior, \\
    Child[1]=TryShadowboundMelee33, \\
    Child[2]=SBDoIfFlankedMoveFirstAction, \\
    Child[3]=StandardMeleeAttack, \\
    Child[4]=TryShadowboundGrenadeMany, \\
    Child[5]=NeedsReload, \\
    Child[6]=ALIENPunishFlankedEnemyLastAction, \\
    Child[7]=GenericAbilityRoot, \\
    Child[8]=SnipeIfAvailable, \\
    Child[9]=ShootIfIdeal, \\
    Child[10]=MoveStandardIfFirstAbility, \\
    Child[11]=TryShadowboundSuppression, \\
    Child[12]=TryTwoTurnAttackSupportIfSafe, \\
    Child[13]=TryShootOrReloadOrOverwatch, \\
    Child[14]=TryShadowboundGrenadeSingle, \\
    Child[15]=TryQuickDraw, \\
    Child[16]=TrySBOverwatchSometimes, \\
    Child[17]=HuntEnemyWithCoverSeeNoOne, \\
    Child[18]=TryOverwatch, \\
    Child[19]=BOTEDoCower)

+Behaviors=(BehaviorName=TryShadowboundMelee33, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=33)
+Behaviors=(BehaviorName=TrySBOverwatchSometimes, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=25)

+Behaviors=(BehaviorName=SBDoIfFlankedMoveFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=DoIfFlankedMove)
+Behaviors=(BehaviorName=TryShadowboundGrenadeMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-ShadowboundGrenadeManyProfile, Child[2]=SelectAoETarget-ShadowboundGrenadeManyProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryShadowboundGrenadeSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-ShadowboundGrenadeSingleProfile, Child[2]=SelectAoETarget-ShadowboundGrenadeSingleProfile, Child[3]=SelectAbility-ThrowGrenade)

+Behaviors=(BehaviorName=FindPotentialAoETargets-ShadowboundGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ShadowboundGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ShadowboundGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ShadowboundGrenadeManyProfile, NodeType=Action)

+Behaviors=(BehaviorName=TryShadowboundSuppression, NodeType=Selector, Child[0]=TryShadowboundSuppressionSupported, Child[1]=TryShadowboundSuppressClosest)
+Behaviors=(BehaviorName=TryShadowboundSuppressClosest, NodeType=Sequence, Child[0]=ShadowboundSuppressionCondition, Child[1]=ShadowboundDoSuppression)
+Behaviors=(BehaviorName=ShadowboundDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=ShadowboundSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=ShadowboundOneOrMoreOverwatchingTeammates)
+Behaviors=(BehaviorName=ShadowboundOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryShadowboundSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=ShadowboundRandomSuppression)
+Behaviors=(BehaviorName=ShadowboundRandomSuppression, NodeType=RandFilter, Child[0]=ShadowboundDoSuppression, Param[0]=20)

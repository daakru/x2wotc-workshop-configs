[XComGame.XGAIPlayer]
; This is essential to Chryssalids, but also to general AI.
-LastResortTargetEffects=(EffectName="Panicked")
-LastResortTargetEffects=(EffectName="Berserk")
-LastResortTargetEffects=(EffectName="Obsessed")
-LastResortTargetEffects=(EffectName="Shattered")
-LastResortTargetEffects=(EffectName="Stunned")
-LastResortTargetEffects=(EffectName="Dazed")

[XComGame.XGAIBehavior]
+AoEProfiles=( Profile=ChosenGrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnObjectiveFire=false, bFailOnFriendlyFire=1, MinTargets=2)
-AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=1, MinTargets=1, bTestTargetEffectsApply=true)
-AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=3, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true)
-m_arrMoveWeightProfile=(Profile=MWP_RandomCover, fCoverWeight=0.5f, fRandWeight=5.0)
+m_arrMoveWeightProfile=(Profile=MWP_RandomCover, fCoverWeight=2.0f, fRandWeight=5.0, fHeightWeight=2.0f)
+m_arrMoveWeightProfile=(Profile=MWP_GrappleFar, fCoverWeight=1.0f, fDistanceWeight=3.0f, fFlankingWeight=0.3f, fHeightWeight=1.0f, fCloseModifier=0.8f, fFarModifier=1.2f, MinimumTileDist=10.0f)
+m_arrMoveWeightProfile=(Profile=MWP_GrappleClose, fCoverWeight=1.0f, fDistanceWeight=0.5f, fFlankingWeight=0.1f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=0.5f, fHeightWeight=0.5f, fCloseModifier=1.0f, fFarModifier=1.0f)

[XComGame.X2AIBTBehaviorTree]
-EquivalentAbilities=( KeyName=Overwatch, EquivalentAbilityName[0]=SniperRifleOverwatch )
+EquivalentAbilities=( KeyName=Overwatch, EquivalentAbilityName[0]=SniperRifleOverwatch, EquivalentAbilityName[1]=Longwatch )
+EquivalentAbilities=( KeyName=SniperRifleOverwatch, EquivalentAbilityName[0]=Longwatch )
+Behaviors=(BehaviorName=FindPotentialAoETargets-ChosenGrenadeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ChosenGrenadeProfile, NodeType=Action)

; Try the regular options first.
-Behaviors=(BehaviorName=MoveTowardsNearestEnemy, NodeType=Selector, Child[0]=HeatSeekWhenNoEnemiesVisible, Child[1]=MoveFlankingIfFirstAbilityUnsafe, Child[2]=MoveAdvanceToCoverUnsafe, Child[3]=HeatSeekToCover)
+Behaviors=(BehaviorName=MoveTowardsNearestEnemy, NodeType=Selector, Child[0]=MoveFlankingIfFirstAbilityUnsafe, Child[1]=MoveAdvanceToCoverUnsafe, Child[2]=HeatSeekWhenNoEnemiesVisible, Child[3]=HeatSeekToCover)

; Fix for Overwatch using Pistol Watch
+Behaviors=(BehaviorName=SelectAbility-Longwatch, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-Longwatch, NodeType=Condition)

+Behaviors=(BehaviorName=ChosenOverwatch, NodeType=Selector, Child[0]=TryLongwatch, Child[1]=TryMainwatch, Child[2]=TryHandgunwatch)
+Behaviors=(BehaviorName=TryMainwatch, NodeType=Sequence, Child[0]=IsAbilityAvailable-Overwatch, Child[1]=SelectAbility-Overwatch)
+Behaviors=(BehaviorName=TryLongwatch, NodeType=Sequence, Child[0]=IsAbilityAvailable-Longwatch, Child[1]=SelectAbility-Longwatch)
+Behaviors=(BehaviorName=TryHandgunwatch, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolOverwatch, Child[1]=SelectAbility-PistolOverwatch)

; IMPORTANT : The Assassin is NOT considered engaged until she has SHOWN HERSELF to XCOM, so if she is vanished and fighting and never revealed, she is NOT considered ENGAGED.
; She needs to deliver her speech to be engaged, and that only happens if you see her.
+Behaviors=(BehaviorName=TryChosenSummonEngaged, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=NotAffectedByVanishingWind, Child[2]=NotFlanked, Child[3]=TryChosenSummon)
+Behaviors=(BehaviorName=ChosenIsNotEngaged, NodeType=Inverter, Child[0]=ChosenIsEngaged)
+Behaviors=(BehaviorName=AdvanceCoverDisableGreenAlert, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=IsAbilityAvailable-StandardMove, Child[2]=FindDestination-MWP_AdvanceCover, Child[3]=DisableGreenAlertMovement, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=FindRestrictedDestination-MWP_GrappleFar, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-MWP_GrappleClose, NodeType=Action)

; SHARED
-Behaviors=(BehaviorName=DoVanishingWindScamper, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind_Scamper, Child[1]=SelectAbility-VanishingWind_Scamper, Child[2]=SSSetAssassinCycle1IfUnset)
+Behaviors=(BehaviorName=DoVanishingWindScamper, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind_Scamper, Child[1]=SelectAbility-VanishingWind_Scamper)
+Behaviors=(BehaviorName=ChosenSelectHeatSeekMove, NodeType=Selector, Child[0]=ChosenSelectHeatSeekMoveHighCover, Child[1]=ChosenSelectHeatSeekMoveRegular)
+Behaviors=(BehaviorName=ChosenSelectHeatSeekMoveHighCover, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ChosenIsNotEngaged, Child[2]=RestrictToHighCover, Child[3]=RestrictToUnflanked, Child[4]=HeatSeekNearestUnconcealed, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ChosenSelectHeatSeekMoveRegular, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ChosenIsNotEngaged, Child[2]=RestrictToUnflanked, Child[3]=HeatSeekNearestUnconcealed, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ChosenPunishFlanked, NodeType=Sequence, Child[0]=NotJustSpawnedThisTurn, Child[1]=IsAbilityAvailable-StandardShot, Child[2]=SelectFlankedEnemyTarget, Child[3]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=ChosenPunishFlankedNotFlanked, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=NotJustSpawnedThisTurn, Child[2]=ChosenPunishFlanked)
-Behaviors=(BehaviorName=EvaluateTargetFavorableNonCivilianOrVIP, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChanceFavorable, Child[2]=TargetScoreHealth, Child[3]=ApplyDifficultyModifiers, Child[4]=SSScoreTargetOutIfCivilian, Child[5]=SSScoreTargetOutIfEnemyVIP, Child[6]="TargetScoreByScaledDistance-1+10", Child[7]=AvoidBoundAndPanickedTargets, Child[8]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluateTargetFavorableNonCivilianOrVIP, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChanceFavorable, Child[2]=TargetScoreHealth, Child[3]=ApplyDifficultyModifiers, Child[4]=SSScoreTargetOutIfCivilian, Child[5]=SSScoreTargetOutIfEnemyVIP, Child[6]="TargetScoreByScaledDistance-1+10", Child[7]=TargetScoreMarked, Child[8]=TargetScoreHighestSoldierRank, Child[9]=TargetScoreTeamVisibility, Child[10]=UpdateBestTarget)

; PUNISH FLANKED ENEMIES FROM SAFETY
+Behaviors=(BehaviorName=ChosenPunishFlankedEnemy, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-StandardShot, Child[2]=WOTC_SelectFlankedEnemyTarget, Child[3]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=WOTC_SelectFlankedEnemyTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=WOTC_EvaluateFlankedEnemyTargets, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=WOTC_EvaluateFlankedEnemyTargets, NodeType=RepeatUntilFail, Child[0]=WOTC_EvaluateFlankedEnemies)
+Behaviors=(BehaviorName=WOTC_EvaluateFlankedEnemies, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=WOTC_SSScoreFlankedEnemy, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=WOTC_SSScoreFlankedEnemy, NodeType=Successor, Child[0]=WOTC_ScoreFlankedEnemy)
+Behaviors=(BehaviorName=WOTC_ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=GenericTargetEvaluations)

+Behaviors=(BehaviorName=ChosenHuntEnemyWithCoverUnsafe, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=SetAlertDataStack, Child[2]=GenericSelectBestAlert, Child[3]=HasValidAlertDataLocation, Child[4]=AlertDataMovementUseCover, Child[5]=MoveStandardWithDestination)

-Behaviors=(BehaviorName=ChosenGeneric, NodeType=Selector, \\
	Child[0]=GenericAbilityRoot, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=TryMoveThenGrenade, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=ChosenGeneric, NodeType=Selector, \\
	Child[0]=SkipMove)
+Behaviors=(BehaviorName=MimicBeaconBehaviorSometimes, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=15)
; Either active or engaged. Anything with combat capability.
+Behaviors=(BehaviorName=ChosenIsEnabled, NodeType=StatCondition, Param[0]=UnitValue-ChosenActivatedStateUnitValue, Param[1]=">", Param[2]=0)

+Behaviors=(BehaviorName=IsNotLastAIUnit, NodeType=Inverter, Child[0]=IsLastAIUnit)

+Behaviors=(BehaviorName=AmIAChosen, NodeType=Selector, \\
	Child[0]=TemplateNameIs-ChosenAssassin, Child[1]=TemplateNameIs-ChosenAssassinM2, Child[2]=TemplateNameIs-ChosenAssassinM3, Child[3]=TemplateNameIs-ChosenAssassinM4, \\
	Child[4]=TemplateNameIs-ChosenSniper, Child[5]=TemplateNameIs-ChosenSniperM2, Child[6]=TemplateNameIs-ChosenSniperM3, Child[7]=TemplateNameIs-ChosenSniperM4, \\
	Child[8]=TemplateNameIs-ChosenWarlock, Child[9]=TemplateNameIs-ChosenWarlockM2, Child[10]=TemplateNameIs-ChosenWarlockM3, Child[11]=TemplateNameIs-ChosenWarlockM4)

-Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassin, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassinM2, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassinM3, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassinM4, NodeType=Condition)

-Behaviors=(BehaviorName=TemplateNameIs-ChosenSniper, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenSniperM2, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenSniperM3, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenSniperM4, NodeType=Condition)

-Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlock, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlockM2, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlockM3, NodeType=Condition)
-Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlockM4, NodeType=Condition)

+Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassin, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassinM2, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassinM3, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenAssassinM4, NodeType=Condition)

+Behaviors=(BehaviorName=TemplateNameIs-ChosenSniper, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenSniperM2, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenSniperM3, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenSniperM4, NodeType=Condition)

+Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlock, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlockM2, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlockM3, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ChosenWarlockM4, NodeType=Condition)

;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
; HUNTER - OLD OUT
;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="ChosenSniper::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenSniper::ChosenActivated", NodeType=Selector, \\
	Child[0]=MoveInIfLastUnit, \\
	Child[1]=EngagedSniperBranch, \\
	Child[2]=TryTrackingShotIfFirstAction, \\
	Child[3]=TryGrappleIfJustShot, \\
	Child[4]=TryMoveForTrackingShot, \\
	Child[5]=TryTrackingShotMark, \\
	Child[6]=TryTrackingShotMove, \\
	Child[7]=SkipMove)
-Behaviors=(BehaviorName="ChosenSniper::ChosenEngaged", NodeType=Selector, \\
			Child[0]=OverwatchHandlerShootOverwatcherOption, \\
			Child[1]=TryGrappleTowardDazed, \\
			Child[2]=TryTrackingShotIfFirstAction, \\
			Child[3]=TryChosenSummon, \\
			Child[4]=TryGrappleForOffense,\\
			Child[5]=TryMoveThenGrenade,\\
			Child[6]=TryMoveThenGrenadeAny30,\\
			Child[7]=DoIfFlankedOrFirstActionMoveHeight, \\
			Child[8]=TryLethalDose, \\
			Child[9]=TryMoveThenGrenadeAny,\\
			Child[10]=TryHunterRifle, \\
			Child[11]=TryQuickDraw, \\
			Child[12]=TryOverwatch, \\
			Child[13]=OverwatchHandlerBackupOption, \\
			Child[14]=HuntEnemyWithCover, \\
			Child[15]=SkipMove)

-Behaviors=(BehaviorName=SelectTargetForPistolStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=SelectTarget_FavorableNonCivilianOrVIP, Child[2]=HasValidTarget-PistolStandardShot)
-Behaviors=(BehaviorName=SelectTargetForLethalDose, NodeType=Sequence, Child[0]=SetTargetStack-LethalDose, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-LethalDose)

;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
; WARLOCK - OLD OUT
;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="ChosenWarlock::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenWarlock::ChosenActivated", NodeType=Selector, \\
	Child[0]=MoveInIfLastUnit, \\
	Child[1]=WarlockMoveSafelyNearSpawnFirstAction, \\
	Child[2]=TryWarlockMapAbilities, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=HuntEnemy, \\
	Child[5]=SkipMove)
-Behaviors=(BehaviorName="ChosenWarlock::ChosenEngaged", NodeType=Selector, \\
	Child[0]=TryEndSpectralArmy, \\
	Child[1]=TryChosenSummon, \\
	Child[2]=OverwatchHandlerShootOverwatcherOption, \\
	Child[3]=WarlockMoveIfNecessary, \\
	Child[4]=TryWarlockCombatAbilities, \\
	Child[5]=OverwatchHandlerBackupOption, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=HuntEnemyWithCover)
-Behaviors=(BehaviorName=ChosenUnactivated, NodeType=Sequence, Child[0]=ChosenIsUnactivated, Child[1]=GenericGreenMovement)

;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
; ASSASSIN - OLD OUT
;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName="ChosenAssassin::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenAssassin::ChosenActivated", NodeType=Selector, Child[0]=SelectPreselectedAbility, Child[1]=PostBendingReedSkip, Child[2]=StealthAssassinBranch, Child[3]=DoVanishingWindMapwide, Child[4]=VanishingWindMove, Child[5]=MoveAdvanceToCoverUnsafe, Child[6]=SkipMove)
-Behaviors=(BehaviorName="ChosenAssassin::ChosenEngaged", NodeType=Selector, Child[0]=PostBendingReedSkip, Child[1]=StealthAssassinBranch, Child[2]=VisibleAssassinBranch, Child[3]=TryShootOrReload, Child[4]=TryOverwatch, Child[5]=SkipMove)
-Behaviors=(BehaviorName=SelectFromStealthAssassinOptions, NodeType=Selector, \\
	Child[0]=TryPartingSilkConditionally, \\
	Child[1]=PostVanishingWindMovement, \\
	Child[2]=AdvanceCoverIfNoEnemiesVisible, \\
	Child[3]=NoHarborWaveTargetOption, \\
	Child[4]=StealthOverwatchHandlerOption, \\
	Child[5]=AdvanceCoverDashMove, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=HuntEnemyUnsafe ) 
-Behaviors=(BehaviorName=CycleVisibleAssassinOptions, NodeType=Selector, \\
	Child[0]=OverwatchHandlerShootOverwatcherOption, \\
	Child[1]=TryChosenSummon, \\
	Child[2]=AssassinCycle1Branch, \\
	Child[3]=AssassinCycle2Branch, \\
	Child[4]=AssassinCycle3Branch, \\
	Child[5]=SelectFromVisibleAssassinOptions)
-Behaviors=(BehaviorName=SelectFromVisibleAssassinOptions, NodeType=Selector, \\
	Child[0]=OverwatchHandlerShootOverwatcherOption,\\
	Child[1]=AssassinBendingReedMovement, \\
	Child[2]=TryVanishingWind, \\
	Child[3]=HarborWaveAndMountainMistOptions, \\
	Child[4]=PartingSilkPriorityOption, \\
	Child[5]=HarborWaveOnlyOption, \\
	Child[6]=MountainMistOnlyOption, \\
	Child[7]=NoHarborWaveTargetOption, \\
	Child[8]=OverwatchHandlerBackupOption, \\
	Child[9]=SelectFromStealthAssassinOptions)
-Behaviors=(BehaviorName=StealthAssassinBranch, NodeType=Sequence, Child[0]=AffectedByEffect-VanishingWind, Child[1]=SelectFromStealthAssassinOptions)
-Behaviors=(BehaviorName=VisibleAssassinBranch, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=CycleVisibleAssassinOptions)
-Behaviors=(BehaviorName=TryHarborWave, NodeType=Sequence, Child[0]=SelectTargetForHarborWave, Child[1]=SelectAbility-HarborWave, Child[2]=SSSetAssassinCycle3IfNotSet)
-Behaviors=(BehaviorName=TryPartingSilk, NodeType=Sequence, Child[0]=IsAbilityAvailable-PartingSilk, Child[1]=ChosenSafeToMove, Child[2]=FindPartingSilkTarget, Child[3]=SelectAbility-PartingSilk, Child[4]=DisableExtractThisTurn)
-Behaviors=(BehaviorName=FindGrappleDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-HunterGrapple, Child[2]=OverridePreferredDestinationToSpawnLocation, Child[3]=RestrictToEnemyLoS, Child[4]=UseDashMovement, Child[5]=FindRestrictedDestination-MWP_Grapple)

;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
; NEW WARLOCK AI
;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
+Behaviors=(BehaviorName=ChosenUnactivated, NodeType=Failer, Child[0]=ChosenIsUnactivated)
; Chosen are always on Red Alert movement. Act as if activated at all times, no alert check.
+Behaviors=(BehaviorName="ChosenWarlock::CharacterRoot", NodeType=Selector, Child[0]=ChosenWarlockAbilitySelector)
+Behaviors=(BehaviorName="ChosenWarlock::ChosenActivated", NodeType=Selector, Child[0]=ChosenWarlockAbilitySelector)
+Behaviors=(BehaviorName="ChosenWarlock::ChosenEngaged", NodeType=Selector, Child[0]=ChosenWarlockAbilitySelector)
; Run the last action first, so the first action doesnt check for AP and can be run whenever.
+Behaviors=(BehaviorName=ChosenWarlockAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehaviorSometimes, Child[1]=ChosenWarlockLastAction, Child[2]=ChosenWarlockFirstOrSecondAction)
+Behaviors=(BehaviorName=ChosenWarlockFirstOrSecondAction, NodeType=Sequence, Child[0]=ChosenWarlockFirstOrSecondActionSelector)
+Behaviors=(BehaviorName=ChosenWarlockFirstOrSecondActionSelector, NodeType=Selector, \\
	Child[0]=TryEndSpectralArmy, \\
	Child[1]=WarlockMoveInIfLastUnit, \\
	Child[2]=TryChosenExtract, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=TryChosenSummonEngaged, \\
	Child[5]=TryPsiMindControlSinglePriority, \\
	Child[6]=TrySpectralArmyWithConditions, \\
	Child[7]=ChosenPunishFlankedEnemy, \\
	Child[8]=TryTeleportAllySometimes, \\
	Child[9]=TryMindScorchRarely, \\
	Child[10]=TryPsiMindControlSometimes, \\
	Child[11]=NeedsReload, \\
	Child[12]=ShootIfIdeal, \\
	Child[13]=AdvanceCoverNoEnemiesEngaged, \\
	Child[14]=TryShootOrReload, \\
	Child[15]=MoveStandard, \\
	Child[16]=ChosenSelectHeatSeekMove)

+Behaviors=(BehaviorName=ChosenWarlockLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenWarlockLastActionSelector)
+Behaviors=(BehaviorName=ChosenWarlockLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEndSpectralArmy, \\
	Child[1]=WarlockMoveInIfLastUnit, \\
	Child[2]=TryChosenExtract, \\
	Child[3]=TryPsiMindControlSinglePriority, \\
	Child[4]=TrySpectralZombieSpawnIdleSometimes, \\
	Child[5]=TrySpectralArmyWithConditions, \\
	Child[6]=TryChosenSummonEngaged, \\
	Child[7]=ChosenPunishFlankedEnemy, \\
	Child[8]=TryMindScorchSometimes, \\
	Child[9]=TryPsiMindControlSometimes, \\
	Child[10]=TrySpectralZombieSpawnActiveSometimes, \\
	Child[11]=TryWarlockOverwatchSometimes, \\
	Child[12]=TryShootOrReload, \\
	Child[13]=TryMindScorch, \\
	Child[14]=TryPsiMindControl, \\
	Child[15]=TryTeleportAlly, \\
	Child[16]=DoIfFlankedMove, \\
	Child[17]=ChosenOverwatch, \\
	Child[18]=DoCower)

+Behaviors=(BehaviorName=WarlockMoveInIfLastUnit, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=MoveInIfLastUnit)

+Behaviors=(BehaviorName=TryWarlockOverwatchSometimes, NodeType=Sequence, Child[0]=ChosenWarlockAlliesVisible, Child[1]=WarlockOverwatchSometimes)
+Behaviors=(BehaviorName=WarlockOverwatchSometimes, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=20)
+Behaviors=(BehaviorName=AdvanceCoverNoEnemiesEngaged, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=AdvanceCoverIfNoEnemiesVisible)
+Behaviors=(BehaviorName=HuntEnemyWithCoverIfNoOneInSight, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=TrySpectralZombieSpawnIdleSometimes, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=TryCorressALot)
+Behaviors=(BehaviorName=TrySpectralZombieSpawnActiveSometimes, NodeType=Sequence, Child[0]=ChosenWarlockAlliesVisible, Child[1]=WarlockHighEnemyCount, Child[2]=TryCorressSometimes)
+Behaviors=(BehaviorName=TryCorressSometimes, NodeType=RandFilter, Child[0]=TryCorress, Param[0]=50)
+Behaviors=(BehaviorName=TryCorressALot, NodeType=RandFilter, Child[0]=TryCorress, Param[0]=75)
+Behaviors=(BehaviorName=ChosenWarlockAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=SpectralArmyConditions, NodeType=Selector, Child[0]=WarlockHighEnemyCount, Child[1]=HasLowHP)
+Behaviors=(BehaviorName=TrySpectralArmyWithConditions, NodeType=Sequence, Child[0]=SpectralArmyConditions, Child[1]=AnyLivingEnemyVisible, Child[2]=TrySpectralArmy)
+Behaviors=(BehaviorName=WarlockHighEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=3)
+Behaviors=(BehaviorName=TryPsiMindControlSinglePriority, NodeType=Sequence, Child[0]=WarlockSingleEnemyCount, Child[1]=TryPsiMindControl)
+Behaviors=(BehaviorName=WarlockSingleEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
+Behaviors=(BehaviorName=TryTeleportAllySometimes, NodeType=RandFilter, Child[0]=TryTeleportAlly, Param[0]=33)
+Behaviors=(BehaviorName=TryMindScorchSometimes, NodeType=RandFilter, Child[0]=TryMindScorch, Param[0]=50)
+Behaviors=(BehaviorName=TryMindScorchRarely, NodeType=RandFilter, Child[0]=TryMindScorch, Param[0]=33)
+Behaviors=(BehaviorName=TryPsiMindControlSometimes, NodeType=RandFilter, Child[0]=TryPsiMindControl, Param[0]=50)
+Behaviors=(BehaviorName=ChosenDoIfFlankedMoveIfNotMoved, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=DoIfFlankedMove)

; WARLOCK DONT TELEPORT UNITS THAT ARE SUPPRESSING
-Behaviors=(BehaviorName=EvaluateForTeleportAlly, NodeType=Sequence, Child[0]=TargetHasRevealed, Child[1]=TargetNotFlanking, Child[2]=TargetNotSpectral, Child[3]=GenericScoreTargetRandomlySequence)
+Behaviors=(BehaviorName=EvaluateForTeleportAlly, NodeType=Sequence, Child[0]=TargetHasRevealed, Child[1]=TargetNotFlanking, Child[2]=TargetNotSpectral, Child[3]=SSTargetSuppressingScoreOut, Child[4]=GenericScoreTargetRandomlySequence)
+Behaviors=(BehaviorName=SSTargetSuppressingScoreOut, NodeType=Successor, Child[0]=TargetSuppressingScoreOut)
+Behaviors=(BehaviorName=TargetSuppressingScoreOut, NodeType=Sequence, Child[0]=IsInvalidTeleportTarget, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=IsInvalidTeleportTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression);

;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
; NEW HUNTER AI
;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
+Behaviors=(BehaviorName="ChosenSniper::CharacterRoot", NodeType=Selector, Child[0]=ChosenSniperAbilitySelector)
+Behaviors=(BehaviorName="ChosenSniper::ChosenActivated", NodeType=Selector, Child[0]=ChosenSniperAbilitySelector)
+Behaviors=(BehaviorName="ChosenSniper::ChosenEngaged", NodeType=Selector, Child[0]=ChosenSniperAbilitySelector)
+Behaviors=(BehaviorName=ChosenSniperAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehaviorSometimes, Child[1]=ChosenSniperFirstAction, Child[2]=ChosenSniperSecondAction, Child[3]=ChosenSniperLastAction, Child[4]=ChosenOverwatch)

+Behaviors=(BehaviorName=ChosenSniperFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=ChosenSniperFirstActionSelector)
+Behaviors=(BehaviorName=ChosenSniperFirstActionSelector, NodeType=Selector, \\
	Child[0]=HunterMoveInIfLastUnit, \\
	Child[1]=TryGrappleTowardDazed, \\
	Child[2]=TryGrappleIfJustShot, \\
	Child[3]=TryGrappleFar, \\
	Child[4]=TryChosenExtract, \\
	Child[5]=HunterFlankedSelector, \\
	Child[6]=TryChosenSummonEngaged, \\
	Child[7]=TryGrenadeChosen, \\
	Child[8]=TryLethalDoseEngaged50, \\
	Child[9]=TryChosenHunterMovement, \\
	Child[10]=NeedsReload, \\
	Child[11]=TryPistolEngaged, \\
	Child[12]=TryHunterRifleOrReloadOrPistol, \\
	Child[13]=HunterHeatSeekMove)

+Behaviors=(BehaviorName=ChosenSniperSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenSniperSecondActionSelector)
+Behaviors=(BehaviorName=ChosenSniperSecondActionSelector, NodeType=Selector, \\
	Child[0]=HunterMoveInIfLastUnit, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryChosenExtract, \\
	Child[3]=HunterFlankedSelector, \\
	Child[4]=TryChosenSummonEngaged, \\
	Child[5]=TryGrenadeChosen, \\
	Child[6]=TryLethalDoseEngaged, \\
	Child[7]=TryChosenHunterForcedTerrorMovement33, \\
	Child[8]=TryChosenMoveIfNoAlliesVisible50, \\
	Child[9]=TryHunterRifleOrReloadOrPistol, \\
	Child[10]=TryGrappleClose, \\
	Child[11]=TryPistolEngaged, \\
	Child[12]=ShootIfAvailable)

+Behaviors=(BehaviorName=ChosenSniperLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenSniperLastActionSelector)
+Behaviors=(BehaviorName=ChosenSniperLastActionSelector, NodeType=Selector, \\
	Child[0]=HunterMoveInIfLastUnit, \\
	Child[1]=TryChosenExtract, \\
	Child[2]=TryChosenSummonEngaged, \\
	Child[3]=TryGrenadeChosen, \\
	Child[4]=NeedsReload, \\
	Child[5]=TryHunterRifleOrReloadOrPistol, \\
	Child[6]=ChosenOverwatch, \\
	Child[7]=ShootIfAvailable, \\
	Child[8]=TryLethalDoseEngaged, \\
	Child[9]=DoCower)

; Heat seeking only allowed on last unit to prevent AI hanging. Try the regular stuff first.
+Behaviors=(BehaviorName=ChosenHunterMoveTowardsNearestEnemy, NodeType=Selector, Child[0]=MoveFlankingIfFirstAbilityUnsafe, Child[1]=MoveAdvanceToCoverHeightUnsafe, Child[2]=HeatSeekWhenNoEnemiesVisible, Child[3]=HeatSeekToCover)
; Promote movement when it's smart to do so. Note that the hunter sees everything, and if there is even 1 allied turret very far away this code might not get executed. We're hoping another branch allows movement.
+Behaviors=(BehaviorName=HunterMoveInIfLastUnit, NodeType=Sequence, Child[0]=ChosenIsNotEngaged, Child[1]=DidntJustMove, Child[2]=DidNotJustGrapple, Child[3]=IsLastAIUnit, Child[4]=ChosenHunterMoveTowardsNearestEnemy)
+Behaviors=(BehaviorName=TryChosenMoveIfNoAlliesVisible50, NodeType=Sequence, Child[0]=ChosenHunterNoAlliesCount, Child[1]=DidntJustMove, Child[2]=DidNotJustGrapple, Child[3]=ChosenNoAlliesMovementFilter50)
+Behaviors=(BehaviorName=TryChosenHunterMovement, NodeType=Selector, Child[0]=TryGrappleClose, Child[1]=TryGrappleFar, Child[2]=MoveAdvanceToCoverHeight, Child[3]=HunterMoveRandomCover)
+Behaviors=(BehaviorName=ChosenHunterNoAlliesCount, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="<=", Param[2]=0)
+Behaviors=(BehaviorName=ChosenNoAlliesMovementFilter50, NodeType=RandFilter, Child[0]=TryChosenHunterMovement, Param[0]=50)
+Behaviors=(BehaviorName=ChosenForceMovementFilter33, NodeType=RandFilter, Child[0]=TryChosenHunterMovement, Param[0]=33)

; The Hunter will often pistol civilians it can't hit correctly. This is fine, but not non-stop. Ask him to move sometimes in Terror missions.
; You can't use VISIBILITY checks because the Hunter sees EVERYTHING on the map and the function returns TRUE all the time for EnemiesVisible.
; This isn't as bad during Chosen Retaliations because there's a lot going on and the Resistance will jump start him often.
+Behaviors=(BehaviorName=TryChosenHunterForcedTerrorMovement33, NodeType=Sequence, Child[0]=IsMissionOfType-Terror, Child[1]=ChosenIsNotEngaged, Child[2]=ChosenForceMovementFilter33)

+Behaviors=(BehaviorName=TryPistolEngaged, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=TryQuickdraw)
+Behaviors=(BehaviorName=TryHunterRifleOrReloadOrPistol, NodeType=Selector, Child[0]=NeedsReload, Child[1]=TryHunterRifle, Child[2]=TryQuickdraw)
+Behaviors=(BehaviorName=TryHunterRifleOrReload, NodeType=Selector, Child[0]=NeedsReload, Child[1]=TryHunterRifle)

+Behaviors=(BehaviorName=TryLethalDoseEngaged, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=TryLethalDose)
+Behaviors=(BehaviorName=TryLethalDoseEngaged50, NodeType=RandFilter, Child[0]=TryLethalDoseEngaged, Param[0]=50)
+Behaviors=(BehaviorName=FindGrappleDestinationFar, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToUnflanked, Child[2]=HunterGrappleEngagedCheck, Child[3]=RestrictToAbilityRange-HunterGrapple, Child[4]=FindRestrictedDestination-MWP_GrappleFar)
+Behaviors=(BehaviorName=FindGrappleDestinationClose, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToUnflanked, Child[2]=RestrictToEnemyLoS, Child[3]=RestrictToAbilityRange-HunterGrapple, Child[4]=FindRestrictedDestination-MWP_GrappleClose)
+Behaviors=(BehaviorName=TryGrappleFar, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunterGrapple, Child[1]=FindGrappleDestinationFar, Child[2]=SelectAbility-HunterGrapple)
+Behaviors=(BehaviorName=TryGrappleClose, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunterGrapple, Child[1]=FindGrappleDestinationClose, Child[2]=SelectAbility-HunterGrapple)
+Behaviors=(BehaviorName=HunterFlankedSelector, NodeType=Sequence, Child[0]=IsFlanked, Child[1]=FlankedHunterResponseSelector)
+Behaviors=(BehaviorName=FlankedHunterResponseSelector, NodeType=Selector, Child[0]=HunterMoveRandomCover, Child[1]=TryGrappleFar, Child[2]=TryGrapple, Child[3]=TryGrappleClose)
+Behaviors=(BehaviorName=HunterMoveRandomCover, NodeType=Sequence, Child[0]=DidNotJustGrapple, Child[1]=DidntJustMove, Child[2]=IsAbilityAvailable-StandardMove, Child[3]=ResetDestinationSearch, Child[4]=RestrictToUnflanked, Child[5]=RestrictToEnemyLoS, Child[6]=FindDestination-MWP_RandomCover, Child[7]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TryGrenadeChosen, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-ChosenGrenadeProfile, Child[2]=SelectAoETarget-ChosenGrenadeProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=HunterHeatSeekMove, NodeType=Sequence, Child[0]=DidNotJustGrapple, Child[1]=NotLastActionPoint, Child[2]=ChosenSelectHeatSeekMove)
+Behaviors=(BehaviorName=TrySniper33OrOverwatch67, NodeType=RandSelector, Child[0]=TryHunterRifleOrReload, Param[0]=33, Child[1]=ChosenOverwatch, Param[1]=67)
;-Behaviors=(BehaviorName=SelectTargetForHunterRifleShot, NodeType=Sequence, Child[0]=SetTargetStack-HunterRifleShot, Child[1]=SelectTarget_FavorableNonCivilianOrVIP, Child[2]=HasValidTarget-HunterRifleShot)
;-Behaviors=(BehaviorName=SelectTargetForPistolStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=SelectTarget_FavorableNonCivilianOrVIP, Child[2]=HasValidTarget-PistolStandardShot)
+Behaviors=(BehaviorName=FindGrappleDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-HunterGrapple, Child[2]=HunterGrappleEngagedCheck, Child[3]=FindRestrictedDestination-MWP_Grapple)
+Behaviors=(BehaviorName=HunterGrappleEngagedCheck, NodeType=Successor, Child[0]=RestrictGrappleToLOSIfNotEngaged)
+Behaviors=(BehaviorName=RestrictGrappleToLOSIfNotEngaged, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=RestrictToEnemyLoS)
+Behaviors=(BehaviorName=SelectTargetForPistolStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=SelectTarget_PistolFavorableNonCivilianOrVIP, Child[2]=HasValidTarget-PistolStandardShot)
+Behaviors=(BehaviorName=SelectTarget_PistolFavorableNonCivilianOrVIP, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetPistolFavorableNonCivilianOrVIP)
+Behaviors=(BehaviorName=EvaluateTargetPistolFavorableNonCivilianOrVIP, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChanceFavorable, Child[2]=TargetScoreHealth, Child[3]=ApplyDifficultyModifiers, Child[4]=SSScoreTargetOutIfCivilian, Child[5]=SSScoreTargetOutIfEnemyVIP, Child[6]=TargetScoreByScaledDistance-1, Child[7]=TargetScoreMarked, Child[8]=TargetScoreHighestSoldierRank, Child[9]=TargetScoreReachableForMelee, Child[10]=UpdateBestTarget)
+Behaviors=(BehaviorName=SelectTargetForLethalDose, NodeType=Sequence, Child[0]=SetTargetStack-LethalDose, Child[1]=SelectTarget_PistolFavorableNonCivilianOrVIP, Child[2]=HasValidTarget-LethalDose)

;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
; NEW ASSASSIN AI
;*******************************************************************************************************************************************************************************************
;*******************************************************************************************************************************************************************************************
+Behaviors=(BehaviorName="ChosenAssassin::CharacterRoot", NodeType=Selector, Child[0]=ChosenAssassinAbilitySelector)
+Behaviors=(BehaviorName="ChosenAssassin::ChosenActivated", NodeType=Selector, Child[0]=ChosenAssassinAbilitySelector)
+Behaviors=(BehaviorName="ChosenAssassin::ChosenEngaged", NodeType=Selector, Child[0]=ChosenAssassinAbilitySelector)

+Behaviors=(BehaviorName=ChosenAssassinAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehaviorSometimes, Child[1]=ChosenAssassinFirstAction, Child[2]=ChosenAssassinSecondAction, Child[3]=ChosenAssassinLastAction)
+Behaviors=(BehaviorName=ChosenAssassinFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=ChosenAssassinFirstActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinFirstActionSelector, NodeType=Selector, \\
	Child[0]=KickstartEngagedModeAssassin, \\
	Child[1]=TryVanishingWindIfEngagedNotSafeToMove, \\
	Child[2]=VanishMoveAway, \\
	Child[3]=TryVanishRevealFlanked, \\
	Child[4]=AssassinMoveInIfLastUnit, \\
	Child[5]=TryChosenExtractNotAfterPartingSilk, \\
	Child[6]=AssassinHeatSeekUnengaged, \\
	Child[7]=TryPartingSilkNotMoved, \\
	Child[8]=TryChosenSummonEngaged, \\
	Child[9]=DoIfFlankedMove, \\
	Child[10]=ChosenPunishFlankedEnemy, \\
	Child[11]=MixItUpGunAssassin, \\
	Child[12]=AssassinRandomMovement, \\
	Child[13]=TryGrenadeChosen, \\
	Child[14]=TryShootOrReload, \\
	Child[15]=ChosenHuntEnemyWithCoverUnsafe, \\
	Child[16]=ChosenSelectHeatSeekMove)

+Behaviors=(BehaviorName=AssassinMoveInIfLastUnit, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=MoveInIfLastUnit)

; Prevents stuckage.
+Behaviors=(BehaviorName=AssassinHeatSeekUnengaged, NodeType=Sequence, Child[0]=ChosenIsNotEngaged, Child[1]=NotLastActionPoint, Child[2]=ChosenSelectHeatSeekMove)

+Behaviors=(BehaviorName=ChosenAssassinSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenAssassinSecondActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinSecondActionSelector, NodeType=Selector, \\
	Child[0]=AssassinMoveInIfLastUnit, \\
	Child[1]=TryVanishingWindIfEngagedNotSafeToMove, \\
	Child[2]=VanishMoveAway, \\
	Child[3]=TryChosenExtractNotAfterPartingSilk, \\
	Child[4]=AssassinHeatSeekUnengaged, \\
	Child[5]=TryBendingReedAfterPartingSilkFallbackUnsafe, \\
	Child[6]=TryPartingSilkNotMoved, \\
	Child[7]=DoIfFlankedMove, \\
	Child[8]=TryChosenSummonEngaged, \\
	Child[9]=ChosenPunishFlankedEnemy, \\
	Child[10]=TryHarborWave50, \\
	Child[11]=MixItUpGunAssassin, \\
	Child[12]=TryGrenadeChosen, \\
	Child[13]=AssassinNotMovedRandomMovement, \\
	Child[14]=TryShootOrReload, \\
	Child[15]=ChosenHuntEnemyWithCoverUnsafe, \\
	Child[16]=ChosenSelectHeatSeekMove)

+Behaviors=(BehaviorName=ChosenAssassinLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenAssassinLastActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinLastActionSelector, NodeType=Selector, \\
	Child[0]=StrategicStealthReposition, \\
	Child[1]=TryBendingReedAfterPartingSilkFallbackUnsafe, \\
	Child[2]=TryChosenExtractNotAfterPartingSilk, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=TryChosenSummonEngaged, \\
	Child[5]=ChosenPunishFlankedEnemy, \\
	Child[6]=TryHarborWave50, \\
	Child[7]=TryGrenadeChosen, \\
	Child[8]=TryAssassinWatch33, \\
	Child[9]=TryShootOrReload, \\
	Child[10]=DoAssassinWatchEngaged, \\
	Child[11]=ChosenHuntEnemyWithCoverUnsafe, \\
	Child[12]=HighCoverFallback)

; Prevents X/X/Gun scenarios in stealth where you know the assassin is in the exact same spot because the last 3rd action wasnt a visible movement.
+Behaviors=(BehaviorName=StrategicStealthReposition, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=AffectedByEffect-VanishingWind, Child[2]=ChosenIsEngaged, Child[3]=HighCoverFallback)
+Behaviors=(BehaviorName=TryBendingReedAfterPartingSilkFallbackUnsafe, NodeType=Sequence, Child[0]=WasLastAbility-PartingSilk, Child[1]=HighCoverFallback)
; The Assassin will not pick TryChosenExtract if the last action was PartingSilk because it's not counterable.
+Behaviors=(BehaviorName=TryChosenExtractNotAfterPartingSilk, NodeType=Sequence, Child[0]=DidntJustPartSilk, Child[1]=TryChosenExtract)
+Behaviors=(BehaviorName=DidntJustPartSilk, NodeType=Inverter, Child[0]=WasLastAbility-PartingSilk)
+Behaviors=(BehaviorName=TryHarborWave, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=NotFlanked, Child[2]=SelectTargetForHarborWave, Child[3]=SelectAbility-HarborWave)
; Less harboring as a first action to allow mixups.
+Behaviors=(BehaviorName=TryHarborWave50, NodeType=RandFilter, Child[0]=TryHarborWave, Param[0]=50)
+Behaviors=(BehaviorName=TryPartingSilkNotMoved, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=TryPartingSilkSometimes)
+Behaviors=(BehaviorName=TryPartingSilkSometimes, NodeType=RandFilter, Child[0]=TryPartingSilk, Param[0]=50)
+Behaviors=(BehaviorName=AssassinRandomMovement, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=TryAssassinRandomMove)
+Behaviors=(BehaviorName=TryAssassinRandomMove, NodeType=RandFilter, Child[0]=MoveStandard, Param[0]=50)
+Behaviors=(BehaviorName=AssassinNotMovedRandomMovement, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=NotAffectedByVanish, Child[2]=TryAssassinRandomMove)
+Behaviors=(BehaviorName=TryVanishingWindIfEngagedNotSafeToMove, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=AssassinNotSafeToMove, Child[2]=TryVanishingWind)
+Behaviors=(BehaviorName=TryPartingSilk, NodeType=Sequence, Child[0]=IsAbilityAvailable-PartingSilk, Child[1]=ChosenIsEngaged, Child[2]=ChosenSafeToMove, Child[3]=FindPartingSilkTarget, Child[4]=SelectAbility-PartingSilk, Child[5]=DisableExtractThisTurn)
+Behaviors=(BehaviorName=KickstartEngagedModeAssassin, NodeType=Sequence, Child[0]=ChosenIsNotEngaged, Child[1]=HasThreeActionPoints, Child[2]=AnyLivingEnemyVisible, Child[3]=TryVanishReveal)
+Behaviors=(BehaviorName=VanishMoveAway, NodeType=Sequence, Child[0]=WasLastAbility-VanishingWind, Child[1]=HighCoverFallback)
+Behaviors=(BehaviorName=MixItUpGunAssassin, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=TryAssassinShootSometimes)
+Behaviors=(BehaviorName=TryAssassinShootSometimes, NodeType=RandFilter, Child[0]=TryShootOrReload, Param[0]=25)
+Behaviors=(BehaviorName=TryVanishRevealFlanked, NodeType=Sequence, Child[0]=IsFlanked, Child[1]=DidntJustUseVanishingWind, Child[2]=TryVanishReveal)
+Behaviors=(BehaviorName=TryAssassinWatch33, NodeType=RandFilter, Child[0]=DoAssassinWatchEngaged, Param[0]=33)
+Behaviors=(BehaviorName=DoAssassinWatchEngaged, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=ChosenIsEngaged, Child[2]=ChosenOverwatch)
; This is compatible with my new SafeToMove code.
+Behaviors=(BehaviorName=AssassinNotSafeToMove, NodeType=Inverter, Child[0]=SafeToMove)

;*****************************************************************************************************************************************************************************************************
; SPECTRAL STUNLANCER AI: JUST LIKE A NORMAL LANCER, BUT IT SKIPS ITS TURN WHEN SUMMONED AND THEY HIT MIMIC BEACONS ALL THE TIME
;*****************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName="SpectralStunLancer::CharacterRoot", NodeType=Selector, \\
	Child[0]=RestrictToOneMoveIfJustSpawned, \\
	Child[1]=MimicBeaconBehavior, \\
	Child[2]=TryStunLanceIfNotJustSpawned, \\
	Child[3]=MoveMeleeUnsafe, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectHeatSeekMove)

+Behaviors=(BehaviorName="SpectralStunLancer::CharacterRoot", NodeType=Selector, \\
	Child[0]=SLJustSpawnedActionSelector, \\
	Child[1]=MimicBeaconBehavior, \\
	Child[2]=AdventSLFirstAction, \\
	Child[3]=AdventSLLastAction)

+Behaviors=(BehaviorName=SLJustSpawnedActionSelector, NodeType=Selector, Child[0]=SLJustSpawnedScamperFirstAction, Child[1]=SLJustSpawnedSkipLastAction)
+Behaviors=(BehaviorName=SLJustSpawnedScamperFirstAction, NodeType=Sequence, Child[0]=JustSpawnedThisTurn, Child[1]=NotLastActionPoint, Child[2]=GenericScamperRoot)
+Behaviors=(BehaviorName=SLJustSpawnedSkipLastAction, NodeType=Sequence, Child[0]=JustSpawnedThisTurn, Child[1]=IsLastActionPoint, Child[2]=SkipMove)
[XComGame.XComGameState_AIPlayerData]
-MaxEngagedEnemies[0] = 4   ; Rookie
-MaxEngagedEnemies[1] = 6   ; Veteran
-MaxEngagedEnemies[2] = 6   ; Commander
-MaxEngagedEnemies[3] = 99  ; Legend

-MaxEngagedEnemies[0] = 99
-MaxEngagedEnemies[1] = 99
-MaxEngagedEnemies[2] = 99
-MaxEngagedEnemies[3] = 99

+MaxEngagedEnemies[0] = 99
+MaxEngagedEnemies[1] = 99
+MaxEngagedEnemies[2] = 99
+MaxEngagedEnemies[3] = 99

[XComGame.XGAIPlayer]
; This is essential to Chryssalids, but also to general AI.
-LastResortTargetEffects=(EffectName="Panicked")
-LastResortTargetEffects=(EffectName="Berserk")
-LastResortTargetEffects=(EffectName="Obsessed")
-LastResortTargetEffects=(EffectName="Shattered")
-LastResortTargetEffects=(EffectName="Stunned")
-LastResortTargetEffects=(EffectName="Dazed")

[XComGame.XGAIBehavior]
;*****************************************************************************************************************************************************************************************************
; TROOPER GRENADE
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=TrooperGrenadeManyProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=2, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=False, bRequireLoS=1)
+AoEProfiles=( Profile=TrooperGrenadeSingleProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=False, bRequireLoS=1)

;*****************************************************************************************************************************************************************************************************
; CAPTAIN GRENADE
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=CaptainGrenadeManyProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=2, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=False, bRequireLoS=1)
+AoEProfiles=( Profile=CaptainGrenadeSingleProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bIgnoreSelfDamage=False, bRequireLoS=1)

;*****************************************************************************************************************************************************************************************************
; STUNLANCER GRENADE + LANCING PROFILE
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=LancerGrenadeMassesProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=5, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bIgnoreSelfDamage=True, bRequireLoS=1)
+AoEProfiles=( Profile=LancerGrenadeManyProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=4, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bIgnoreSelfDamage=True, bRequireLoS=1)
+AoEProfiles=( Profile=LancerGrenadeFewProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=3, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bIgnoreSelfDamage=True, bRequireLoS=1)
-m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.2f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
-m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.6f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)
+m_arrMoveWeightProfile=(Profile=MWP_MeleeDefensive, fCoverWeight=0.6f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f,fPriorityDistWeight=1.0f, bPrioritizeClosest=1, bIsMelee=1)

;*****************************************************************************************************************************************************************************************************
; SHIELDBEARER GRENADE
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=ShieldbearerGrenadeManyProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=4, bTargetAllies=1, bTargetEnemy=0, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bTargetSelf=True, bIgnoreSelfDamage=True, bRequireLoS=1)
+AoEProfiles=( Profile=ShieldbearerGrenadeSomeProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=3, bTargetAllies=1, bTargetEnemy=0, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bTargetSelf=True, bIgnoreSelfDamage=True, bRequireLoS=1)
+AoEProfiles=( Profile=ShieldbearerGrenadeFewProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=2, bTargetAllies=1, bTargetEnemy=0, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bTargetSelf=True, bIgnoreSelfDamage=True, bRequireLoS=1)

;*****************************************************************************************************************************************************************************************************
; PRIEST GRENADE
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=PriestGrenadeManyProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=3, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bIgnoreSelfDamage=True, bTargetSelf=False, bRequireLoS=1)
+AoEProfiles=( Profile=PriestGrenadeSomeProfile,  Ability=ThrowGrenade, bUsePrecomputePath=1, MinTargets=2, bFailOnFriendlyFire=0, bFailOnObjectiveFire=0, bIgnoreSelfDamage=True, bTargetSelf=False, bRequireLoS=1)

;*****************************************************************************************************************************************************************************************************
; MEC MICROMISSILES
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=MicroMissilesProfileMany, bUsePrecomputePath=1, Ability=MicroMissiles, bRequireLoS=1, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, MinTargets=3)
+AoEProfiles=( Profile=MicroMissilesProfileFew, bUsePrecomputePath=1, Ability=MicroMissiles, bRequireLoS=1, bFailOnObjectiveFire=1, bFailOnFriendlyFire=1, MinTargets=2)

;*****************************************************************************************************************************************************************************************************
; SECTOPOD
;*****************************************************************************************************************************************************************************************************
+AoEProfiles=( Profile=WrathCannonS1ManyProfile, Ability=WrathCannonStage1, bTargetSelf=True, bIgnoreSelfDamage=True, bTargetAllies=0, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, MinTargets=3, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=WrathCannonS1FewProfile, Ability=WrathCannonStage1, bTargetSelf=True, bIgnoreSelfDamage=True, bTargetAllies=0, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, MinTargets=2, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=SectopodLightningFieldProfile, Ability=SectopodLightningField, bTargetSelf=True, bIgnoreSelfDamage=True, bTargetAllies=0, bTargetEnemy=1, bFailOnFriendlyFire=1, bFailOnObjectiveFire=1, bRequireLoS=1, MinTargets=2)

;*****************************************************************************************************************************************************************************************************
; PURIFIER
;*****************************************************************************************************************************************************************************************************

-AoEProfiles=( Profile=FlameThrowerLostTargetProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, bTargetTheLost=1, bTargetEnemy=0, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerMultiProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=2, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerIgnoreFF, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)

+AoEProfiles=( Profile=FlameThrowerLostTargetProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=true,  bTargetTheLost=1, bTargetEnemy=0, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerMultiProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=true,  MinTargets=2, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=true,  MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=true,  MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerIgnoreFF, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=false, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)

[XComGame.X2AIBTBehaviorTree]
;*****************************************************************************************************************************************************************************************************
; GENERIC DESTUPIDIFICATION CODE
;*****************************************************************************************************************************************************************************************************

; JOB DEBUGGING
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobTerrorist, NodeType=Action, Param[0]="Job Terrorist was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobHunter, NodeType=Action, Param[0]="Job Hunter was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobChargerUnsafe, NodeType=Action, Param[0]="Job Charger Unsafe was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobDefender, NodeType=Action, Param[0]="Job Defender was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobRendezvous, NodeType=Action, Param[0]="Job Rendez-vous was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobEvacAtRendezvous, NodeType=Action, Param[0]="Job Evac At Rendez-vous was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobAttackStrikePointOne, NodeType=Action, Param[0]="Job Attack Strike 1 was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobAttackStrikePointTwo, NodeType=Action, Param[0]="Job Attack Strike 2 was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobExecutioner, NodeType=Action, Param[0]="Job Executioner was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobSentryVsLost, NodeType=Action, Param[0]="Job Sentry Vs Lost was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobAlwaysDoNothing, NodeType=Action, Param[0]="Job Always Do Nothing was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobObserver, NodeType=Action, Param[0]="Job Observer was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobPrisoner, NodeType=Action, Param[0]="Job Prisoner was called!")
;+Behaviors=(BehaviorName=DoRedScreenFailure-TryJobGreenStandby, NodeType=Action, Param[0]="Job Green Standby was called!")

;+Behaviors=(BehaviorName=ShowRedScreen-TryJobTerrorist, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobTerrorist)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobHunter, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobHunter)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobChargerUnsafe, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobChargerUnsafe)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobDefender, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobDefender)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobRendezvous, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobRendezvous)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobEvacAtRendezvous, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobEvacAtRendezvous)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobAttackStrikePointOne, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobAttackStrikePointOne)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobAttackStrikePointTwo, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobAttackStrikePointTwo)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobExecutioner, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobExecutioner)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobSentryVsLost, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobSentryVsLost)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobAlwaysDoNothing, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobAlwaysDoNothing)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobObserver, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobObserver)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobPrisoner, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobPrisoner)
;+Behaviors=(BehaviorName=ShowRedScreen-TryJobGreenStandby, NodeType=Successor, Child[0]=DoRedScreenFailure-TryJobGreenStandby)

; REPLACE ALL JOBS WITH THE EXACT SAME VERSION, BUT WITH A REDSCREEN DISPLAY TO SHOW THEY HAVE RAN
;-Behaviors=(BehaviorName=TryJobTerrorist,  NodeType=Sequence, Child[0]=IsMyJob-Terrorist, Child[1]=JobRoot_Terrorist)
;-Behaviors=(BehaviorName=TryJobHunter,  NodeType=Sequence, Child[0]=IsMyJob-Hunter, Child[1]=JobRoot_Hunter)
;-Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=JobRoot_ChargerUnsafe)
;-Behaviors=(BehaviorName=TryJobDefender,  NodeType=Sequence, Child[0]=IsMyJob-Defender, Child[1]=JobRoot_Defender)
;-Behaviors=(BehaviorName=TryJobRendezvous,  NodeType=Sequence, Child[0]=IsMyJob-Rendezvous, Child[1]=JobRoot_Rendezvous)
;-Behaviors=(BehaviorName=TryJobEvacAtRendezvous,  NodeType=Sequence, Child[0]=IsMyJob-EvacAtRendezvous, Child[1]=JobRoot_EvacAtRendezvous)
;-Behaviors=(BehaviorName=TryJobAttackStrikePointOne,  NodeType=Sequence, Child[0]=IsMyJob-AttackStrikePointOne, Child[1]=JobRoot_AttackStrikePoint)
;-Behaviors=(BehaviorName=TryJobAttackStrikePointTwo,  NodeType=Sequence, Child[0]=IsMyJob-AttackStrikePointTwo, Child[1]=JobRoot_AttackStrikePoint)
;-Behaviors=(BehaviorName=TryJobExecutioner,  NodeType=Sequence, Child[0]=IsMyJob-Executioner, Child[1]=JobRoot_Executioner)
;-Behaviors=(BehaviorName=TryJobSentryVsLost,  NodeType=Sequence, Child[0]=IsMyJob-SentryVsLost, Child[1]=JobRoot_SentryVsLost)
;-Behaviors=(BehaviorName=TryJobAlwaysDoNothing,  NodeType=Sequence, Child[0]=IsMyJob-AlwaysDoNothing, Child[1]=JobRoot_AlwaysDoNothing)
;-Behaviors=(BehaviorName=TryJobObserver,  NodeType=Sequence, Child[0]=IsMyJob-Observer, Child[1]=IsRedAlert, Child[2]=DoIfFlankedMove, Child[3]=SkipMove)
;-Behaviors=(BehaviorName=TryJobPrisoner,  NodeType=Sequence, Child[0]=IsMyJob-Prisoner, Child[1]=SkipMove)
;-Behaviors=(BehaviorName=TryJobGreenStandby,  NodeType=Sequence, Child[0]=IsMyJob-GreenStandby, Child[1]=NotYetRevealed, Child[2]=SkipMove)

;+Behaviors=(BehaviorName=TryJobTerrorist,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobTerrorist, Child[1]=IsMyJob-Terrorist, Child[2]=JobRoot_Terrorist)
;+Behaviors=(BehaviorName=TryJobHunter,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobHunter, Child[1]=IsMyJob-Hunter, Child[2]=JobRoot_Hunter)
;+Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobChargerUnsafe, Child[1]=IsMyJob-Charger, Child[2]=JobRoot_ChargerUnsafe)
;+Behaviors=(BehaviorName=TryJobDefender,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobDefender, Child[1]=IsMyJob-Defender, Child[2]=JobRoot_Defender)
;+Behaviors=(BehaviorName=TryJobRendezvous,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobRendezvous, Child[1]=IsMyJob-Rendezvous, Child[2]=JobRoot_Rendezvous)
;+Behaviors=(BehaviorName=TryJobEvacAtRendezvous,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobEvacAtRendezvous, Child[1]=IsMyJob-EvacAtRendezvous, Child[2]=JobRoot_EvacAtRendezvous)
;+Behaviors=(BehaviorName=TryJobAttackStrikePointOne,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobAttackStrikePointOne, Child[1]=IsMyJob-AttackStrikePointOne, Child[2]=JobRoot_AttackStrikePoint)
;+Behaviors=(BehaviorName=TryJobAttackStrikePointTwo,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobAttackStrikePointTwo, Child[1]=IsMyJob-AttackStrikePointTwo, Child[2]=JobRoot_AttackStrikePoint)
;+Behaviors=(BehaviorName=TryJobExecutioner,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobExecutioner, Child[1]=IsMyJob-Executioner, Child[2]=JobRoot_Executioner)
;+Behaviors=(BehaviorName=TryJobSentryVsLost,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobSentryVsLost, Child[1]=IsMyJob-SentryVsLost, Child[2]=JobRoot_SentryVsLost)
;+Behaviors=(BehaviorName=TryJobAlwaysDoNothing,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobAlwaysDoNothing, Child[1]=IsMyJob-AlwaysDoNothing, Child[2]=JobRoot_AlwaysDoNothing)
;+Behaviors=(BehaviorName=TryJobObserver,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobObserver, Child[1]=IsMyJob-Observer, Child[2]=IsRedAlert, Child[3]=DoIfFlankedMove, Child[4]=SkipMove)
;+Behaviors=(BehaviorName=TryJobPrisoner,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobPrisoner, Child[1]=IsMyJob-Prisoner, Child[2]=SkipMove)
;+Behaviors=(BehaviorName=TryJobGreenStandby,  NodeType=Sequence, Child[0]=ShowRedscreen-TryJobGreenStandby, Child[1]=IsMyJob-GreenStandby, Child[2]=NotYetRevealed, Child[3]=SkipMove)

; FORBID CHARGER FROM BEING A VALID JOB WITH VISIBLE ENEMIES
-Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=JobRoot_ChargerUnsafe)
-Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=NoVisibleEnemies, Child[2]=JobRoot_ChargerUnsafe)
+Behaviors=(BehaviorName=TryJobChargerUnsafe,  NodeType=Sequence, Child[0]=IsMyJob-Charger, Child[1]=NoVisibleEnemies, Child[2]=JobRoot_ChargerUnsafe)

; Deincentivize firing helpless, but do not entirely score them out. If a target is gigantically better, even the penalty will make you fire on it now.
; You'd have to have a target so good like, flanking close with a shotgun a bound unit good to pick over a better target.
-Behaviors=(BehaviorName=ScoreIfTargetBoundOrPanicked, NodeType=Sequence, Child[0]=IsTargetLastResortWithOtherOptionsAvailable, Child[1]=AddToTargetScore_-1000) 
+Behaviors=(BehaviorName=ScoreIfTargetBoundOrPanicked, NodeType=Sequence, Child[0]=IsTargetLastResortWithOtherOptionsAvailable, Child[1]=AddToTargetScore_-100) 

; HUNTING IS EXCLUSIVE TO NOT SEEING ANY ENEMIES
+Behaviors=(BehaviorName=ADVENTHuntEnemyWithCoverSeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=AFHuntEnemyWithCoverUnsafe)
+Behaviors=(BehaviorName=AFHuntEnemyWithCoverUnsafe, NodeType=Selector, Child[0]=MoveAdvanceToCoverUnsafe, Child[1]=TryAlertMoveWithCover, Child[2]=TakeAlertMoveWithoutCover)
+Behaviors=(BehaviorName=ADVENTHuntEnemySeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=HuntEnemyUnsafe)

; ZOMBIE RANDOM MOVEMENT IF NO ONE IS THERE
+Behaviors=(BehaviorName=MoveRandomUnsafeSeeNoOne, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=MoveRandomUnsafe)

; FLANKED = DEFENSIVE NOT OFFENSIVE POSITIONING
-Behaviors=(BehaviorName=FlankedMoveSelector, NodeType=Selector, Child[0]=MoveAdvanceToCoverLoSUnsafe, Child[1]=MoveAdvanceToCoverUnsafe, Child[2]=FallBack)
-Behaviors=(BehaviorName=FlankedMoveSelector, NodeType=Selector, Child[0]=FallBackWithLOS, Child[1]=FallBack, Child[2]=SelectMove_JobOrDefensive)
+Behaviors=(BehaviorName=FlankedMoveSelector, NodeType=Selector, Child[0]=FallBackWithLOS, Child[1]=FallBack, Child[2]=SelectMove_JobOrDefensive)

; STOP MOVING TO FLANKING POSITIONS GODDAMIT (FORCE UNFLANKED)
-Behaviors=(BehaviorName=MoveDefensiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestination-MWP_Defensive, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=MoveAggressiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-MWP_Aggressive, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=FallBackWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-MWP_FallBack, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=FallBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindBestFallbackDestination, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=HuntWithLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToEnemyLoS, Child[2]=FindDestination-MWP_Hunting)
-Behaviors=(BehaviorName=BestHuntDestinationWithoutLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=FindDestination-MWP_Hunting)
-Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestination-MWP_AdvanceCover, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveDefensiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindDestination-MWP_Defensive, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAggressiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindDestinationWithLoS-MWP_Aggressive, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FallBackWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindDestinationWithLoS-MWP_FallBack, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FallBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindBestFallbackDestination, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=HuntWithLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToEnemyLoS, Child[2]=RestrictToUnflanked, Child[3]=FindDestination-MWP_Hunting)
+Behaviors=(BehaviorName=BestHuntDestinationWithoutLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToUnflanked, Child[2]=FindDestination-MWP_Hunting)
+Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindDestination-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)

; PUNISH FLANKED ENEMIES FROM SAFETY
+Behaviors=(BehaviorName=ADVENTPunishFlankedEnemyFirstAction, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-StandardShot, Child[2]=FP_SelectFlankedEnemyTarget, Child[3]=ShootTargetChance50)
+Behaviors=(BehaviorName=ADVENTPunishFlankedEnemyLastAction, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-StandardShot, Child[2]=FP_SelectFlankedEnemyTarget, Child[3]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=FP_SelectFlankedEnemyTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FP_EvaluateFlankedEnemyTargets, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=FP_EvaluateFlankedEnemyTargets, NodeType=RepeatUntilFail, Child[0]=FP_EvaluateFlankedEnemies)
+Behaviors=(BehaviorName=FP_EvaluateFlankedEnemies, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=FP_SSScoreFlankedEnemy, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=FP_SSScoreFlankedEnemy, NodeType=Successor, Child[0]=FP_ScoreFlankedEnemy)
+Behaviors=(BehaviorName=FP_ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=GenericTargetEvaluations)

+Behaviors=(BehaviorName=ADVENTPistolPunishFlankedEnemyFirstAction, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-PistolStandardShot, Child[2]=FP_Pistol_SelectFlankedEnemyTarget, Child[3]=PistolShootTargetChance50)
+Behaviors=(BehaviorName=ADVENTPistolPunishFlankedEnemyLastAction, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-PistolStandardShot, Child[2]=FP_Pistol_SelectFlankedEnemyTarget, Child[3]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=PistolShootTargetChance50, NodeType=RandFilter, Child[0]=SelectAbility-PistolStandardShot, Param[0]=50)
+Behaviors=(BehaviorName=FP_Pistol_SelectFlankedEnemyTarget, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=FP_Pistol_EvaluateFlankedEnemyTargets, Child[2]=HasValidTarget-PistolStandardShot)
+Behaviors=(BehaviorName=FP_Pistol_EvaluateFlankedEnemyTargets, NodeType=RepeatUntilFail, Child[0]=FP_Pistol_EvaluateFlankedEnemies)
+Behaviors=(BehaviorName=FP_Pistol_EvaluateFlankedEnemies, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=FP_Pistol_SSScoreFlankedEnemy, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=FP_Pistol_SSScoreFlankedEnemy, NodeType=Successor, Child[0]=FP_Pistol_ScoreFlankedEnemy)
+Behaviors=(BehaviorName=FP_Pistol_ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=GenericTargetEvaluations)

; MARK TARGET BUMPS A BIT, NOT DRASTICALLY
-Behaviors=(BehaviorName=ScoreTargetIfMarked, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MarkedTarget, Child[1]=AddToTargetScore_45) ; bump a marked target up to the next aim tier with a bonus, over even a killshot
+Behaviors=(BehaviorName=ScoreTargetIfMarked, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MarkedTarget, Child[1]=AddToTargetScore_15)

; SUPPRESSION CONTROLLER
+Behaviors=(BehaviorName=SuppressIdealChanceFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-Suppression, Param[0]=33)

; BURNING CHECKS
+Behaviors=(BehaviorName=TryToRemoveBurning, NodeType=Selector, Child[0]=TryHunkerToCleanseBurnSafe, Child[1]=EmergencyBurnRemoval)
+Behaviors=(BehaviorName=AmIBurning, NodeType=Selector, Child[0]=AffectedByEffect-Burning)
+Behaviors=(BehaviorName=TryHunkerToCleanseBurnSafe, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsLastActionPoint, Child[2]=AmIBurning, Child[3]=BurningLowEnemyCount, Child[4]=AFDoCower)
+Behaviors=(BehaviorName=BurningLowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<=", Param[2]=3)
+Behaviors=(BehaviorName=EmergencyBurnRemoval, NodeType=Sequence, Child[0]=AmIBurning, Child[1]=HasLowHP, Child[2]=AFDoCower)

; NO COWERING IF LAST UNIT UNLESS YOU ARE ON FIRE
+Behaviors=(BehaviorName=AFDoCower, NodeType=Sequence, Child[0]=AFHunkerDownConditions, Child[1]=DoCower)
+Behaviors=(BehaviorName=AFHunkerDownConditions, NodeType=Selector, Child[0]=AmIBurning, Child[1]=IsNotLastAIUnit)

;*****************************************************************************************************************************************************************************************************
; TERROR AI REWORKED
;*****************************************************************************************************************************************************************************************************

; Shoot resistance members more over civilians. ADVENT ignored resistance by default, not sure why.
-Behaviors=(BehaviorName=ScoreTargetIfCivilianByJob, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=TargetNotTeamResistance, Child[2]=ScoreCivilianByJob)
+Behaviors=(BehaviorName=ScoreTargetIfCivilianByJob, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=ScoreCivilianByJob)

; Executioner jobs can ONLY be done if you do not see ANY valid enemies. Always prioritize XCOM over civilians. This is a counter to Civ killing sprees, move your units to their range.
-Behaviors=(BehaviorName=JobRoot_Executioner, NodeType=Sequence, Child[0]=TryExecutionerJob)
+Behaviors=(BehaviorName=JobRoot_Executioner, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=DisableTerrorKillsTurn1, Child[2]=TryExecutionerJob)

-Behaviors=(BehaviorName=JobRoot_Terrorist, NodeType=Sequence, Child[0]=NotYetRevealed, Child[1]=TryTerrorJobUnrevealed)
+Behaviors=(BehaviorName=JobRoot_Terrorist, NodeType=Sequence, Child[0]=NotYetRevealed, Child[1]=DisableTerrorKillsTurn1, Child[2]=TryTerrorJobUnrevealed)
+Behaviors=(BehaviorName=DisableTerrorKillsTurn1, NodeType=StatCondition, Param[0]=PlayerTurnCount, Param[1]=">", Param[2]=1)

-Behaviors=(BehaviorName=ScoreCivilianByJob, NodeType=Selector, Child[0]=ScoreCivilianIfExecutioner, Child[1]=ScoreCivilianIfLimitHit, Child[2]=ScoreCivilianIfActuallyFaceless, Child[3]=ScoreCivilianIfTerrorist)
+Behaviors=(BehaviorName=ScoreCivilianByJob, NodeType=Selector, Child[0]=ScoreCivilianIfXCOMVisible, Child[1]=ScoreCivilianIfLimitHit, Child[2]=ScoreCivilianIfActuallyFaceless, Child[3]=ScoreCivilianIfExecutioner, Child[4]=ScoreCivilianIfTerrorist)
-Behaviors=(BehaviorName=ScoreCivilianIfExecutioner, NodeType=Sequence, Child[0]=IsMyJob-Executioner, Child[1]=TargetIsNotAlien, Child[2]=AddToTargetScore_1000)
+Behaviors=(BehaviorName=ScoreCivilianIfExecutioner, NodeType=Sequence, Child[0]=IsMyJob-Executioner, Child[1]=CivOrResistanceCheck, Child[2]=NoVisibleEnemies, Child[3]=AddToTargetScore_80)
+Behaviors=(BehaviorName=ScoreCivilianIfXCOMVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=CivOrResistanceCheck, NodeType=Selector, Child[0]=IsTargetTeam-eTeam_Resistance, Child[1]=TargetIsCivilian)

;*****************************************************************************************************************************************************************************************************
; RESISTANCE MILITIA
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="CivilianMilitia::CharacterRoot", NodeType=Selector, Child[0]=CivilianMilitiaFirstAction, Child[1]=CivilianMilitiaLastAction, Child[2]=GenericAlertHandler)

-Behaviors=(BehaviorName=GenericTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreCivilian, Child[6]=AvoidBoundAndPanickedTargets)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName=IsTeam-eTeam_Resistance, NodeType=Condition)
+Behaviors=(BehaviorName=IsTargetTeam-eTeam_XCom, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsNotADVENTOrAlienOrLost, NodeType=Inverter, Child[0]=TargetIsADVENTOrAlienOrLost)
; The Chosen are considered aliens, but added just in case.
+Behaviors=(BehaviorName=TargetIsADVENTOrAlienOrLost, NodeType=Selector, Child[0]=TargetIsADVENT, Child[1]=TargetIsAlien, Child[2]=IsTargetTeam-eTeam_TheLost, Child[3]=TargetIsChosen)

+Behaviors=(BehaviorName=GenericTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreCivilian, Child[6]=AvoidBoundAndPanickedTargets, Child[7]=SSResistanceScoreOutInvalidTargets, Child[8]=SSResistanceScoreOutXCOMAllies)

; Resistance selective target acquisition to avoid firing on allies.
+Behaviors=(BehaviorName=SSResistanceScoreOutInvalidTargets, NodeType=Successor, Child[0]=ResistanceScoreOutInvalidTargets)
; Not ADVENT, Alien or Lost is invalid.
+Behaviors=(BehaviorName=ResistanceScoreOutInvalidTargets, NodeType=Sequence, Child[0]=IsTeam-eTeam_Resistance, Child[1]=TargetIsNotADVENTOrAlienOrLost, Child[2]=AddToTargetScore_-1000)

; In case XCOM has weird allies like aliens or mind controlled units on their side.
+Behaviors=(BehaviorName=SSResistanceScoreOutXCOMAllies, NodeType=Successor, Child[0]=ResistanceScoreOutXCOMAllies)
+Behaviors=(BehaviorName=ResistanceScoreOutXCOMAllies, NodeType=Sequence, Child[0]=IsTeam-eTeam_Resistance, Child[1]=IsTargetTeam-eTeam_XCom, Child[2]=AddToTargetScore_-1000)

; New militia root behaves more like regular units with red alert checks.
; If the unit is Not in Red Alert, it doesnt matter what state it is in it will Overwatch.
+Behaviors=(BehaviorName="CivilianMilitia::CharacterRoot", NodeType=Selector, Child[0]=CivilianMilitiaRedAlertActionCheck, Child[1]=TryOverwatch, Child[2]=DoCower, Child[3]=DoIfFlankedMove)
+Behaviors=(BehaviorName=CivilianMilitiaRedAlertActionCheck, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=CivilianMilitiaRedActionSelector)
+Behaviors=(BehaviorName=CivilianMilitiaRedActionSelector, NodeType=Selector, Child[0]=CivilianMilitiaRedFirstAction, Child[1]=CivilianMilitiaRedLastAction)

+Behaviors=(BehaviorName=CivilianMilitiaRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CivilianMilitiaRedFirstActionSelector)
+Behaviors=(BehaviorName=CivilianMilitiaRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=ConsiderSuppression, \\
	Child[2]=TryGrenade, \\
	Child[3]=NeedsReload, \\
	Child[4]=MoveDefensive, \\
	Child[5]=TryMilitiaPistol25, \\
	Child[6]=TryShootOrReloadOrOverwatch)

; Highlander tile selector fix will make the 2nd DoIfFlankedMove obsolete hopefully.
+Behaviors=(BehaviorName=CivilianMilitiaRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=CivilianMilitiaRedLastActionSelector)
+Behaviors=(BehaviorName=CivilianMilitiaRedLastActionSelector, NodeType=Selector, \\
	Child[0]=EmergencyBurnRemoval, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=ConsiderSuppression, \\
	Child[3]=TryGrenade, \\
	Child[4]=NeedsReload, \\
	Child[5]=TryMilitiaPistol33, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=TryOverwatch, \\
	Child[8]=TryPistolOverwatch, \\
	Child[9]=MoveDefensive, \\
	Child[10]=DoCower)

+Behaviors=(BehaviorName=TryMilitiaPistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectMilitiaTargetForPistolStandardShot, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectMilitiaTargetForPistolStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=MilitiaSelectBestTarget, Child[2]=HasValidTarget-PistolStandardShot)
+Behaviors=(BehaviorName=MilitiaSelectBestTarget, NodeType=RepeatUntilFail, Child[0]=MilitiaEvaluateTarget)
+Behaviors=(BehaviorName=MilitiaEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=MilitiaTargetEvaluations, Child[2]=UpdateBestTarget);
+Behaviors=(BehaviorName=MilitiaTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=SSScoreTargetOutIfCivilian, Child[6]=TargetScoreByScaledDistance-1)

+Behaviors=(BehaviorName=TryMilitiaPistol33, NodeType=RandFilter, Child[0]=TryMilitiaPistol, Param[0]=33)
+Behaviors=(BehaviorName=TryMilitiaPistol25, NodeType=RandFilter, Child[0]=TryMilitiaPistol, Param[0]=25)

;*****************************************************************************************************************************************************************************************************
; TROOPER AI
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=AdventRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=SelectMove_JobOrAggressive, \\
	Child[2]=TryMoveThenGrenade, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover)
   
-Behaviors=(BehaviorName=AdventRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenade, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrAggressive)
   
-Behaviors=(BehaviorName=AdvTrooper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=AdventRedFirstAction, Child[3]=AdventRedLastAction)
;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName=AdvTrooper_RedAbilitySelector, NodeType=Selector, Child[0]=AdventTrooperMimicBeaconBehavior, Child[1]=DarkEventPriorityMoveThenGrenade, Child[2]=AdventRedFirstAction, Child[3]=AdventRedLastAction)
+Behaviors=(BehaviorName=AdventTrooperMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=80)

+Behaviors=(BehaviorName=FindPotentialAoETargets-TrooperGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-TrooperGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-TrooperGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-TrooperGrenadeManyProfile, NodeType=Action)

+Behaviors=(BehaviorName=AdventRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryTrooperGrenadeMany, \\
	Child[2]=ADVENTPunishFlankedEnemyFirstAction, \\
	Child[3]=ShootIfIdeal, \\
	Child[4]=NeedsReload, \\
	Child[5]=TryTrooperSuppression, \\
	Child[6]=TryTwoTurnAttackSupportIfSafe, \\
	Child[7]=TryTrooperGrenadeSingle, \\
	Child[8]=MoveDefensive, \\
	Child[9]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[10]=TryToRemoveBurning, \\
	Child[11]=TryShootOrReloadOrOverwatch)

+Behaviors=(BehaviorName=AdventRedLastActionSelector, NodeType=Selector, \\
	Child[0]=EmergencyBurnRemoval, \\
	Child[1]=TryTrooperGrenadeMany, \\
	Child[2]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[3]=TryToRemoveBurning, \\
	Child[4]=ShootIfIdeal, \\
	Child[5]=TryTrooperSuppression, \\
	Child[6]=TryTwoTurnAttackSupportIfSafe, \\
	Child[7]=TryTrooperGrenadeSingle, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[10]=TryOverwatch, \\
	Child[11]=AFDoCower)

; Trooper Suppression.
+Behaviors=(BehaviorName=TryTrooperSuppression, NodeType=Selector, Child[0]=TryTrooperSuppressionSupported, Child[1]=TryTrooperSuppressClosest)
+Behaviors=(BehaviorName=TryTrooperSuppressClosest, NodeType=Sequence, Child[0]=TrooperSuppressionCondition, Child[1]=TrooperDoSuppression)
+Behaviors=(BehaviorName=TrooperDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=TrooperSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=TrooperOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=TrooperOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryTrooperSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=TrooperRandomSuppression)
+Behaviors=(BehaviorName=TrooperRandomSuppression, NodeType=RandFilter, Child[0]=TrooperDoSuppression, Param[0]=15)
; Grenading. Single grenading less often than muton, but slightly more with Dark Event.
+Behaviors=(BehaviorName=TryTrooperGrenadeMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-TrooperGrenadeManyProfile, Child[2]=SelectAoETarget-TrooperGrenadeManyProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryTrooperGrenadeSingle, NodeType=Sequence, Child[0]=IsAdvTrooperQualifiedForGrenade, Child[1]=TrooperSingleGrenadeCheck, Child[2]=FindPotentialAoETargets-TrooperGrenadeSingleProfile, Child[3]=SelectAoETarget-TrooperGrenadeSingleProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TrooperSingleGrenadeCheck, NodeType=Selector, Child[0]=CheckDarkEventTrooper, Child[1]=TrooperGrenadeSingleRegular)
+Behaviors=(BehaviorName=CheckDarkEventTrooper, NodeType=Sequence, Child[0]=DarkEventActive-DarkEvent_CollateralDamage, Child[1]=TrooperGrenadeSingleCollateralFilter)
+Behaviors=(BehaviorName=TrooperGrenadeSingleRegular, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=10)
+Behaviors=(BehaviorName=TrooperGrenadeSingleCollateralFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=25)
; Trooper can't grenade single below Classic difficulty.
+Behaviors=(BehaviorName=IsAdvTrooperQualifiedForGrenade, NodeType=Selector, Child[0]=IsDifficultyAboveNormal, Child[1]=NotAdvTrooperM1)
+Behaviors=(BehaviorName=NotAdvTrooperM1, NodeType=Inverter, Child[0]=TemplateNameIs-AdvTrooperM1)
+Behaviors=(BehaviorName=TemplateNameIs-AdvTrooperM1, NodeType=Condition)

;*****************************************************************************************************************************************************************************************************
; CAPTAIN AI
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=AdvCaptain_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMarkTargetOption, \\
	Child[2]=SelectMove_JobOrDefensive, \\
	Child[3]=AdvCaptainTryMoveThenGrenade, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)
   
-Behaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryMarkTargetOption, \\
	Child[1]=AdvCaptainTryGrenade, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrDefensive)
   
-Behaviors=(BehaviorName=AdvCaptain_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvCaptain_RedFirstAction, Child[2]=AdvCaptain_RedLastAction)
-Behaviors=(BehaviorName=IsAdvCaptainQualifiedForGrenade, NodeType=Selector, Child[0]=NotAdvCaptainM1, Child[1]=IsDifficultyAboveNormal)
;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=AdvCaptain_RedAbilitySelector, NodeType=Selector, Child[0]=CaptainMimicBeaconBehavior, Child[1]=AdvCaptain_RedFirstAction, Child[2]=AdvCaptain_RedLastAction)
+Behaviors=(BehaviorName=CaptainMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=60)

+Behaviors=(BehaviorName=FindPotentialAoETargets-CaptainGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-CaptainGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-CaptainGrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-CaptainGrenadeManyProfile, NodeType=Action)

+Behaviors=(BehaviorName=AdvCaptain_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryCaptainGrenadeMany, \\
    Child[2]=TryMarkTargetOption, \\
	Child[3]=CaptainRandomFlankPunishmentFirstActionMethod, \\
	Child[4]=TryCaptainPistolExecution, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=NeedsReload, \\
	Child[7]=CaptainRandomSuppression, \\
	Child[8]=TryTwoTurnAttackSupportIfSafe, \\
	Child[9]=TryCaptainGrenadeSingle, \\
	Child[10]=MoveStandard, \\
	Child[11]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[12]=TryToRemoveBurning, \\
	Child[13]=TryShootOrReloadOrOverwatch)

+Behaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=EmergencyBurnRemoval, \\
	Child[1]=TryCaptainGrenadeMany, \\
	Child[2]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[3]=TryToRemoveBurning, \\
	Child[4]=TryCaptainPistolExecution, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=TryCaptainSuppression, \\
	Child[7]=TryTwoTurnAttackSupportIfSafe, \\
	Child[8]=TryCaptainGrenadeSingle, \\
	Child[9]=TryShootOrReloadOrOverwatch, \\
	Child[10]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[11]=TryOverwatch, \\
	Child[12]=AFDoCower)

+Behaviors=(BehaviorName=SelectCaptainTargetForPistolStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-PistolStandardShot)

; Additional Enemy Perks: Lightning Hands/FanFire support. Visualization problems, disabled until fixed.
;+Behaviors=(BehaviorName=TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectCaptainTargetForPistolStandardShot, Child[2]=SelectAbility-LightningHands)
;+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)
;+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
;+Behaviors=(BehaviorName=TryFanFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-FanFire, Child[1]=SelectCaptainTargetForPistolStandardShot, Child[2]=SelectAbility-FanFire)
;+Behaviors=(BehaviorName=IsAbilityAvailable-FanFire, NodeType=Condition)
;+Behaviors=(BehaviorName=SelectAbility-FanFire, NodeType=Action)

;Mixup Pistol/Rifle flank punishment, for fun exclusively. This is not optimal unless the opponent is point blank. If you have Enemy Perks, this is actually more hurtful however.
+Behaviors=(BehaviorName=CaptainRandomFlankPunishmentFirstActionMethod, NodeType=RandSelector, Child[0]=ADVENTPunishFlankedEnemyFirstAction, Child[1]=ADVENTPistolPunishFlankedEnemyFirstAction)

; Kill shots only for pistol. This attacks ignores common Last Resort restrictions and considers valid targets that usually would not be considered. Bound or MCed for example.
+Behaviors=(BehaviorName=TryCaptainPistolExecution, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectCaptainTargetForExecutionStandardShot, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectCaptainTargetForExecutionStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=CaptainSelectBestExecutionTarget, Child[2]=HasValidTarget-PistolStandardShot)
+Behaviors=(BehaviorName=CaptainSelectBestExecutionTarget, NodeType=RepeatUntilFail, Child[0]=CaptainEvaluateExecutionTarget)
+Behaviors=(BehaviorName=CaptainEvaluateExecutionTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=CaptainExecutionTargetEvaluations, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=CaptainExecutionTargetEvaluations, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetScoreHitChance, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=TargetScoreHighestSoldierRank, Child[5]=ApplyDifficultyModifiers, Child[6]=TargetScoreCivilian, Child[7]=TargetScoreByScaledDistance-1)

; Captain Suppression.
+Behaviors=(BehaviorName=TryCaptainSuppression, NodeType=Selector, Child[0]=TryCaptainSuppressionSupported, Child[1]=TryCaptainSuppressClosest)
+Behaviors=(BehaviorName=TryCaptainSuppressClosest, NodeType=Sequence, Child[0]=CaptainSuppressionCondition, Child[1]=CaptainDoSuppression)
+Behaviors=(BehaviorName=CaptainDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=CaptainSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=CaptainOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=CaptainOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryCaptainSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=CaptainRandomSuppression)
+Behaviors=(BehaviorName=CaptainRandomSuppression, NodeType=RandFilter, Child[0]=CaptainDoSuppression, Param[0]=20)
; Grenading. Single grenading less often than muton, but slightly more with Dark Event.
+Behaviors=(BehaviorName=TryCaptainGrenadeMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-CaptainGrenadeManyProfile, Child[2]=SelectAoETarget-CaptainGrenadeManyProfile, Child[3]=SelectAbility-ThrowGrenade)
; CaptainM1 can't grenade single below Classic difficulty.
+Behaviors=(BehaviorName=IsAdvCaptainQualifiedForGrenade, NodeType=Selector, Child[0]=IsDifficultyAboveNormal, Child[1]=NotAdvCaptainM1)
+Behaviors=(BehaviorName=TryCaptainGrenadeSingle, NodeType=Sequence, Child[0]=IsAdvCaptainQualifiedForGrenade, Child[1]=CaptainSingleGrenadeCheck, Child[2]=FindPotentialAoETargets-CaptainGrenadeSingleProfile, Child[3]=SelectAoETarget-CaptainGrenadeSingleProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=CaptainSingleGrenadeCheck, NodeType=Selector, Child[0]=CheckDarkEventCaptain, Child[1]=CaptainGrenadeSingleRegular)
+Behaviors=(BehaviorName=CheckDarkEventCaptain, NodeType=Sequence, Child[0]=DarkEventActive-DarkEvent_CollateralDamage, Child[1]=CaptainGrenadeSingleCollateralFilter)
+Behaviors=(BehaviorName=CaptainGrenadeSingleRegular, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=15)
+Behaviors=(BehaviorName=CaptainGrenadeSingleCollateralFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=30)

;*****************************************************************************************************************************************************************************************************
; STUNLANCER AI
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=TryBendingReedPostStunLance, NodeType=Sequence, Child[0]=WasLastAbility-StunLance, Child[1]=TryBendingReedMovement)
-Behaviors=(BehaviorName=EvaluateTargetForStunLance, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth_HighFirst, Child[2]=TargetScoreMarked, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreCivilian, Child[5]=SSTeamSpecificModifiers)

-Behaviors=(BehaviorName=AdventSLFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryStunLance, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=SelectMove_JobOrMelee, \\
	Child[3]=TryMoveThenGrenade, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=AdventSLLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStunLance, \\
	Child[1]=TryBendingReedPostStunLance, \\
	Child[2]=TryGrenade, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrMelee)
   
-Behaviors=(BehaviorName=AdventSL_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventSLFirstAction, Child[2]=AdventSLLastAction)
;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=AdventSL_RedAbilitySelector, NodeType=Selector, Child[0]=StunLancerMimicBeaconBehavior, Child[1]=AdventSLFirstAction, Child[2]=AdventSLLastAction)
+Behaviors=(BehaviorName=StunLancerMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=70)

; Grenade profiles
+Behaviors=(BehaviorName=FindPotentialAoETargets-LancerGrenadeMassesProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-LancerGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-LancerGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-LancerGrenadeMassesProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-LancerGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-LancerGrenadeManyProfile, NodeType=Action)   
   
; Bending reed is now a fallback movement.
+Behaviors=(BehaviorName=TryBendingReedPostStunLance, NodeType=Sequence, Child[0]=WasLastAbility-StunLance, Child[1]=FallBackWithLoSUnsafe)   
+Behaviors=(BehaviorName=AdventSLFirstActionSelector, NodeType=Selector, \\
   Child[0]=SLStunLanceSelector, \\
   Child[1]=DoIfFlankedMove, \\
   Child[2]=TryLancerGrenadeMasses, \\
   Child[3]=ADVENTPunishFlankedEnemyFirstAction, \\
   Child[4]=TryLancerGrenadeMany, \\
   Child[5]=ShootIfIdeal, \\
   Child[6]=NeedsReload, \\
   Child[7]=TryTwoTurnAttackSupportIfSafe, \\
   Child[8]=MoveAggressive, \\
   Child[9]=TryLancerGrenadeFew, \\
   Child[10]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
   Child[11]=TryToRemoveBurning, \\
   Child[12]=TryShootOrReloadOrOverwatch)
   
+Behaviors=(BehaviorName=AdventSLLastActionSelector, NodeType=Selector, \\
   Child[0]=SLStunLanceSelector, \\
   Child[1]=TryBendingReedPostStunLance, \\
   Child[2]=TryLancerGrenadeMasses, \\
   Child[3]=ADVENTPunishFlankedEnemyLastAction, \\
   Child[4]=TryLancerGrenadeMany, \\
   Child[5]=TryToRemoveBurning, \\
   Child[6]=ShootIfIdeal, \\
   Child[7]=TryTwoTurnAttackSupportIfSafe, \\
   Child[8]=TryLancerGrenadeFew, \\
   Child[9]=TryLancerSuppression, \\
   Child[10]=TryShootOrReloadOrOverwatch, \\
   Child[11]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
   Child[12]=TryOverwatch, \\
   Child[13]=AFDoCower)

+Behaviors=(BehaviorName=EvaluateTargetForStunLance, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreMarked, Child[3]=TargetScoreHighestSoldierRank, Child[4]=AvoidBoundAndPanickedTargets, Child[5]=TargetScoreCivilian, Child[6]=SSTeamSpecificModifiers, Child[7]=AddToTargetScore_100, Child[8]=SSScoreTargetOutIfLost)
   
+Behaviors=(BehaviorName=SLStunLanceSelector, NodeType=Selector, Child[0]=StunLanceAttack, Child[1]=TryStunLanceFromSafety, Child[2]=TryStunLanceSingleTarget, Child[3]=TryStunLanceIfSupported)
; First check: Stun Lance from cover with double adjacent non flanked tiles. Usually from a tree with a side fence.
+Behaviors=(BehaviorName=TryStunLanceFromSafety, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=StunLanceAttack)
; Lone targets get priority always.
+Behaviors=(BehaviorName=TryStunLanceSingleTarget, NodeType=Sequence, Child[0]=LancerOneEnemyVisible, Child[1]=TryStunLance75)
+Behaviors=(BehaviorName=LancerOneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
; Try stunlancing either with a lot of allies or low enemy count at any time. This is somewhat more risky.
+Behaviors=(BehaviorName=TryStunLanceIfSupported, NodeType=Sequence, Child[0]=TryMoveForStunLanceSupported)
; Stun Lance if supported.
+Behaviors=(BehaviorName=TryMoveForStunLanceSupported, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=StunLancerLowEnemyCountOrHighAllyCount, Child[2]=StunLancerLanceHPThreshold, Child[3]=TryStunLance75)
+Behaviors=(BehaviorName=TryStunLance75, NodeType=RandFilter, Child[0]=TryStunlance, Param[0]=75)
+Behaviors=(BehaviorName=TryStunLance50, NodeType=RandFilter, Child[0]=TryStunlance, Param[0]=50)
+Behaviors=(BehaviorName=TryStunLance33, NodeType=RandFilter, Child[0]=TryStunlance, Param[0]=33)
+Behaviors=(BehaviorName=TryStunLance25, NodeType=RandFilter, Child[0]=TryStunlance, Param[0]=25)
+Behaviors=(BehaviorName=StunLancerLanceHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="70%")
+Behaviors=(BehaviorName=StunLancerLowEnemyCountOrHighAllyCount, NodeType=Selector, Child[0]=StunLancerManyAlliesVisible, Child[1]=StunLancerLowEnemyCount)
+Behaviors=(BehaviorName=StunLancerManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=StunLancerLowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<=", Param[2]=2)

; Lancer Suppression.
+Behaviors=(BehaviorName=TryLancerSuppression, NodeType=Selector, Child[0]=TryLancerSuppressionSupported, Child[1]=TryLancerSuppressClosest)
+Behaviors=(BehaviorName=TryLancerSuppressClosest, NodeType=Sequence, Child[0]=LancerSuppressionCondition, Child[1]=LancerDoSuppression)
+Behaviors=(BehaviorName=LancerDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=LancerSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=LancerOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=LancerOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryLancerSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=LancerRandomSuppression)
+Behaviors=(BehaviorName=LancerRandomSuppression, NodeType=RandFilter, Child[0]=LancerDoSuppression, Param[0]=1)
; Grenading.
+Behaviors=(BehaviorName=TryLancerGrenadeMasses, NodeType=Sequence, Child[0]=IsAdvLancerQualifiedForGrenade, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-LancerGrenadeMassesProfile, Child[3]=SelectAoETarget-LancerGrenadeMassesProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryLancerGrenadeMany, NodeType=Sequence, Child[0]=IsAdvLancerQualifiedForGrenade, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-LancerGrenadeManyProfile, Child[3]=SelectAoETarget-LancerGrenadeManyProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryLancerGrenadeFew, NodeType=Sequence, Child[0]=IsAdvLancerQualifiedForGrenade, Child[1]=LancerFewGrenadeCheck, Child[2]=FindPotentialAoETargets-LancerGrenadeFewProfile, Child[3]=SelectAoETarget-LancerGrenadeFewProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=LancerFewGrenadeCheck, NodeType=Selector, Child[0]=CheckDarkEventLancer, Child[1]=LancerGrenadeFewRegular)
+Behaviors=(BehaviorName=CheckDarkEventLancer, NodeType=Sequence, Child[0]=DarkEventActive-DarkEvent_CollateralDamage, Child[1]=LancerGrenadeFewCollateralFilter)
+Behaviors=(BehaviorName=LancerGrenadeFewRegular, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=5)
+Behaviors=(BehaviorName=LancerGrenadeFewCollateralFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-ThrowGrenade, Param[0]=15)
; LancerM1 can't grenade single below Classic difficulty.
+Behaviors=(BehaviorName=IsAdvLancerQualifiedForGrenade, NodeType=Selector, Child[0]=IsDifficultyAboveNormal, Child[1]=NotAdvStunlancerM1)
+Behaviors=(BehaviorName=NotAdvStunlancerM1, NodeType=Inverter, Child[0]=TemplateNameIs-AdvStunlancerM1)
+Behaviors=(BehaviorName=TemplateNameIs-AdvStunlancerM1, NodeType=Condition)

;*****************************************************************************************************************************************************************************************************
; SHIELDBEARER AI
;*****************************************************************************************************************************************************************************************************
+Behaviors=(BehaviorName=FindPotentialAoETargets-ShieldbearerGrenadeSomeProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ShieldbearerGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ShieldbearerGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ShieldbearerGrenadeSomeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ShieldbearerGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ShieldbearerGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=AffectedByEffect-EnergyShield, NodeType=Condition)

-Behaviors=(BehaviorName=ShieldBearerFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveForEnergyShield, \\
	Child[1]=TryEnergyShieldOnMultipleTargets, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=SelectMove_JobOrDefensive, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=ShieldBearerLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnAnyTarget, \\
	Child[1]=TryShootOrReloadOrOverwatch,  \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrDefensive)
   
-Behaviors=(BehaviorName=AdvShieldBearer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ShieldBearerFirstAction, Child[2]=ShieldBearerLastAction)

-Behaviors=(BehaviorName=TryEnergyShieldOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-EnergyShield, Child[1]=HasMultipleEnergyShieldTargets, Child[2]=SelectAbility-EnergyShield)
-Behaviors=(BehaviorName=TryEnergyShieldOnAnyTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-EnergyShield, Child[1]=HasAnyEnergyShieldTargets, Child[2]=SelectAbility-EnergyShield)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=TryEnergyShieldOnMultipleTargets, NodeType=Sequence, Child[0]=SBNotShielded, Child[1]=IsAbilityAvailable-EnergyShield, Child[2]=HasMultipleEnergyShieldTargets, Child[3]=SelectAbility-EnergyShield)
+Behaviors=(BehaviorName=TryEnergyShieldOnAnyTarget, NodeType=Sequence, Child[0]=SBNotShielded, Child[1]=IsAbilityAvailable-EnergyShield, Child[2]=HasAnyEnergyShieldTargets, Child[3]=SelectAbility-EnergyShield)

+Behaviors=(BehaviorName=AdvShieldBearer_RedAbilitySelector, NodeType=Selector, Child[0]=ShieldbearerMimicBeaconBehavior, Child[1]=ShieldBearerFirstAction, Child[2]=ShieldBearerLastAction)
+Behaviors=(BehaviorName=ShieldbearerMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=30)

+Behaviors=(BehaviorName=ShieldBearerFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMoveForEnergyShield, \\
	Child[2]=TryEnergyShieldOnMultipleTargets, \\
	Child[3]=TryShieldbearerGrenadeMany, \\
	Child[4]=TryAFAdventMedikitOnAnyTarget, \\
	Child[5]=TryShieldbearerGrenadeSome, \\
	Child[6]=TryShieldbearerGrenadeFew, \\
	Child[7]=ADVENTPunishFlankedEnemyFirstAction, \\
	Child[8]=ShootIfIdeal, \\
	Child[9]=NeedsReload, \\
	Child[10]=ShieldbearerRandomSuppression, \\
	Child[11]=TryTwoTurnAttackSupportIfSafe, \\
	Child[12]=TryShieldbearerGrenadeSome, \\
	Child[13]=ShieldbearerMovementSelector, \\
	Child[14]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[15]=TryToRemoveBurning, \\
	Child[16]=FallBackWithLoS)
   
+Behaviors=(BehaviorName=ShieldBearerLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnMultipleTargets, \\
	Child[1]=EmergencyBurnRemoval, \\
	Child[2]=TryShieldbearerGrenadeMany, \\
	Child[3]=TryAFAdventMedikitOnAnyTarget, \\
	Child[4]=TryToRemoveBurning, \\
	Child[5]=TryShieldbearerGrenadeSome, \\
	Child[6]=TryShieldbearerGrenadeFew, \\
	Child[7]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[8]=ShootIfIdeal, \\
	Child[9]=TryShieldbearerSuppression, \\
	Child[10]=TryTwoTurnAttackSupportIfSafe, \\
	Child[11]=TryShootOrReloadOrOverwatch, \\
    Child[12]=TryEnergyShieldOnAnyTarget, \\
	Child[13]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[14]=TryOverwatch, \\
	Child[15]=AFDoCower)
   
; Shieldbearer Falls back if Energy Shield is active. If not, move defensive.   
+Behaviors=(BehaviorName=ShieldbearerMovementSelector, NodeType=Selector, Child[0]=ShieldedMovementCheck, Child[1]=MoveDefensive)  
+Behaviors=(BehaviorName=ShieldedMovementCheck, NodeType=Sequence, Child[0]=AffectedByEffect-EnergyShield, Child[1]=FallBack)
+Behaviors=(BehaviorName=AffectedByEffect-EnergyShield, NodeType=Condition)
+Behaviors=(BehaviorName=SBNotShielded, NodeType=Inverter, Child[0]=AffectedByEffect-EnergyShield)
   
; Many: 2 Minimum Enemies, 4 Minimum Allies.
+Behaviors=(BehaviorName=TryShieldbearerGrenadeMany, NodeType=Sequence, Child[0]=ShieldbearerMinimumEnemyCountCheck, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-ShieldbearerGrenadeManyProfile, Child[3]=SelectAoETarget-ShieldbearerGrenadeManyProfile, Child[4]=SelectAbility-ThrowGrenade)
; Some: 2 Minimum Enemies, 3 Minimum Allies
+Behaviors=(BehaviorName=TryShieldbearerGrenadeSome, NodeType=Sequence, Child[0]=ShieldbearerMinimumEnemyCountCheck, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-ShieldbearerGrenadeSomeProfile, Child[3]=SelectAoETarget-ShieldbearerGrenadeSomeProfile, Child[4]=SelectAbility-ThrowGrenade)
; Few: 2 Minimum Enemies + [50% Or less HP OR Not Shielded], 2 Minimum allies. If you are alone you're probably better off Cowering instead of smoking anyway.
+Behaviors=(BehaviorName=TryShieldbearerGrenadeFew, NodeType=Sequence, Child[0]=ShieldbearerMinimumEnemyCountCheck, Child[1]=ShieldbearerFewGrenadeCheck, Child[2]=IsAbilityAvailable-ThrowGrenade, Child[3]=FindPotentialAoETargets-ShieldbearerGrenadeFewProfile, Child[4]=SelectAoETarget-ShieldbearerGrenadeFewProfile, Child[5]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=ShieldbearerFewGrenadeCheck, NodeType=Selector, Child[0]=ShieldbearerHPCheck, Child[1]=ShieldbearerShieldedCheck)
+Behaviors=(BehaviorName=ShieldbearerHPCheck, NodeType=Sequence, Child[0]=IsBloodied)
+Behaviors=(BehaviorName=ShieldbearerShieldedCheck, NodeType=Sequence, Child[0]=SBNotShielded)

; Shieldbearer Suppression.
+Behaviors=(BehaviorName=TryShieldbearerSuppression, NodeType=Selector, Child[0]=TryShieldbearerSuppressionSupported, Child[1]=TryShieldbearerSuppressClosest)
+Behaviors=(BehaviorName=TryShieldbearerSuppressClosest, NodeType=Sequence, Child[0]=ShieldbearerSuppressionCondition, Child[1]=ShieldbearerDoSuppression)
+Behaviors=(BehaviorName=ShieldbearerDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=ShieldbearerSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=ShieldbearerOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=ShieldbearerOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryShieldbearerSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=ShieldbearerRandomSuppression)
+Behaviors=(BehaviorName=ShieldbearerRandomSuppression, NodeType=RandFilter, Child[0]=ShieldbearerDoSuppression, Param[0]=25)

+Behaviors=(BehaviorName=ShieldbearerMinimumEnemyCountCheck, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">=", Param[2]=2)

;*****************************************************************************************************************************************************************************************************
; ADVENT MEC AI (MERGED)
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="AdventMEC::CharacterRoot", NodeType=Selector, Child[0]=MecMk1Branch, Child[1]=AdvMECMk2_Root)
-Behaviors=(BehaviorName=MecMk1Branch, NodeType=Sequence, Child[0]=TemplateNameIs-AdvMEC_M1, Child[1]=AdvMEC_Root)

-Behaviors=(BehaviorName=MECFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissiles, \\
	Child[1]=SelectNCMove_JobOrFanatic, \\
	Child[2]=HuntEnemy, \\
	Child[3]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=MECRedLastActionSelector, NodeType=Selector,\\
	Child[0]=TryMicroMissiles, \\
	Child[1]=ShootOrSuppressIfNoGoodShot, \\
	Child[2]=HuntEnemy, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=AdvMECMk2_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECMk2RedAlert, Child[3]=GenericAlertHandler)
-Behaviors=(BehaviorName=MECMk2RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MECMk2RedAbilitySelector)
-Behaviors=(BehaviorName=MECMk2RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MECMk2RedFirstAction, Child[2]=MECMk2RedLastAction)
   
-Behaviors=(BehaviorName=MECMk2RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MECMk2FirstActionSelector)
-Behaviors=(BehaviorName=MECMk2FirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissilesMk2, \\
	Child[1]=SelectNCMove_JobOrFanatic, \\
	Child[2]=HuntEnemy, \\
	Child[3]=TryShootOrReloadOrOverwatch)
	
-Behaviors=(BehaviorName=MECMk2RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MECMk2RedLastActionSelector)
-Behaviors=(BehaviorName=MECMk2RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryMicroMissilesMk2, \\
	Child[1]=ShootOrSuppressIfNoGoodShot, \\
	Child[2]=HuntEnemy, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=MECRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MECFirstActionSelector)

-Behaviors=(BehaviorName=MECRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MECRedFirstAction, Child[2]=MECRedLastAction)
;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName=MECRedAbilitySelector, NodeType=Selector, Child[0]=ADVMECMimicBeaconBehavior, Child[1]=MECRedFirstAction, Child[2]=MECRedLastAction)
+Behaviors=(BehaviorName=ADVMECMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=50)

; Single MEC Root.   
+Behaviors=(BehaviorName="AdventMEC::CharacterRoot", NodeType=Selector, Child[0]=AdvMEC_Root)
+Behaviors=(BehaviorName=TryMicroMissilesMany, NodeType=Sequence, Child[0]=MECMicroMissilesManyFilter, Child[1]=FindPotentialAoETargets-MicroMissilesProfileMany, Child[2]=SelectAoETarget-MicroMissilesProfileMany, Child[3]=SelectAbility-MicroMissiles)
+Behaviors=(BehaviorName=TryMicroMissilesFew, NodeType=Sequence, Child[0]=MECMicroMissilesFewFilter, Child[1]=FindPotentialAoETargets-MicroMissilesProfileFew, Child[2]=SelectAoETarget-MicroMissilesProfileFew, Child[3]=SelectAbility-MicroMissiles)

+Behaviors=(BehaviorName=SelectAoETarget-MicroMissilesProfileMany, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MicroMissilesProfileFew, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MicroMissilesProfileMany, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MicroMissilesProfileFew, NodeType=Action)

+Behaviors=(BehaviorName=MECMicroMissilesManyFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-MicroMissiles, Param[0]=80)
+Behaviors=(BehaviorName=MECMicroMissilesFewFilter, NodeType=RandFilter, Child[0]=IsAbilityAvailable-MicroMissiles, Param[0]=40)
   
+Behaviors=(BehaviorName=MECRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MECRedFirstActionSelector)
+Behaviors=(BehaviorName=MECRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=TryMicroMissilesMany, \\
   Child[1]=ADVENTPunishFlankedEnemyFirstAction, \\
   Child[2]=ShootIfIdeal, \\
   Child[3]=TryMicroMissilesFew, \\
   Child[4]=NeedsReload, \\
   Child[5]=AdvMecRandomSuppression, \\
   Child[6]=TryTwoTurnAttackSupportIfSafe, \\
   Child[7]=SelectNCMove_JobOrFanatic, \\
   Child[8]=TryShootOrReloadOrOverwatch, \\
   Child[9]=ADVENTHuntEnemySeeNoOne)

+Behaviors=(BehaviorName=MECRedLastActionSelector, NodeType=Selector, \\
   Child[0]=TryMicroMissilesMany, \\
   Child[1]=ADVENTPunishFlankedEnemyLastAction, \\
   Child[2]=ShootIfIdeal, \\
   Child[3]=TryMicroMissilesFew, \\
   Child[4]=TryAdvMecSuppression, \\
   Child[5]=TryTwoTurnAttackSupportIfSafe, \\
   Child[6]=TryShootOrReloadOrOverwatch, \\
   Child[7]=SelectNCMove_JobOrFanatic, \\
   Child[8]=ADVENTHuntEnemySeeNoOne, \\
   Child[9]=TryOverwatch, \\
   Child[10]=SelectNCMove_JobOrFanatic)

; MEC Suppression.
+Behaviors=(BehaviorName=TryAdvMecSuppression, NodeType=Selector, Child[0]=TryAdvMecSuppressionSupported, Child[1]=TryAdvMecSuppressClosest)
+Behaviors=(BehaviorName=TryAdvMecSuppressClosest, NodeType=Sequence, Child[0]=AdvMecSuppressionCondition, Child[1]=AdvMecDoSuppression)
+Behaviors=(BehaviorName=AdvMecDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=AdvMecSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=AdvMecOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=AdvMecOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryAdvMecSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=AdvMecRandomSuppression)
+Behaviors=(BehaviorName=AdvMecRandomSuppression, NodeType=RandFilter, Child[0]=AdvMecDoSuppression, Param[0]=10)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; Small adjustment for FERAL MECs
;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-Behaviors=(BehaviorName="FeralMEC::CharacterRoot", NodeType=Selector, Child[0]=SkipIfUnrevealed, Child[1]=TryOverloadBranch, Child[2]=FeralMECMk2RedAlert, Child[3]=GenericAlertHandler)

-Behaviors=(BehaviorName=FeralMECMk2RedLastActionSelector, NodeType=Selector, \\
	Child[0]=FeralMecShootOrSuppress, \\
	Child[1]=HuntEnemy, \\
	Child[2]=MoveNoCover, \\
	Child[3]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=FeralMECMk2FirstActionSelector, NodeType=Selector, \\
	Child[0]=MoveNoCover, \\
	Child[1]=HuntEnemy, \\
	Child[2]=TryShootOrReloadOrOverwatch)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

; If you are ready to blow up, do it regardless of conditions. If not, check for damage and get ready to blow up. If all's good, just act like a robot.
+Behaviors=(BehaviorName="FeralMEC::CharacterRoot", NodeType=Selector, Child[0]=TryExplodeIfPrimedNotLastAction, Child[1]=CriticalHPDoOverload, Child[2]=TryJob, Child[3]=GenericGreenMovement, Child[4]=FeralMECMk2RedAlert, Child[5]=GenericAlertHandler)

+Behaviors=(BehaviorName=FeralMECMk2FirstActionSelector, NodeType=Selector, \\
   Child[0]=ADVENTPunishFlankedEnemyFirstAction, \\
   Child[1]=ShootIfIdeal, \\
   Child[2]=NeedsReload, \\
   Child[3]=SelectNCMove_JobOrFanatic, \\
   Child[4]=TryFeralMECSuppression, \\
   Child[5]=TryTwoTurnAttackSupportIfSafe, \\
   Child[6]=TryShootOrReloadOrOverwatch, \\
   Child[7]=ADVENTHuntEnemySeeNoOne)

+Behaviors=(BehaviorName=FeralMECMk2RedLastActionSelector, NodeType=Selector, \\
   Child[0]=ADVENTPunishFlankedEnemyLastAction, \\
   Child[1]=ShootIfIdeal, \\
   Child[2]=NeedsReload, \\
   Child[3]=TryFeralMECSuppression, \\
   Child[4]=TryTwoTurnAttackSupportIfSafe, \\
   Child[5]=TryShootOrReloadOrOverwatch, \\
   Child[6]=SelectNCMove_JobOrFanatic, \\
   Child[7]=ADVENTHuntEnemySeeNoOne, \\
   Child[8]=TryOverwatch, \\
   Child[9]=MoveRandomUnsafe)

; Engage now costs 1 AP so after engaging self destruct you should never use it here by default.
+Behaviors=(BehaviorName=TryExplodeIfPrimedNotLastAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ExplodeIfPrimed)
; Don't self-destruct without visible targets. No suiciding if you are the last unit.
+Behaviors=(BehaviorName=CriticalHPDoOverload, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=IsRedAlert, Child[2]=AnyLivingEnemyVisible, Child[3]=FeralMECIsNotLastAIUnit, Child[4]=TryOverloadBranch)
+Behaviors=(BehaviorName=FeralMECIsNotLastAIUnit, NodeType=Inverter, Child[0]=IsLastAIUnit)

; Feral MEC Suppression.
+Behaviors=(BehaviorName=TryFeralMECSuppression, NodeType=Selector, Child[0]=TryFeralMECSuppressionSupported, Child[1]=TryFeralMECSuppressClosest)
+Behaviors=(BehaviorName=TryFeralMECSuppressClosest, NodeType=Sequence, Child[0]=FeralMECSuppressionCondition, Child[1]=FeralMECDoSuppression)
+Behaviors=(BehaviorName=FeralMECDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=FeralMECSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=FeralMECOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=FeralMECOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryFeralMECSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=FeralMECRandomSuppression)
+Behaviors=(BehaviorName=FeralMECRandomSuppression, NodeType=RandFilter, Child[0]=FeralMECDoSuppression, Param[0]=10)

;*****************************************************************************************************************************************************************************************************
; ADVENT TURRET AI + LOST TURRETS
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="AdventTurret::CharacterRoot", NodeType=Selector, Child[0]=Turret_RedAlert, Child[1]=SkipMove) ; , Child[1]=TryOverwatch)
-Behaviors=(BehaviorName=Turret_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=TurretRedAbilitySelector)

-Behaviors=(BehaviorName=TurretRedAbilitySelector, NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=TurretRedFirstActionSelector, \\
	Child[2]=ConsiderTakingOverwatch)

-Behaviors=(BehaviorName=TurretRedFirstActionSelector, NodeType=Sequence, \\
	Child[0]=NotLastActionPoint, \\
	Child[1]=Turret_TryShootOrReload)

-Behaviors=(BehaviorName=Turret_TryShootOrReload, NodeType=Selector, Child[0]=Turret_ShootIfAvailable, Child[1]=NeedsReload)

-Behaviors=(BehaviorName=Turret_ShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=Turret_SelectTargetForStandardShot, Child[2]=SelectAbility-StandardShot)

-Behaviors=(BehaviorName=Turret_SelectTargetForStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=TurretSelectBestTarget, Child[2]=HasValidTarget-StandardShot)
-Behaviors=(BehaviorName=TurretSelectBestTarget, NodeType=RepeatUntilFail, Child[0]=TurretEvaluateTarget)
-Behaviors=(BehaviorName=TurretEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChance, Child[2]=GenericScoreTargetRandomly, Child[3]=TargetScoreInvalidateCivilians, Child[4]=TargetScoreInvalidatePriorityObject, Child[5]=UpdateBestTarget)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName="AdventTurret::CharacterRoot", NodeType=Selector, Child[0]=Turret_RedAlert, Child[1]=Turret_OrangeAlert, Child[2]=SkipMove)
+Behaviors=(BehaviorName=Turret_RedAlert, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=TurretFirstAction, Child[2]=TurretLastAction, Child[3]=TryOverwatch)

+Behaviors=(BehaviorName=TurretFirstAction, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=NotLastActionPoint, Child[2]=TurretFirstActionSelector)
+Behaviors=(BehaviorName=TurretFirstActionSelector, NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=TurretFlankShotPriority, \\
	Child[2]=ShootIfIdeal, \\
	Child[3]=ShootIfAvailable_Favorable, \\
	Child[4]=ShootIfAvailable)

; The last ShootIfAvailable is if the Turret is being suppressed, then just shoot anything.
+Behaviors=(BehaviorName=TurretLastAction, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=IsLastActionPoint, Child[2]=TurretLastActionSelector)
+Behaviors=(BehaviorName=TurretLastActionSelector, NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=TurretFlankShotPriority, \\
	Child[2]=ShootIfIdeal, \\
	Child[3]=ShootIfAvailable_Favorable, \\
	Child[4]=TryOverwatch, \\
	Child[5]=ShootIfAvailable)

+Behaviors=(BehaviorName=Turret_OrangeAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=HasRevealed, Child[2]=TryOverwatch)
; Copy of the Beaglerush code.
+Behaviors=(BehaviorName=TurretFlankShotPriority, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget, Child[2]=SelectAbility-StandardShot)

;*****************************************************************************************************************************************************************************************************
; ADVENT PURIFIER AI
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="AdventPurifier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PurifierRedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
-Behaviors=(BehaviorName=PurifierRedAlert, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=SelectPurifierAbility)
-Behaviors=(BehaviorName=SelectPurifierAbility, NodeType=Selector,			Child[0]=SelectPreselectedAbility, 			Child[1]=FlameThrowerPriorityOption, 			Child[2]=TryMoveThenGrenade, 			Child[3]=TryMoveThenFlameThrower, 			Child[4]=TryFlankedMoveThenFlameThrower,			Child[5]=DoIfFlankedMove, 			Child[6]=SelectMove_JobOrDefensive, 			Child[7]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=FindPotentialAoETargets-FlameThrowerProfile, NodeType=Action, Param[0]=Burning)
-Behaviors=(BehaviorName=FindPotentialAoETargets-FlameThrowerMultiProfile, NodeType=Action, Param[0]=Burning)
-Behaviors=(BehaviorName=FindPotentialAoETargets-FlameThrowerLostTargetProfile, NodeType=Action, Param[0]=Burning)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FlameThrowerProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FlameThrowerMultiProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FlameThrowerLostTargetProfile, NodeType=Action)

+Behaviors=(BehaviorName="AdventPurifier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PurifierRedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
+Behaviors=(BehaviorName=PurifierRedAlert, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=AdvPurifier_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvPurifier_RedAbilitySelector, NodeType=Selector, Child[0]=PurifierMimicBeaconBehavior, Child[1]=AdventPurifierRedFirstAction, Child[2]=AdventPurifierRedLastAction)
+Behaviors=(BehaviorName=PurifierMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=70)

+Behaviors=(BehaviorName=AdventPurifierRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdventPurifierRedFirstActionSelector)
+Behaviors=(BehaviorName=AdventPurifierRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=PurifierFlankedMovementSelector, \\
   Child[1]=FlameThrowerIfPriorityTargets, \\
   Child[2]=TryFlameThrower, \\
   Child[3]=TryGrenade, \\
   Child[4]=AFHuntEnemyWithCoverUnsafe, \\
   Child[5]=MoveAdvanceToCoverUnsafe, \\
   Child[6]=SelectHeatSeekMoveNoDash)
; I don't like using Heat Seek here, but it should never be executed as the commands before will. It's used as a FailSafe "Please move your ass" command to prevent lockouts by the AI if the commands fail.

+Behaviors=(BehaviorName=AdventPurifierRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdventPurifierRedLastActionSelector)
+Behaviors=(BehaviorName=AdventPurifierRedLastActionSelector, NodeType=Selector, \\
   Child[0]=FlameThrowerIfPriorityTargets, \\
   Child[1]=TryGrenade, \\
   Child[2]=TryFlameThrower, \\
   Child[3]=TryPurifierPistol, \\
   Child[4]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
   Child[5]=PurifierFailsafeActions, \\
   Child[6]=AFDoCower)

+Behaviors=(BehaviorName=PurifierFailsafeActions, NodeType=Selector, Child[0]=TryPurifierPistol, Child[1]=TryPistolOverwatch, Child[2]=FlameThrower_Anything, Child[3]=MoveAdvanceToCoverUnsafe)
+Behaviors=(BehaviorName=PurifierFlankedMovementSelector, NodeType=Sequence, Child[0]=IsFlanked, Child[1]=MoveAdvanceToCoverUnsafe)
+Behaviors=(BehaviorName=TryPurifierPistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectPurifierTargetForPistolStandardShot, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectPurifierTargetForPistolStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=PurifierSelectBestTarget, Child[2]=HasValidTarget-PistolStandardShot)
+Behaviors=(BehaviorName=PurifierSelectBestTarget, NodeType=RepeatUntilFail, Child[0]=PurifierEvaluateTarget)
+Behaviors=(BehaviorName=PurifierEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=PurifierTargetEvaluations, Child[2]=UpdateBestTarget);
+Behaviors=(BehaviorName=PurifierTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreCivilian, Child[6]=TargetScoreByScaledDistance-1)
+Behaviors=(BehaviorName=PurifierHuntEnemyWithCoverUnsafe, NodeType=Sequence, Child[0]=SetAlertDataStack, Child[1]=GenericSelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=AlertDataMovementUseCover, Child[4]=MoveStandardWithDestination)

;*****************************************************************************************************************************************************************************************************
; ADVENT SECTOPOD AI
;*****************************************************************************************************************************************************************************************************
; SECTOPOD Distributor is disabled
-Behaviors=(BehaviorName="Sectopod::DistributeAttacks", NodeType=Selector, Child[0]=ScoreIfTargetHasBeenAttackedTwice, Child[1]=ScoreIfTargetHasBeenAttackedOnce, Child[2]=AddToTargetScore_30)

-Behaviors=(BehaviorName="Sectopod::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectopodRedAlert, Child[3]=GenericAlertHandler)
-Behaviors=(BehaviorName=SectopodFirstActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TryLightningField, \\
	Child[3]=TryFirstMoveTowardVisibleEnemies50, \\
	Child[4]=ShootIfAvailable, \\
	Child[5]=TryWrathCannonS166, \\
	Child[6]=TryMoveForLightningField, \\
	Child[7]=MoveNoCover, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemy)

-Behaviors=(BehaviorName=SectopodSecondActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TryLightningField, \\
	Child[3]=TryMoveTowardVisibleEnemies50, \\
	Child[4]=TryWrathCannonS166, \\
	Child[5]=TryMoveForLightningField, \\
	Child[6]=MoveNoCoverIfNotMoved, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemy)

-Behaviors=(BehaviorName=SectopodRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryWrathCannonS1, \\
	Child[2]=TryLightningField, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy)

;-Behaviors=(BehaviorName=TryWrathCannonS166, NodeType=RandFilter, Child[0]=TryWrathCannon, Param[0]=66)
-Behaviors=(BehaviorName=SectopodCannonCharging, NodeType=Sequence, Child[0]=AffectedByEffect-WrathCannonStage1Effect, Child[1]=SectopodChargingSelector)
-Behaviors=(BehaviorName=SectopodChargingSelector, NodeType=Selector, Child[0]=TryShootOrReloadIfNotLastActionPoint, Child[1]=Overwatch50IfLastAction, Child[2]=TryShootOrReloadOrOverwatch, Child[3]=SkipMove)
-Behaviors=(BehaviorName=Overwatch50IfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RandOverwatch50)
-Behaviors=(BehaviorName=TryShootOrReloadIfNotLastActionPoint, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=TryShootOrReload)
-Behaviors=(BehaviorName=TryLightningField, NodeType=Sequence, Child[0]=IsAbilityAvailable-SectopodLightningField, Child[1]=HasAnyLightningFieldTargets, Child[2]=SelectAbility-SectopodLightningField)

-Behaviors=(BehaviorName=HasAnyLightningFieldTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-SectopodLightningField, Param[1]=">", Param[2]=1); >1 because it always sets itself as the primary target.
;-Behaviors=(BehaviorName=TryFirstMoveTowardVisibleEnemies50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=TryMoveForLightningField50)
;-Behaviors=(BehaviorName=TryMoveTowardVisibleEnemies50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=DidntJustMove, Child[2]=TryMoveForLightningField50)
;-Behaviors=(BehaviorName=TryMoveForLightningField50, NodeType=RandFilter, Child[0]=TryMoveForLightningField, Param[0]=50)
;-Behaviors=(BehaviorName=TryMoveForLightningField, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=SafeToMove, Child[2]=IsAbilityReady-SectopodLightningField, Child[3]=MoveStandardIfFirstAbility-LightningField, Child[4]=MoveMeleeFANATICUnsafe)
;-Behaviors=(BehaviorName=MoveStandardIfFirstAbility-LightningField, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindLightningFieldDestination, Child[3]=SelectAbility-StandardMove)
;-Behaviors=(BehaviorName=FindLightningFieldDestination, NodeType=Sequence, Child[0]=SelectTargetForLightningField, Child[1]=ResetDestinationSearch, Child[2]=RestrictToAbilityRange-SectopodLightningField, Child[3]=RestrictToEnemyLoS, Child[4]=FindRestrictedDestination-MWP_Standard)
;-Behaviors=(BehaviorName=SelectTargetForLightningField, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectBestPotentialTargetForMelee, Child[2]=HasValidTarget-Potential)
;-Behaviors=(BehaviorName=RestrictToAbilityRange-SectopodLightningField, NodeType=Action)

-Behaviors=(BehaviorName=SectopodRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectopodRedFirstAction, Child[2]=SectopodRedSecondAction, Child[3]=SectopodRedLastAction)

-Behaviors=(BehaviorName=TryWrathCannon, NodeType=Failer, Child[0]=IsAbilityAvailable-WrathCannon)
;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName="Sectopod::CharacterRoot", NodeType=Selector, Child[0]=SectopodUnrevealedForcedCrouch, Child[1]=TryJob, Child[2]=GenericGreenMovement, Child[3]=SectopodRedAlert, Child[4]=GenericAlertHandler)
+Behaviors=(BehaviorName="Sectopod::DistributeAttacks", NodeType=Selector, Child[0]=AddToTargetScore_30)

+Behaviors=(BehaviorName=SectopodRedAbilitySelector, NodeType=Selector, Child[0]=SectopodMimicBeaconBehavior, Child[1]=SectopodRedFirstAction, Child[2]=SectopodRedSecondAction, Child[3]=SectopodRedLastAction)
+Behaviors=(BehaviorName=SectopodMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=50)

+Behaviors=(BehaviorName=HasAnyLightningFieldTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-SectopodLightningField, Param[1]=">", Param[2]=1)
+Behaviors=(BehaviorName=MoveNoCover33NotMoved, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=MoveNoCover33)
+Behaviors=(BehaviorName=MoveNoCover33, NodeType=RandFilter, Child[0]=MoveNoCoverUnsafe, Param[0]=33)
+Behaviors=(BehaviorName=SectopodMoveNoCover50, NodeType=RandFilter, Child[0]=MoveNoCoverUnsafe, Param[0]=50)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SectopodLightningFieldProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SectopodLightningFieldProfile, NodeType=Action)

; Ok so the way were going to determine if you should Lightning Field we are going to count ALL units within 4 tiles of the Sectopod. If you find 1, it's valid.
; Once that is checked, we are going to count Allies within 4 tiles. If it finds ANY allies, the ability is instantly aborted. Setcopod is under strict friendly fire rules.
+Behaviors=(BehaviorName=TargetDistanceLessOrEqualThan4Tiles, NodeType=StatCondition, Param[0]=PotentialTargetDistance, Param[1]="<=", Param[2]=6); 6m = 4 tiles
+Behaviors=(BehaviorName=TryLightningField, NodeType=Sequence, Child[0]=IsAbilityAvailable-SectopodLightningField, Child[1]=AbortLFIfAlliesAround, Child[2]=SelectPotentialLFTarget, Child[3]=SelectAbility-SectopodLightningField)
; We're now going to pretend that we're searching for a target and evaluating score, but in reality were only really interested in distance and enemy/ally status.
+Behaviors=(BehaviorName=SelectPotentialLFTarget, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectBestPotentialTargetForLF, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SelectBestPotentialTargetForLF, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialLFTarget)
+Behaviors=(BehaviorName=EvaluatePotentialLFTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSectopodScoreCloseEnemyLF, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSectopodScoreCloseEnemyLF, NodeType=Successor, Child[0]=SectopodScoreCloseEnemyLF)
+Behaviors=(BehaviorName=SectopodScoreCloseEnemyLF, NodeType=Sequence, Child[0]=TargetDistanceLessOrEqualThan4Tiles, Child[1]=IsTargetTeam-eTeam_XCOM, Child[2]=AddToTargetScore_100)

; This is valid only if HasValidTarget with Aliens as a criteria returns false. No allies allowed.
+Behaviors=(BehaviorName=AbortLFIfAlliesAround, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectWorstPotentialTargetForLF, Child[2]=ReversedHasValidTargetLF)
+Behaviors=(BehaviorName=SelectWorstPotentialTargetForLF, NodeType=RepeatUntilFail, Child[0]=EvaluateWorstLFTarget)
+Behaviors=(BehaviorName=EvaluateWorstLFTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSectopodScoreCloseAllyLF, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSectopodScoreCloseAllyLF, NodeType=Successor, Child[0]=SectopodScoreCloseAllyLF)
+Behaviors=(BehaviorName=SectopodScoreCloseAllyLF, NodeType=Sequence, Child[0]=TargetDistanceLessOrEqualThan4Tiles, Child[1]=IsTargetTeam-eTeam_Alien, Child[2]=AddToTargetScore_100)
+Behaviors=(BehaviorName=ReversedHasValidTargetLF, NodeType=Inverter, Child[0]=HasValidTarget-Potential)

+Behaviors=(BehaviorName=SectopodFirstActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp, \\
	Child[2]=NeedsReload, \\
	Child[3]=TryLightningField, \\
	Child[4]=ADVENTPunishFlankedEnemyFirstAction, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=SectopodMoveNoCover50, \\
	Child[7]=TryShootOrReload, \\
	Child[8]=ADVENTHuntEnemySeeNoOne, \\
	Child[9]=ShootIfAvailable, \\
	Child[10]=MoveNoCoverUnsafe)

+Behaviors=(BehaviorName=SectopodSecondActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryLightningField, \\
	Child[3]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[4]=ShootIfIdeal, \\
	Child[5]=MoveNoCover33NotMoved, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=ADVENTHuntEnemySeeNoOne, \\
	Child[8]=ShootIfAvailable, \\
	Child[9]=MoveNoCoverUnsafe)

+Behaviors=(BehaviorName=SectopodRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryWrathCannonSometimes, \\
	Child[2]=NeedsReload, \\
	Child[3]=TryLightningField, \\
	Child[4]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=TryWrathCannon, \\
	Child[8]=TryOverwatch, \\
	Child[9]=ADVENTHuntEnemySeeNoOne, \\
	Child[10]=ShootIfAvailable)

+Behaviors=(BehaviorName=FindPotentialAoETargets-WrathCannonS1ManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-WrathCannonS1ManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-WrathCannonS1FewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-WrathCannonS1FewProfile, NodeType=Action)

+Behaviors=(BehaviorName=TryWrathCannon, NodeType=Selector, Child[0]=TryWrathCannonMany, Child[1]=TryWrathCannonFew)
+Behaviors=(BehaviorName=TryWrathCannonSometimes, NodeType=RandFilter, Child[0]=TryWrathCannon, Param[0]=33)
+Behaviors=(BehaviorName=TryWrathCannonMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-WrathCannonStage1, Child[1]=CannonNotCharging, Child[2]=FindPotentialAoETargets-WrathCannonS1ManyProfile, Child[3]=SelectAoETarget-WrathCannonS1ManyProfile, Child[4]=SelectAbility-WrathCannonStage1)
+Behaviors=(BehaviorName=TryWrathCannonFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-WrathCannonStage1, Child[1]=CannonNotCharging, Child[2]=FindPotentialAoETargets-WrathCannonS1FewProfile, Child[3]=SelectAoETarget-WrathCannonS1FewProfile, Child[4]=SelectAbility-WrathCannonStage1)
+Behaviors=(BehaviorName=SectopodCannonCharging, NodeType=Sequence, Child[0]=AffectedByEffect-WrathCannonStage1Effect, Child[1]=TryShootOrReload)

;*****************************************************************************************************************************************************************************************************
; JULIAN USES SECTOPOD
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=JulianFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=JulianFirstActionSelector)
-Behaviors=(BehaviorName=JulianFirstActionSelector, NodeType=Selector,\\
	Child[0]=TryStandUp,\\
	Child[1]=TryFirstMoveTowardVisibleEnemies50, \\
	Child[2]=ShootIfAvailable, \\
	Child[3]=MoveNoCover, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemy)
-Behaviors=(BehaviorName=JulianSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=JulianSecondActionSelector)
-Behaviors=(BehaviorName=JulianSecondActionSelector, NodeType=Selector,\\
	Child[0]=TryStandUp,\\
	Child[1]=TryMoveTowardVisibleEnemies50, \\
	Child[2]=MoveNoCoverIfNotMoved, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy)
-Behaviors=(BehaviorName=JulianLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=JulianLastActionSelector)
-Behaviors=(BehaviorName=JulianLastActionSelector, NodeType=Selector, \\
	Child[0]=TryShootOrReloadOrOverwatch, \\
	Child[1]=HuntEnemy)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

; Hijack Julian's root, insert the Sectopod code. Congratulations, you are now a dangerous boss.
+Behaviors=(BehaviorName=JulianFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=SectopodFirstActionSelector)
+Behaviors=(BehaviorName=JulianSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectopodSecondActionSelector)
+Behaviors=(BehaviorName=JulianLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectopodRedLastActionSelector)

;*****************************************************************************************************************************************************************************************************
; ZOMBIE AI + MELEE DASH
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName="PsiZombie::CharacterRoot", NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=SpectralZombieBranch, \\
	Child[2]=GenericEnemyMeleeRootFANATIC)

-Behaviors=(BehaviorName="SpectralZombie::CharacterRoot", NodeType=Selector, Child[0]=SelectFromSpectralZombieAbilities)

;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName="PsiZombie::CharacterRoot", NodeType=Selector, Child[0]=ZombieMimicBeaconBehavior, Child[1]=TryPsiSelfDestructSeeEnemies, Child[2]=TryJobUnsafe, Child[3]=GenericGreenMovement, Child[4]=ZombieMeleeRedAlert, Child[5]=GenericAlertHandler)
+Behaviors=(BehaviorName=ZombieMeleeRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Zombie_RedAbilitySelector)
+Behaviors=(BehaviorName=Zombie_RedAbilitySelector, NodeType=Selector, Child[0]=ZombieRedFirstAction, Child[1]=ZombieRedLastAction)

+Behaviors=(BehaviorName=ZombieRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ZombieRedFirstActionSelector)
+Behaviors=(BehaviorName=ZombieRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=TryPsiSelfDestructSeeEnemies, \\
	Child[1]=StandardMeleeAttack, \\
	Child[2]=MoveMeleeFANATICUnsafe, \\
	Child[3]=MoveRandomUnsafeSeeNoOne)

+Behaviors=(BehaviorName=ZombieRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ZombieRedLastActionSelector)
+Behaviors=(BehaviorName=ZombieRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryPsiSelfDestructSeeEnemies, \\
	Child[1]=StandardMeleeAttack, \\
	Child[2]=MoveMeleeFANATICUnsafe, \\
	Child[3]=MoveRandomUnsafeSeeNoOne)

+Behaviors=(BehaviorName=TryPsiSelfDestructSeeEnemies, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AmIASpectralZombie, Child[2]=TryPsiSelfDestruct)

+Behaviors=(BehaviorName=AmIASpectralZombie, NodeType=Selector, Child[0]=TemplateNameIs-SpectralZombieM1, Child[1]=TemplateNameIs-SpectralZombieM2, Child[2]=TemplateNameIs-SpectralZombieM3, Child[3]=TemplateNameIs-SpectralZombieM4)
+Behaviors=(BehaviorName=TemplateNameIs-SpectralZombieM2, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-SpectralZombieM3, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-SpectralZombieM4, NodeType=Condition)

+Behaviors=(BehaviorName=ZombieMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=90)

; Spectral Zombie is now just a copy of the regular zombie, with extra abilities.
+Behaviors=(BehaviorName="SpectralZombie::CharacterRoot", NodeType=Selector, Child[0]="PsiZombie::CharacterRoot")

;*****************************************************************************************************************************************************************************************************
; ADVENT PRIEST AI
;*****************************************************************************************************************************************************************************************************

-Behaviors=(BehaviorName=SelectPriestAbility, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=HolyWarriorActiveBranch, Child[2]=HolyWarriorInactiveBranch, Child[3]=TryShootOrReload, Child[4]=SkipMove)
-Behaviors=(BehaviorName=TryHolyWarrior, NodeType=Sequence, Child[0]=IsAbilityAvailable-HolyWarrior, Child[1]=NotApplyingHolyWarrior, Child[2]=SelectTargetForHolyWarrior, Child[3]=SelectAbility-HolyWarrior) 

-Behaviors=(BehaviorName=HolyWarriorInactiveBranch, NodeType=Selector, Child[0]=MoveDefensiveWithLoSIfFirstAbility, Child[1]=RandSelectFromPriestAbilities)
-Behaviors=(BehaviorName=HolyWarriorActiveSelector, NodeType=Selector, \\
	Child[0]=HighCoverFallbackFirstMove, \\
	Child[1]=HighCoverFallbackPostHolyWarrior, \\
	Child[2]=RandSelectFromPriestAbilities, \\
	Child[3]=HighCoverFallback)

+Behaviors=(BehaviorName=SelectPriestAbility, NodeType=Selector, Child[0]=PriestMimicBeaconBehavior, Child[1]=HolyWarriorActiveBranch, Child[2]=HolyWarriorInactiveBranch, Child[3]=TryShootOrReload, Child[4]=SkipMove)
+Behaviors=(BehaviorName=PriestMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=15)

+Behaviors=(BehaviorName=FindPotentialAoETargets-PriestGrenadeSomeProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-PriestGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-PriestGrenadeSomeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-PriestGrenadeManyProfile, NodeType=Action)
   
+Behaviors=(BehaviorName=HolyWarriorInactiveBranch, NodeType=Selector, \\
   Child[0]=HighCoverFallbackPostHolyWarrior, \\
   Child[1]=DoIfFlankedMove, \\
   Child[2]=EmergencyBurnRemoval, \\
   Child[3]=LotsOfEnemiesRetreat, \\
   Child[4]=TryHolyWarriorSupported, \\
   Child[5]=TryPriestPsiMindControlLoneTarget, \\
   Child[6]=TryStasisLoneTargetAndSupported, \\
   Child[7]=TryAFAdventMedikitOnAnyTarget, \\
   Child[8]=TryToRemoveBurning, \\
   Child[9]=TryPriestGrenadeMany, \\
   Child[10]=ADVENTPunishFlankedEnemyFirstAction, \\
   Child[11]=ShootIfIdeal, \\
   Child[12]=NeedsReload, \\
   Child[13]=TryStasisLotsOfEnemies, \\
   Child[14]=TryPsiMindControl, \\
   Child[15]=TryPriestSuppression, \\
   Child[16]=TryTwoTurnAttackSupportIfSafe, \\
   Child[17]=TryPriestGrenadeSome, \\
   Child[18]=MoveDefensiveWithLoSIfFirstAbility, \\
   Child[19]=TryShootOrReloadOrOverwatch, \\
   Child[20]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
   Child[21]=TryOverwatch, \\
   Child[22]=AFDoCower)

+Behaviors=(BehaviorName=HolyWarriorActiveSelector, NodeType=Selector, \\
    Child[0]=HighCoverFallbackPostHolyWarrior, \\
    Child[1]=DoIfFlankedMove, \\
	Child[2]=EmergencyBurnRemoval, \\
	Child[3]=LotsOfEnemiesRetreat, \\
    Child[4]=TryAFAdventMedikitOnAnyTarget, \\
    Child[5]=TryPriestPsiMindControlLoneTarget, \\
    Child[6]=TryStasisLoneTargetAndSupported, \\
	Child[7]=PriestRandomFallback, \\
	Child[8]=TryToRemoveBurning, \\
	Child[9]=TryPriestGrenadeMany, \\
	Child[10]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[11]=ShootIfIdeal, \\
    Child[12]=TryStasisLotsOfEnemies, \\
    Child[13]=TryPsiMindControl, \\
	Child[14]=TryPriestSuppression, \\
	Child[15]=TryTwoTurnAttackSupportIfSafe, \\
	Child[16]=TryPriestGrenadeSome, \\
	Child[17]=MoveDefensiveWithLoSIfFirstAbility, \\
	Child[18]=TryShootOrReloadOrOverwatch, \\
	Child[19]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[20]=TryOverwatch, \\
	Child[21]=AFDoCower)

+Behaviors=(BehaviorName=IsNotLastAIUnit, NodeType=Inverter, Child[0]=IsLastAIUnit)

+Behaviors=(BehaviorName=TryHolyWarriorSupported, NodeType=Sequence, Child[0]=PriestManyAllies, Child[1]=TryHolyWarriorSometimes)
+Behaviors=(BehaviorName=PriestManyAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=LotsOfEnemiesRetreat, NodeType=Sequence, Child[0]=PriestManyEnemies, Child[1]=PriestLowAllies, Child[2]=IsNotLastAIUnit, Child[3]=NotLastActionPoint, Child[4]=TryHighCoverFallbackOptions)
+Behaviors=(BehaviorName=PriestManyEnemies, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=3)
+Behaviors=(BehaviorName=PriestLowAllies, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]="<=", Param[2]=1)
+Behaviors=(BehaviorName=TryPriestPsiMindControlLoneTarget, NodeType=Sequence, Child[0]=PriestOneEnemyVisible, Child[1]=TryPsiMindControl)
+Behaviors=(BehaviorName=PriestOneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)
+Behaviors=(BehaviorName=TryStasisLoneTargetAndSupported, NodeType=Sequence, Child[0]=PriestManyAllies, Child[1]=PriestOneEnemyVisible, Child[2]=TryStasis)
+Behaviors=(BehaviorName=TryStasisLotsOfEnemies, NodeType=Sequence, Child[0]=PriestManyEnemies, Child[1]=TryStasisSometimes)
+Behaviors=(BehaviorName=TryStasisSometimes, NodeType=RandFilter, Child[0]=TryStasis, Param[0]=30)
+Behaviors=(BehaviorName=TryHolyWarriorSometimes, NodeType=RandFilter, Child[0]=TryHolyWarrior, Param[0]=30)
+Behaviors=(BehaviorName=PriestRandomFallback, NodeType=RandFilter, Child[0]=TryHighCoverFallbackOptions, Param[0]=30)
+Behaviors=(BehaviorName=TryHolyWarrior, NodeType=Sequence, Child[0]=IsAbilityAvailable-HolyWarrior, Child[1]=NotApplyingHolyWarrior, Child[2]=HolyWarriorHPThreshold, Child[3]=SelectTargetForHolyWarrior, Child[4]=SelectAbility-HolyWarrior) 
+Behaviors=(BehaviorName=HolyWarriorHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="50%")

; Priest Suppression
+Behaviors=(BehaviorName=TryPriestSuppression, NodeType=Selector, Child[0]=TryPriestSuppressionSupported, Child[1]=TryPriestSuppressClosest)
+Behaviors=(BehaviorName=TryPriestSuppressClosest, NodeType=Sequence, Child[0]=PriestSuppressionCondition, Child[1]=PriestDoSuppression)
+Behaviors=(BehaviorName=PriestDoSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=SelectTargetForSuppression, Child[2]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=PriestSuppressionCondition, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=PriestOneOrMoreOverwatchingTeammates, Child[3]=SuppressIdealChanceFilter)
+Behaviors=(BehaviorName=PriestOneOrMoreOverwatchingTeammates, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">=", Param[2]="1", Param[3]="1")
+Behaviors=(BehaviorName=TryPriestSuppressionSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=MultipleEnemiesVisible, Child[2]=PriestRandomSuppression)
+Behaviors=(BehaviorName=PriestRandomSuppression, NodeType=RandFilter, Child[0]=PriestDoSuppression, Param[0]=25)

; Priest grenade
+Behaviors=(BehaviorName=TryPriestGrenadeMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-PriestGrenadeManyProfile, Child[2]=SelectAoETarget-PriestGrenadeManyProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryPriestGrenadeSome, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-PriestGrenadeSomeProfile, Child[2]=SelectAoETarget-PriestGrenadeSomeProfile, Child[3]=SelectAbility-ThrowGrenade)

;*****************************************************************************************************************************************************************************************************
; ADVENT GENERAL - RUN FOREST RUN
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=CheckTurnCountMinimumForEvac, NodeType=StatCondition, Param[0]=PlayerTurnCount, Param[1]=">", Param[2]=3)
+Behaviors=(BehaviorName=CheckTurnCountMinimumForEvac, NodeType=StatCondition, Param[0]=PlayerTurnCount, Param[1]=">", Param[2]=0)

;*****************************************************************************************************************************************************************************************************
; SCAMPER ROOTS
;*****************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=GenericScamperRoot, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveStandardWithLoSUnsafe, \\
		Child[2]=MoveStandardUnsafe, \\
		Child[3]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_Soldier, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveDefensiveWithLoSUnsafe, \\
		Child[2]=MoveStandardUnsafe, \\
		Child[3]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_Flanker, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveFlankingUnsafe, \\
		Child[2]=MoveStandardWithLoSUnsafe, \\
		Child[3]=MoveStandardUnsafe, \\
		Child[4]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_NoCover, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveNoCoverUnsafe, \\
		Child[2]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_Overwatch, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=OverwatchIfTargetAvailable, \\
		Child[2]=MoveNoCoverUnsafe, \\
		Child[3]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_MeleeNoCover, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveMeleeFANATICUnsafe, \\
		Child[2]=MoveNoCoverUnsafe, \\
		Child[3]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_NoShotChance, NodeType=Selector, \\
		Child[0]=MoveDefensiveWithLoSUnsafe, \\
		Child[1]=MoveStandardUnsafe, \\
		Child[2]=SkipMove)

+Behaviors=(BehaviorName=FindDestination-MWP_ScamperFallBack, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_ScamperFallBack, NodeType=Action)

; New: Try with Hazards Ignored to prevent landing in acid freeze move.
+Behaviors=(BehaviorName=TryRandomScamperOverwatch, NodeType=RandFilter, Child[0]=OverwatchIfTargetAvailable, Param[0]=50)
+Behaviors=(BehaviorName=MoveNoCoverUnsafeIH, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=SetNoCoverMovement, Child[4]=FindDestination-MWP_Fanatic, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FallBackUnsafeIH, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindBestFallbackDestination, Child[4]=SelectAbility-StandardMove)
; Generic Root (Soldier kept for Legacy, uses same code)
+Behaviors=(BehaviorName=GenericScamperRoot, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=ScamperFallBackWithLoSUnsafe, Child[2]=ScamperFallBackUnsafe, Child[3]=MoveDefensiveUnsafe, Child[4]=FallBackUnsafeIH, Child[5]=AFDoCower, Child[6]=TryOverwatch)
+Behaviors=(BehaviorName=ScamperRoot_Soldier, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=ScamperFallBackWithLoSUnsafe, Child[2]=ScamperFallBackUnsafe, Child[3]=MoveDefensiveUnsafe, Child[4]=FallBackUnsafeIH, Child[5]=AFDoCower, Child[6]=TryOverwatch)
; Archon, Faceless, Gatekeeper, Sectopod
+Behaviors=(BehaviorName=ScamperRoot_NoCover, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=SectopodForceCrouchDown, Child[2]=MoveNoCoverUnsafe, Child[3]=MoveRandomUnsafe, Child[4]=MoveNoCoverUnsafeIH, Child[5]=TryOverwatch)
; ADVENT MECs (Flanker kept for Legacy, uses the same code)
+Behaviors=(BehaviorName=ScamperRoot_Flanker, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=TryRandomScamperOverwatch, Child[2]=MoveNoCoverUnsafe, Child[3]=MoveRandomUnsafe, Child[4]=MoveNoCoverUnsafeIH, Child[5]=TryOverwatch)
+Behaviors=(BehaviorName=ScamperRoot_Overwatch, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=TryRandomScamperOverwatch, Child[2]=MoveNoCoverUnsafe, Child[3]=MoveRandomUnsafe, Child[4]=MoveNoCoverUnsafeIH, Child[5]=TryOverwatch)
; Berserker, Chryssalid
+Behaviors=(BehaviorName=ScamperRoot_MeleeNoCover, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=MoveMeleeFANATICUnsafe, Child[2]=MoveNoCoverUnsafe, Child[3]=MoveRandomUnsafe, Child[4]=MoveNoCoverUnsafeIH, Child[5]=SkipMove)
; Shadowbind Unit, no reason not to use generic scamper.
+Behaviors=(BehaviorName=ScamperRoot_NoShotChance, NodeType=Selector, Child[0]=GenericScamperRoot)

+Behaviors=(BehaviorName=ScamperFallBackWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=OverrideIdealRange-18, Child[3]=RestrictToUnflanked, Child[4]=FindDestinationWithLoS-MWP_ScamperFallBack, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ScamperFallBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=OverrideIdealRange-18, Child[3]=RestrictToUnflanked, Child[4]=FindDestination-MWP_ScamperFallBack, Child[5]=SelectAbility-StandardMove)

; Sectopod should stay down at all times outside of Red Alert.
+Behaviors=(BehaviorName=SectopodUnrevealedForcedCrouch, NodeType=Sequence, Child[0]=SectopodCrouchConditions, Child[1]=SectopodForceCrouchDown)
+Behaviors=(BehaviorName=SectopodCrouchConditions, NodeType=Selector, Child[0]=NotRedAlert, Child[1]=NotYetRevealed)

-Behaviors=(BehaviorName=IsAbilityAvailable-SectopodLow, NodeType=Condition)
-Behaviors=(BehaviorName=SelectAbility-SectopodLow, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-SectopodLow, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SectopodLow, NodeType=Action)

+Behaviors=(BehaviorName=SectopodForceCrouchDown, NodeType=Sequence, Child[0]=IsAbilityAvailable-SectopodLow, Child[1]=SelectAbility-SectopodLow)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MEDIKIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ---------------- NeedToHeal -- use both medkit abilities --------------------------------------------

+EquivalentAbilities=( KeyName=AFAdventMedikit, EquivalentAbilityName[0]=MedikitHeal, EquivalentAbilityName[1]=NanoMedikitHeal)

; ---------------- AFAdventMedikit behaviours --------------------------------------------

+Behaviors=(BehaviorName=IsAbilityAvailable-AFAdventMedikit, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AFAdventMedikit, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AFAdventMedikit, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AFAdventMedikit, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-AFAdventMedikit, NodeType=Action)

+Behaviors=(BehaviorName=TryAFAdventMedikitOnAnyTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-AFAdventMedikit, Child[1]=SelectTargetForAFAdventMedikit, Child[2]=SelectAbility-AFAdventMedikit)

+Behaviors=(BehaviorName=SelectTargetForAFAdventMedikit, NodeType=Sequence, Child[0]=SetTargetStack-AFAdventMedikit, Child[1]=SelectBestTargetForAFAdventMedikit, Child[2]=HasValidTarget-AFAdventMedikit)
+Behaviors=(BehaviorName=SelectBestTargetForAFAdventMedikit, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsAFAdventMedikit)
+Behaviors=(BehaviorName=EvaluateTargetsAFAdventMedikit, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreAFAdventMedikit, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetScoreAFAdventMedikit, NodeType=Sequence, Child[0]=AFTypeConditions, Child[1]=SSAFScoreIfDying, Child[2]=SSAFScoreIfBloodied, Child[3]=SSAFScoreIfWounded, Child[4]=SSTargetScoreMindControlledAlly, Child[5]=AddToTargetScore_0)
+Behaviors=(BehaviorName=AFTypeConditions, NodeType=Sequence, Child[0]=AFTargetAlienOrADVENT, Child[1]=AFTargetIsNotRobotic, Child[2]=TargetIsAlly)
+Behaviors=(BehaviorName=AFTargetIsNotRobotic, NodeType=Inverter, Child[0]=TargetIsRobotic)
+Behaviors=(BehaviorName=AFTargetAlienOrADVENT, NodeType=Selector, Child[0]=TargetIsAdvent, Child[1]=TargetIsAlien)
+Behaviors=(BehaviorName=TargetWoundedEnough, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="70%")
+Behaviors=(BehaviorName=TargetIsBloodied, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="50%")
+Behaviors=(BehaviorName=SSTargetScoreMindControlledAlly, NodeType=Successor, Child[0]=TargetScoreMindControlledAlly)

; 30 for just wounded 30%.
+Behaviors=(BehaviorName=SSAFScoreIfWounded, NodeType=Successor, Child[0]=AFScoreIfWounded)
+Behaviors=(BehaviorName=AFScoreIfWounded, NodeType=Sequence, Child[0]=TargetWoundedEnough, Child[1]=AddToTargetScore_30)
; Bloodied is added to Wounded, so 30+20=50%
+Behaviors=(BehaviorName=SSAFScoreIfBloodied, NodeType=Successor, Child[0]=AFScoreIfBloodied)
+Behaviors=(BehaviorName=AFScoreIfBloodied, NodeType=Sequence, Child[0]=TargetIsBloodied, Child[1]=AddToTargetScore_20)
; Dying is all 3 together (30+20+30=80). More than 70 to show urgency.
+Behaviors=(BehaviorName=SSAFScoreIfDying, NodeType=Successor, Child[0]=AFScoreIfDying)
+Behaviors=(BehaviorName=AFScoreIfDying, NodeType=Sequence, Child[0]=TargetHasLowHP, Child[1]=AddToTargetScore_30)
;;; ADVENT AVENGER BONUS
+Behaviors=(BehaviorName="AdventAvenger::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvAvenger_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvAvenger_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvAvenger_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvAvenger_RedAbilitySelector, NodeType=Selector, Child[0]=AvengerMimicBeaconBehavior, Child[1]=AdvAvenger_RedFirstAction, Child[2]=AdvAvenger_RedLastAction)
+Behaviors=(BehaviorName=AvengerMimicBeaconBehavior, NodeType=RandFilter, Child[0]=MimicBeaconBehavior, Param[0]=10)

+Behaviors=(BehaviorName=AdvAvenger_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvAvenger_RedFirstActionSelector)
+Behaviors=(BehaviorName=AdvAvenger_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=AATryAFAdventMedikitOnAnyTargetSupported, \\
    Child[1]=AAStunLanceSelector, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=TryCaptainGrenadeMany, \\
	Child[4]=TryAFAdventMedikitOnAnyTarget, \\
    Child[5]=TryMarkTargetOption, \\
	Child[6]=CaptainRandomFlankPunishmentFirstActionMethod, \\
	Child[7]=TryCaptainPistolExecution, \\
	Child[8]=ShootIfIdeal, \\
	Child[9]=NeedsReload, \\
	Child[10]=CaptainRandomSuppression, \\
	Child[11]=TryTwoTurnAttackSupportIfSafe, \\
	Child[12]=TryCaptainGrenadeSingle, \\
	Child[13]=MoveStandard, \\
	Child[14]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[15]=TryToRemoveBurning, \\
	Child[16]=TryShootOrReloadOrOverwatch)

+Behaviors=(BehaviorName=AdvAvenger_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvAvenger_RedLastActionSelector)
+Behaviors=(BehaviorName=AdvAvenger_RedLastActionSelector, NodeType=Selector, \\
    Child[0]=AAStunLanceSelector, \\
    Child[1]=TryBendingReedPostStunLance, \\
	Child[2]=AATryAFAdventMedikitOnAnyTargetSupported, \\
	Child[3]=EmergencyBurnRemoval, \\
	Child[4]=TryCaptainGrenadeMany, \\
	Child[5]=ADVENTPunishFlankedEnemyLastAction, \\
	Child[6]=TryAFAdventMedikitOnAnyTarget, \\
	Child[7]=TryToRemoveBurning, \\
	Child[8]=TryCaptainPistolExecution, \\
	Child[9]=ShootIfIdeal, \\
	Child[10]=TryCaptainSuppression, \\
	Child[11]=TryTwoTurnAttackSupportIfSafe, \\
	Child[12]=TryCaptainGrenadeSingle, \\
	Child[13]=TryShootOrReloadOrOverwatch, \\
	Child[14]=ADVENTHuntEnemyWithCoverSeeNoOne, \\
	Child[15]=TryOverwatch, \\
	Child[16]=AFDoCower)

+Behaviors=(BehaviorName=AAStunLanceSelector, NodeType=Selector, Child[0]=StunLanceAttack, Child[1]=AATryStunLanceFromSafety, Child[2]=AATryStunLanceSingleTarget, Child[3]=AATryStunLanceIfSupported)
; First check: Stun Lance from cover with double adjacent non flanked tiles. Usually from a tree with a side fence.
+Behaviors=(BehaviorName=AATryStunLanceFromSafety, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=StunLanceAttack)
; Lone targets get priority always.
+Behaviors=(BehaviorName=AATryStunLanceSingleTarget, NodeType=Sequence, Child[0]=LancerOneEnemyVisible, Child[1]=NotLastActionPoint, Child[2]=TryStunLance25)
; Try stunlancing either with a lot of allies or low enemy count at any time. This is somewhat more risky.
+Behaviors=(BehaviorName=AATryStunLanceIfSupported, NodeType=Sequence, Child[0]=AATryMoveForStunLanceSupported)
; Stun Lance if supported.
+Behaviors=(BehaviorName=AATryMoveForStunLanceSupported, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ADVENTAvengerLowEnemyCountOrHighAllyCount, Child[2]=ADVENTAvengerLanceHPThreshold, Child[3]=TryStunLance33)
+Behaviors=(BehaviorName=ADVENTAvengerLanceHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="70%")
+Behaviors=(BehaviorName=ADVENTAvengerLowEnemyCountOrHighAllyCount, NodeType=Selector, Child[0]=ADVENTAvengerManyAlliesVisible, Child[1]=ADVENTAvengerLowEnemyCount)
+Behaviors=(BehaviorName=ADVENTAvengerManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=ADVENTAvengerLowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<=", Param[2]=2)

+Behaviors=(BehaviorName=AATryAFAdventMedikitOnAnyTargetSupported, NodeType=Sequence, Child[0]=ADVENTAvengerManyAlliesVisible, Child[1]=TryAFAdventMedikitOnAnyTarget)